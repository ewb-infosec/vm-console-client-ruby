=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Rapid7VmConsole::PolicyApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PolicyApi' do
  before do
    # run before each test
    @instance = Rapid7VmConsole::PolicyApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PolicyApi' do
    it 'should create an instance of PolicyApi' do
      expect(@instance).to be_instance_of(Rapid7VmConsole::PolicyApi)
    end
  end

  # unit tests for get_asset_policy_children
  # Policy Rules or Groups Directly Under Policy For Asset
  # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy with rule compliance results for the specified asset.
  # @param asset_id The identifier of the asset.
  # @param policy_id The identifier of the policy
  # @param [Hash] opts the optional parameters
  # @return [PageOfAssetPolicyItem]
  describe 'get_asset_policy_children test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_policy_group_children
  # Policy Rules or Groups Directly Under Policy Group For Asset
  # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy group with rule compliance results for the specified asset.
  # @param asset_id The identifier of the asset.
  # @param policy_id The identifier of the policy
  # @param group_id The identifier of the policy group.
  # @param [Hash] opts the optional parameters
  # @return [PageOfAssetPolicyItem]
  describe 'get_asset_policy_group_children test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_policy_rules_summary
  # Policy Rules For Asset
  # Retrieves the list of policy rules with compliance results for the specified asset and policy.
  # @param asset_id The identifier of the asset.
  # @param policy_id The identifier of the policy
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyRule]
  describe 'get_asset_policy_rules_summary test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_descendant_policy_rules
  # Policy Rules Under Policy Group
  # Retrieves the list of policy rules defined directly, or indirectly, underneath the specified policy group.
  # @param policy_id The identifier of the policy
  # @param group_id The identifier of the policy group.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyRule]
  describe 'get_descendant_policy_rules test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_disabled_policy_rules
  # Disabled Policy Rules
  # Retrieves a paged resource of disabled policy rules for the specified policy.
  # @param policy_id The identifier of the policy
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyRule]
  describe 'get_disabled_policy_rules test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policies
  # Policies
  # Retrieves a paged resource of policies.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Filters the retrieved policies with those whose titles that match the parameter.
  # @option opts [BOOLEAN] :scanned_only Flag indicating the policies retrieved should only include those with Pass or Fail compliance results. The list of scanned policies is based on the user&#39;s list of accessible assets.
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicy]
  describe 'get_policies test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policies_for_asset
  # Policies For Asset
  # Retrieves the list of policies with compliance results for the specified asset.
  # @param asset_id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the policies retrieved should only include those with a policy compliance status of either a PASS of FAIL result. Default value is &#x60;false&#x60;, which will also include policies with a compliance status of NOT_APPLICABLE.
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfAssetPolicy]
  describe 'get_policies_for_asset test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy
  # Policy
  # Retrieves the specified policy.
  # @param policy_id The identifier of the policy
  # @param [Hash] opts the optional parameters
  # @return [Policy]
  describe 'get_policy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_asset_result
  # Policy Asset Result
  # Retrieves an asset resource with rule compliance results for the specified asset and policy.
  # @param policy_id The identifier of the policy
  # @param asset_id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [PolicyAsset]
  describe 'get_policy_asset_result test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_asset_results
  # Policy Asset Results
  # Retrieves asset resources with rule compliance results for the specified policy.
  # @param policy_id The identifier of the policy
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the assets retrieved should only include those with rule results of either PASS or FAIL. Default value is &#x60;false&#x60;, which will also include assets with a compliance status of NOT_APPLICABLE.
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyAsset]
  describe 'get_policy_asset_results test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_children
  # Policy Rules or Groups Directly Under Policy
  # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy.
  # @param id The identifier of the policy
  # @param [Hash] opts the optional parameters
  # @return [PageOfPolicyItem]
  describe 'get_policy_children test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_group
  # Policy Group
  # Retrieves the specified policy group.
  # @param policy_id The identifier of the policy
  # @param group_id The identifier of the policy group.
  # @param [Hash] opts the optional parameters
  # @return [PolicyGroup]
  describe 'get_policy_group test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_group_asset_result
  # Asset Compliance For Policy Rules Under Policy Group
  # Retrieves an asset resource with rule compliance status against all rules under the specified policy group.
  # @param policy_id The identifier of the policy
  # @param group_id The identifier of the policy group.
  # @param asset_id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [PolicyAsset]
  describe 'get_policy_group_asset_result test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_group_asset_results
  # Assets Compliance For Policy Rules Under Policy Group
  # Retrieves asset resources with rule compliance status against all rules under the specified policy group.
  # @param policy_id The identifier of the policy
  # @param group_id The identifier of the policy group.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the assets retrieved should only include those with rule results of either PASS or FAIL. Default value is &#x60;false&#x60;, which will also include assets with a compliance status of NOT_APPLICABLE.
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyAsset]
  describe 'get_policy_group_asset_results test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_group_children
  # Policy Rules or Groups Directly Under Policy Group
  # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy group.
  # @param policy_id The identifier of the policy
  # @param group_id The identifier of the policy group.
  # @param [Hash] opts the optional parameters
  # @return [PageOfPolicyItem]
  describe 'get_policy_group_children test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_group_rules_with_asset_assessment
  # Policy Rules Under Policy Group For Asset
  # Retrieves the list of policy rules defined directly, or indirectly, underneath the specified policy group and the compliance results for the specified asset.
  # @param asset_id The identifier of the asset.
  # @param policy_id The identifier of the policy
  # @param group_id The identifier of the policy group.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyRule]
  describe 'get_policy_group_rules_with_asset_assessment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_groups
  # Policy Groups
  # Retrieves a paged resource of policy groups for the specified policy.
  # @param policy_id The identifier of the policy
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyGroup]
  describe 'get_policy_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_rule
  # Policy Rule
  # Retrieves the specified policy rule.
  # @param policy_id The identifier of the policy
  # @param rule_id The identifier of the policy rule.
  # @param [Hash] opts the optional parameters
  # @return [PolicyRule]
  describe 'get_policy_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_rule_asset_result
  # Asset Compliance For Policy Rule
  # Retrieves an asset resource with rule compliance results for the specified policy policy rule.
  # @param policy_id The identifier of the policy
  # @param rule_id The identifier of the policy rule.
  # @param asset_id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [PolicyAsset]
  describe 'get_policy_rule_asset_result test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_rule_asset_result_proof
  # Policy Rule Proof For Asset
  # Retrieves the policy rule proof captured during evaluation against the specified asset.
  # @param policy_id The identifier of the policy
  # @param rule_id The identifier of the policy rule.
  # @param asset_id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_policy_rule_asset_result_proof test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_rule_asset_results
  # Assets Compliance For Policy Rule
  # Retrieves asset resources with rule compliance results for the specified policy policy rule.
  # @param policy_id The identifier of the policy
  # @param rule_id The identifier of the policy rule.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the assets retrieved should only include those with rule results of either PASS or FAIL. Default value is &#x60;false&#x60;, which will also include assets with a compliance status of NOT_APPLICABLE.
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyAsset]
  describe 'get_policy_rule_asset_results test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_rule_controls
  # Policy Rule Controls
  # Retrieves all NIST SP 800-53 controls mappings for each CCE within the specified policy rule.
  # @param policy_id The identifier of the policy
  # @param rule_id The identifier of the policy rule.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyControl]
  describe 'get_policy_rule_controls test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_rule_rationale
  # Policy Rule Rationale
  # Retrieves the policy rule rationale for the specified policy.
  # @param policy_id The identifier of the policy
  # @param rule_id The identifier of the policy rule.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_policy_rule_rationale test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_rule_remediation
  # Policy Rule Remediation
  # Retrieves the policy rule remediation for the specified policy.
  # @param policy_id The identifier of the policy
  # @param rule_id The identifier of the policy rule.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_policy_rule_remediation test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_rules
  # Policy Rules
  # Retrieves a paged resource of policy rules for the specified policy.
  # @param policy_id The identifier of the policy
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfPolicyRule]
  describe 'get_policy_rules test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy_summary
  # Policy Compliance Summaries
  # Retrieves a compliance summary of all policies.
  # @param [Hash] opts the optional parameters
  # @return [PolicySummaryResource]
  describe 'get_policy_summary test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
