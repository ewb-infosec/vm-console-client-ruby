=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Rapid7VmConsole::AssetApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AssetApi' do
  before do
    # run before each test
    @instance = Rapid7VmConsole::AssetApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AssetApi' do
    it 'should create an instance of AssetApi' do
      expect(@instance).to be_instance_of(Rapid7VmConsole::AssetApi)
    end
  end

  # unit tests for add_asset_tag
  # Asset Tag
  # Assigns the specified tag to the asset.
  # @param id The identifier of the asset.
  # @param tag_id The identifier of the tag.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'add_asset_tag test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_asset
  # Assets
  # Creates or updates an asset with the specified details.
  # @param id The identifier of the site.
  # @param [Hash] opts the optional parameters
  # @option opts [AssetCreate] :asset The details of the asset being added or updated.  The operating system can be specified in one of three ways, with the order of precedence: &#x60;\&quot;osFingerprint\&quot;&#x60;, &#x60;\&quot;os\&quot;&#x60;, &#x60;\&quot;cpe\&quot;&#x60;
  # @return [CreatedReference]
  describe 'create_asset test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_asset
  # Asset
  # Deletes the specified asset.
  # @param id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'delete_asset test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_assets
  # Asset Search
  # Returns all assets for which you have access that match the given search criteria.
  # @param param1 param1
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfAsset]
  describe 'find_assets test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset
  # Asset
  # Returns the specified asset.
  # @param id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [Asset]
  describe 'get_asset test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_databases
  # Asset Databases
  # Returns the databases enumerated on an asset.
  # @param id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesDatabase]
  describe 'get_asset_databases test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_files
  # Asset Files
  # Returns the files discovered on an asset.
  # @param id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesFile]
  describe 'get_asset_files test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_service
  # Asset Service
  # Returns the service running a port and protocol on the asset.
  # @param id The identifier of the asset.
  # @param protocol The protocol of the service.
  # @param port The port of the service.
  # @param [Hash] opts the optional parameters
  # @return [Service]
  describe 'get_asset_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_service_configurations
  # Asset Service Configurations
  # Returns the configuration (properties) of a port and protocol on an asset.
  # @param id The identifier of the asset.
  # @param protocol The protocol of the service.
  # @param port The port of the service.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesConfiguration]
  describe 'get_asset_service_configurations test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_service_databases
  # Asset Service Databases
  # Returns the databases running on a port and protocol on an asset.
  # @param id The identifier of the asset.
  # @param protocol The protocol of the service.
  # @param port The port of the service.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesDatabase]
  describe 'get_asset_service_databases test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_service_user_groups
  # Asset Service User Groups
  # Returns the user groups enumerated on a port and protocol on an asset.
  # @param id The identifier of the asset.
  # @param protocol The protocol of the service.
  # @param port The port of the service.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesGroupAccount]
  describe 'get_asset_service_user_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_service_users
  # Asset Service Users
  # Returns the users enumerated on a port and protocol on an asset.
  # @param id The identifier of the asset.
  # @param protocol The protocol of the service.
  # @param port The port of the service.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesUserAccount]
  describe 'get_asset_service_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_service_web_application
  # Asset Service Web Application
  # Returns a web application running on a port and protocol on an asset.
  # @param id The identifier of the asset.
  # @param protocol The protocol of the service.
  # @param port The port of the service.
  # @param web_application_id The identifier of the web application.
  # @param [Hash] opts the optional parameters
  # @return [WebApplication]
  describe 'get_asset_service_web_application test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_service_web_applications
  # Asset Service Web Applications
  # Returns the web applications running on a port and protocol on an asset.
  # @param id The identifier of the asset.
  # @param protocol The protocol of the service.
  # @param port The port of the service.
  # @param [Hash] opts the optional parameters
  # @return [ReferencesWithWebApplicationIDLink]
  describe 'get_asset_service_web_applications test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_services
  # Asset Services
  # Returns the services discovered on an asset.
  # @param id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [ReferencesWithReferenceWithEndpointIDLinkServiceLink]
  describe 'get_asset_services test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_software
  # Asset Software
  # Returns the software on an asset.
  # @param id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesSoftware]
  describe 'get_asset_software test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_tags
  # Asset Tags
  # Returns tags assigned to an asset.
  # @param id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesAssetTag]
  describe 'get_asset_tags test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_user_groups
  # Asset User Groups
  # Returns user groups enumerated on an asset.
  # @param id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesGroupAccount]
  describe 'get_asset_user_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_users
  # Asset Users
  # Returns users enumerated on an asset.
  # @param id The identifier of the asset.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesUserAccount]
  describe 'get_asset_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_assets
  # Assets
  # Returns all assets for which you have access.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfAsset]
  describe 'get_assets test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_operating_system
  # Operating System
  # Returns the details for an operating system.
  # @param id The identifier of the operating system.
  # @param [Hash] opts the optional parameters
  # @return [OperatingSystem]
  describe 'get_operating_system test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_operating_systems
  # Operating Systems
  # Returns all operating systems discovered across all assets. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfOperatingSystem]
  describe 'get_operating_systems test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_software
  # Software
  # Returns the details for software.
  # @param id The identifier of the software.
  # @param [Hash] opts the optional parameters
  # @return [Software]
  describe 'get_software test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_softwares
  # Software
  # Returns all software enumerated on any asset.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfSoftware]
  describe 'get_softwares test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_asset_tag
  # Asset Tag
  # Removes the specified tag from the asset&#39;s tags.
  # @param id The identifier of the asset.
  # @param tag_id The identifier of the tag.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'remove_asset_tag test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
