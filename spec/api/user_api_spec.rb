=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Rapid7VmConsole::UserApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UserApi' do
  before do
    # run before each test
    @instance = Rapid7VmConsole::UserApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserApi' do
    it 'should create an instance of UserApi' do
      expect(@instance).to be_instance_of(Rapid7VmConsole::UserApi)
    end
  end

  # unit tests for add_user_asset_group
  # Asset Group Access
  # Grants the user access to the asset group. Individual asset group access cannot be granted to users with the &#x60;allAssetGroups&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param id The identifier of the user.
  # @param asset_group_id The identifier of the asset group.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'add_user_asset_group test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_user_site
  # Site Access
  # Grants the user access to the site. Individual site access cannot be granted to users with the &#x60;allSites&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param id The identifier of the user.
  # @param site_id The identifier of the site.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'add_user_site test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_user
  # Users
  # Creates a new user. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [UserEdit] :user The details of the user.
  # @return [CreatedReferenceUserIDLink]
  describe 'create_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_role
  # Role
  # Removes a role with the specified identifier. The role must not be built-in and cannot be currently assigned to any users.
  # @param id The identifier of the role.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'delete_role test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_user
  # User
  # Deletes a user account.&lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'delete_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_authentication_source
  # Authentication Source
  # Returns the details for an authentication source.
  # @param id The identifier of the authentication source.
  # @param [Hash] opts the optional parameters
  # @return [AuthenticationSource]
  describe 'get_authentication_source test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_authentication_source_users
  # Authentication Source Users
  # Returns hypermedia links for the user accounts that use the authentication source to authenticate.
  # @param id The identifier of the authentication source.
  # @param [Hash] opts the optional parameters
  # @return [ReferencesWithUserIDLink]
  describe 'get_authentication_source_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_authentication_sources
  # Authentication Sources
  # Returns all available sources of authentication for users.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesAuthenticationSource]
  describe 'get_authentication_sources test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_privilege
  # Privilege
  # Returns the details for a privilege.
  # @param id The identifier of the privilege.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'get_privilege test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_privileges
  # Privileges
  # Returns all privileges that may be granted to a role.
  # @param [Hash] opts the optional parameters
  # @return [Privileges]
  describe 'get_privileges test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_role
  # Role
  # Retrieves the details of a role.
  # @param id The identifier of the role.
  # @param [Hash] opts the optional parameters
  # @return [Role]
  describe 'get_role test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_role_users
  # Users With Role
  # Returns hypermedia links for the the users currently assigned a role.
  # @param id The identifier of the role.
  # @param [Hash] opts the optional parameters
  # @return [ReferencesWithUserIDLink]
  describe 'get_role_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_roles
  # Roles
  # Returns all roles for which users may be assigned.
  # @param [Hash] opts the optional parameters
  # @return [ResourcesRole]
  describe 'get_roles test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_two_factor_authentication_key
  # Two-Factor Authentication
  # Retrieves the current authentication token seed (key) for the user, if configured.
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [TokenResource]
  describe 'get_two_factor_authentication_key test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user
  # User
  # Returns the details for a user.&lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator, Current User&lt;/span&gt;
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_asset_groups
  # Asset Groups Access
  # Returns the asset groups to which the user has access.
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [ReferencesWithAssetGroupIDLink]
  describe 'get_user_asset_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_privileges
  # User Privileges
  # Returns the privileges granted to the user by their role. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [Privileges]
  describe 'get_user_privileges test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_sites
  # Sites Access
  # Returns the sites to which the user has access.
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [ReferencesWithSiteIDLink]
  describe 'get_user_sites test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_users
  # Users
  # Returns all defined users. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
  # @option opts [Integer] :size The number of records per page to retrieve.
  # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
  # @return [PageOfUser]
  describe 'get_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_users_with_privilege
  # Users With Privilege
  # Returns hypermedia links for all users granted the specified privilege by their role.
  # @param id The identifier of the privilege.
  # @param [Hash] opts the optional parameters
  # @return [ReferencesWithUserIDLink]
  describe 'get_users_with_privilege test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for regenerate_two_factor_authentication
  # Two-Factor Authentication
  # Regenerates a new authentication token seed (key) and updates it for the user. This key may be then be used in the appropriate 2FA authenticator.
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [TokenResource]
  describe 'regenerate_two_factor_authentication test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_all_user_asset_groups
  # Asset Groups Access
  # Revokes access to all asset groups from the user.
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'remove_all_user_asset_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_all_user_sites
  # Sites Access
  # Revokes access to all sites from the user.
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'remove_all_user_sites test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_user_asset_group
  # Asset Group Access
  # Grants the user access to the asset group. Individual asset group access cannot be granted to users with the &#x60;allAssetGroups&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param id The identifier of the user.
  # @param asset_group_id The identifier of the asset group.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'remove_user_asset_group test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_user_site
  # Site Access
  # Grants the user access to the site. Individual site access cannot be granted to users with the &#x60;allSites&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param id The identifier of the user.
  # @param site_id The identifier of the site.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'remove_user_site test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reset_password
  # Password Reset
  # Changes the password for the user. Users may only change their own password.
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password The new password to set.
  # @return [Links]
  describe 'reset_password test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_two_factor_authentication
  # Two-Factor Authentication
  # Sets the authentication token seed (key) for the user. This key may be then be used in the appropriate 2FA authenticator.
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token The authentication token seed (key) to use for the user.
  # @return [Links]
  describe 'set_two_factor_authentication test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_user_asset_groups
  # Asset Groups Access
  # Updates the asset groups to which the user has access. Individual asset group access cannot be granted to users with the &#x60;allAssetGroups&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Integer>] :asset_group_ids The identifiers of the asset groups to grant the user access to. Ignored if user has access to &#x60;allAssetGroups&#x60;.
  # @return [Links]
  describe 'set_user_asset_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_user_sites
  # Sites Access
  # Updates the sites to which the user has access. Individual site access cannot be granted to users with the &#x60;allSites&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Integer>] :site_ids The identifiers of the sites to grant the user access to. Ignored if the user has access to &#x60;allSites&#x60;.
  # @return [Links]
  describe 'set_user_sites test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unlock_user
  # Unlock Account
  # Unlocks a locked user account that has too many failed authentication attempts. Disabled accounts may not be unlocked.
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @return [Links]
  describe 'unlock_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_role
  # Role
  # Updates the details of a role.
  # @param id The identifier of the role.
  # @param [Hash] opts the optional parameters
  # @option opts [Role] :role The details of the role.
  # @return [Links]
  describe 'update_role test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # User
  # Updates the details of a user. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
  # @param id The identifier of the user.
  # @param [Hash] opts the optional parameters
  # @option opts [UserEdit] :user The details of the user.
  # @return [Links]
  describe 'update_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
