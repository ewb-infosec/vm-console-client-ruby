=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class PolicyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Policy Rules or Groups Directly Under Policy For Asset
    # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy with rule compliance results for the specified asset.
    # @param asset_id The identifier of the asset.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @return [PageOfAssetPolicyItem]
    def get_asset_policy_children(asset_id, policy_id, opts = {})
      data, _status_code, _headers = get_asset_policy_children_with_http_info(asset_id, policy_id, opts)
      data
    end

    # Policy Rules or Groups Directly Under Policy For Asset
    # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy with rule compliance results for the specified asset.
    # @param asset_id The identifier of the asset.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(PageOfAssetPolicyItem, Fixnum, Hash)>] PageOfAssetPolicyItem data, response status code and response headers
    def get_asset_policy_children_with_http_info(asset_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_asset_policy_children ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling PolicyApi.get_asset_policy_children"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_asset_policy_children"
      end
      # resource path
      local_var_path = '/api/3/assets/{assetId}/policies/{policyId}/children'.sub('{' + 'assetId' + '}', asset_id.to_s).sub('{' + 'policyId' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfAssetPolicyItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_asset_policy_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rules or Groups Directly Under Policy Group For Asset
    # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy group with rule compliance results for the specified asset.
    # @param asset_id The identifier of the asset.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @return [PageOfAssetPolicyItem]
    def get_asset_policy_group_children(asset_id, policy_id, group_id, opts = {})
      data, _status_code, _headers = get_asset_policy_group_children_with_http_info(asset_id, policy_id, group_id, opts)
      data
    end

    # Policy Rules or Groups Directly Under Policy Group For Asset
    # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy group with rule compliance results for the specified asset.
    # @param asset_id The identifier of the asset.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PageOfAssetPolicyItem, Fixnum, Hash)>] PageOfAssetPolicyItem data, response status code and response headers
    def get_asset_policy_group_children_with_http_info(asset_id, policy_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_asset_policy_group_children ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling PolicyApi.get_asset_policy_group_children"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_asset_policy_group_children"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.get_asset_policy_group_children"
      end
      # resource path
      local_var_path = '/api/3/assets/{assetId}/policies/{policyId}/groups/{groupId}/children'.sub('{' + 'assetId' + '}', asset_id.to_s).sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfAssetPolicyItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_asset_policy_group_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rules For Asset
    # Retrieves the list of policy rules with compliance results for the specified asset and policy.
    # @param asset_id The identifier of the asset.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyRule]
    def get_asset_policy_rules_summary(asset_id, policy_id, opts = {})
      data, _status_code, _headers = get_asset_policy_rules_summary_with_http_info(asset_id, policy_id, opts)
      data
    end

    # Policy Rules For Asset
    # Retrieves the list of policy rules with compliance results for the specified asset and policy.
    # @param asset_id The identifier of the asset.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyRule, Fixnum, Hash)>] PageOfPolicyRule data, response status code and response headers
    def get_asset_policy_rules_summary_with_http_info(asset_id, policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_asset_policy_rules_summary ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling PolicyApi.get_asset_policy_rules_summary"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_asset_policy_rules_summary"
      end
      # resource path
      local_var_path = '/api/3/assets/{assetId}/policies/{policyId}/rules'.sub('{' + 'assetId' + '}', asset_id.to_s).sub('{' + 'policyId' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_asset_policy_rules_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rules Under Policy Group
    # Retrieves the list of policy rules defined directly, or indirectly, underneath the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyRule]
    def get_descendant_policy_rules(policy_id, group_id, opts = {})
      data, _status_code, _headers = get_descendant_policy_rules_with_http_info(policy_id, group_id, opts)
      data
    end

    # Policy Rules Under Policy Group
    # Retrieves the list of policy rules defined directly, or indirectly, underneath the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyRule, Fixnum, Hash)>] PageOfPolicyRule data, response status code and response headers
    def get_descendant_policy_rules_with_http_info(policy_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_descendant_policy_rules ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_descendant_policy_rules"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.get_descendant_policy_rules"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/groups/{groupId}/rules'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_descendant_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disabled Policy Rules
    # Retrieves a paged resource of disabled policy rules for the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyRule]
    def get_disabled_policy_rules(policy_id, opts = {})
      data, _status_code, _headers = get_disabled_policy_rules_with_http_info(policy_id, opts)
      data
    end

    # Disabled Policy Rules
    # Retrieves a paged resource of disabled policy rules for the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyRule, Fixnum, Hash)>] PageOfPolicyRule data, response status code and response headers
    def get_disabled_policy_rules_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_disabled_policy_rules ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_disabled_policy_rules"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/rules/disabled'.sub('{' + 'policyId' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_disabled_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policies
    # Retrieves a paged resource of policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters the retrieved policies with those whose titles that match the parameter.
    # @option opts [BOOLEAN] :scanned_only Flag indicating the policies retrieved should only include those with Pass or Fail compliance results. The list of scanned policies is based on the user&#39;s list of accessible assets.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicy]
    def get_policies(opts = {})
      data, _status_code, _headers = get_policies_with_http_info(opts)
      data
    end

    # Policies
    # Retrieves a paged resource of policies.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters the retrieved policies with those whose titles that match the parameter.
    # @option opts [BOOLEAN] :scanned_only Flag indicating the policies retrieved should only include those with Pass or Fail compliance results. The list of scanned policies is based on the user&#39;s list of accessible assets.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicy, Fixnum, Hash)>] PageOfPolicy data, response status code and response headers
    def get_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policies ...'
      end
      # resource path
      local_var_path = '/api/3/policies'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'scannedOnly'] = opts[:'scanned_only'] if !opts[:'scanned_only'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policies For Asset
    # Retrieves the list of policies with compliance results for the specified asset.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the policies retrieved should only include those with a policy compliance status of either a PASS of FAIL result. Default value is &#x60;false&#x60;, which will also include policies with a compliance status of NOT_APPLICABLE.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfAssetPolicy]
    def get_policies_for_asset(asset_id, opts = {})
      data, _status_code, _headers = get_policies_for_asset_with_http_info(asset_id, opts)
      data
    end

    # Policies For Asset
    # Retrieves the list of policies with compliance results for the specified asset.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the policies retrieved should only include those with a policy compliance status of either a PASS of FAIL result. Default value is &#x60;false&#x60;, which will also include policies with a compliance status of NOT_APPLICABLE.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfAssetPolicy, Fixnum, Hash)>] PageOfAssetPolicy data, response status code and response headers
    def get_policies_for_asset_with_http_info(asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policies_for_asset ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling PolicyApi.get_policies_for_asset"
      end
      # resource path
      local_var_path = '/api/3/assets/{assetId}/policies'.sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'applicableOnly'] = opts[:'applicable_only'] if !opts[:'applicable_only'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfAssetPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policies_for_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy
    # Retrieves the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @return [Policy]
    def get_policy(policy_id, opts = {})
      data, _status_code, _headers = get_policy_with_http_info(policy_id, opts)
      data
    end

    # Policy
    # Retrieves the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(Policy, Fixnum, Hash)>] Policy data, response status code and response headers
    def get_policy_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}'.sub('{' + 'policyId' + '}', policy_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Policy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Asset Result
    # Retrieves an asset resource with rule compliance results for the specified asset and policy.
    # @param policy_id The identifier of the policy
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [PolicyAsset]
    def get_policy_asset_result(policy_id, asset_id, opts = {})
      data, _status_code, _headers = get_policy_asset_result_with_http_info(policy_id, asset_id, opts)
      data
    end

    # Policy Asset Result
    # Retrieves an asset resource with rule compliance results for the specified asset and policy.
    # @param policy_id The identifier of the policy
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyAsset, Fixnum, Hash)>] PolicyAsset data, response status code and response headers
    def get_policy_asset_result_with_http_info(policy_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_asset_result ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_asset_result"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling PolicyApi.get_policy_asset_result"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/assets/{assetId}'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_asset_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Asset Results
    # Retrieves asset resources with rule compliance results for the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the assets retrieved should only include those with rule results of either PASS or FAIL. Default value is &#x60;false&#x60;, which will also include assets with a compliance status of NOT_APPLICABLE.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyAsset]
    def get_policy_asset_results(policy_id, opts = {})
      data, _status_code, _headers = get_policy_asset_results_with_http_info(policy_id, opts)
      data
    end

    # Policy Asset Results
    # Retrieves asset resources with rule compliance results for the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the assets retrieved should only include those with rule results of either PASS or FAIL. Default value is &#x60;false&#x60;, which will also include assets with a compliance status of NOT_APPLICABLE.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyAsset, Fixnum, Hash)>] PageOfPolicyAsset data, response status code and response headers
    def get_policy_asset_results_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_asset_results ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_asset_results"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/assets'.sub('{' + 'policyId' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'applicableOnly'] = opts[:'applicable_only'] if !opts[:'applicable_only'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_asset_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rules or Groups Directly Under Policy
    # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy.
    # @param id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @return [PageOfPolicyItem]
    def get_policy_children(id, opts = {})
      data, _status_code, _headers = get_policy_children_with_http_info(id, opts)
      data
    end

    # Policy Rules or Groups Directly Under Policy
    # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy.
    # @param id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(PageOfPolicyItem, Fixnum, Hash)>] PageOfPolicyItem data, response status code and response headers
    def get_policy_children_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_children ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PolicyApi.get_policy_children"
      end
      # resource path
      local_var_path = '/api/3/policies/{id}/children'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Group
    # Retrieves the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @return [PolicyGroup]
    def get_policy_group(policy_id, group_id, opts = {})
      data, _status_code, _headers = get_policy_group_with_http_info(policy_id, group_id, opts)
      data
    end

    # Policy Group
    # Retrieves the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyGroup, Fixnum, Hash)>] PolicyGroup data, response status code and response headers
    def get_policy_group_with_http_info(policy_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_group ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.get_policy_group"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/groups/{groupId}'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Compliance For Policy Rules Under Policy Group
    # Retrieves an asset resource with rule compliance status against all rules under the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [PolicyAsset]
    def get_policy_group_asset_result(policy_id, group_id, asset_id, opts = {})
      data, _status_code, _headers = get_policy_group_asset_result_with_http_info(policy_id, group_id, asset_id, opts)
      data
    end

    # Asset Compliance For Policy Rules Under Policy Group
    # Retrieves an asset resource with rule compliance status against all rules under the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyAsset, Fixnum, Hash)>] PolicyAsset data, response status code and response headers
    def get_policy_group_asset_result_with_http_info(policy_id, group_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_group_asset_result ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_group_asset_result"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.get_policy_group_asset_result"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling PolicyApi.get_policy_group_asset_result"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/groups/{groupId}/assets/{assetId}'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'groupId' + '}', group_id.to_s).sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_group_asset_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assets Compliance For Policy Rules Under Policy Group
    # Retrieves asset resources with rule compliance status against all rules under the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the assets retrieved should only include those with rule results of either PASS or FAIL. Default value is &#x60;false&#x60;, which will also include assets with a compliance status of NOT_APPLICABLE.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyAsset]
    def get_policy_group_asset_results(policy_id, group_id, opts = {})
      data, _status_code, _headers = get_policy_group_asset_results_with_http_info(policy_id, group_id, opts)
      data
    end

    # Assets Compliance For Policy Rules Under Policy Group
    # Retrieves asset resources with rule compliance status against all rules under the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the assets retrieved should only include those with rule results of either PASS or FAIL. Default value is &#x60;false&#x60;, which will also include assets with a compliance status of NOT_APPLICABLE.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyAsset, Fixnum, Hash)>] PageOfPolicyAsset data, response status code and response headers
    def get_policy_group_asset_results_with_http_info(policy_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_group_asset_results ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_group_asset_results"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.get_policy_group_asset_results"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/groups/{groupId}/assets'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'applicableOnly'] = opts[:'applicable_only'] if !opts[:'applicable_only'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_group_asset_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rules or Groups Directly Under Policy Group
    # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @return [PageOfPolicyItem]
    def get_policy_group_children(policy_id, group_id, opts = {})
      data, _status_code, _headers = get_policy_group_children_with_http_info(policy_id, group_id, opts)
      data
    end

    # Policy Rules or Groups Directly Under Policy Group
    # Retrieves a paged resource of either policy rules, or groups, that are defined directly underneath the specified policy group.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PageOfPolicyItem, Fixnum, Hash)>] PageOfPolicyItem data, response status code and response headers
    def get_policy_group_children_with_http_info(policy_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_group_children ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_group_children"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.get_policy_group_children"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/groups/{groupId}/children'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_group_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rules Under Policy Group For Asset
    # Retrieves the list of policy rules defined directly, or indirectly, underneath the specified policy group and the compliance results for the specified asset.
    # @param asset_id The identifier of the asset.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyRule]
    def get_policy_group_rules_with_asset_assessment(asset_id, policy_id, group_id, opts = {})
      data, _status_code, _headers = get_policy_group_rules_with_asset_assessment_with_http_info(asset_id, policy_id, group_id, opts)
      data
    end

    # Policy Rules Under Policy Group For Asset
    # Retrieves the list of policy rules defined directly, or indirectly, underneath the specified policy group and the compliance results for the specified asset.
    # @param asset_id The identifier of the asset.
    # @param policy_id The identifier of the policy
    # @param group_id The identifier of the policy group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyRule, Fixnum, Hash)>] PageOfPolicyRule data, response status code and response headers
    def get_policy_group_rules_with_asset_assessment_with_http_info(asset_id, policy_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_group_rules_with_asset_assessment ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling PolicyApi.get_policy_group_rules_with_asset_assessment"
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_group_rules_with_asset_assessment"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PolicyApi.get_policy_group_rules_with_asset_assessment"
      end
      # resource path
      local_var_path = '/api/3/assets/{assetId}/policies/{policyId}/groups/{groupId}/rules'.sub('{' + 'assetId' + '}', asset_id.to_s).sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'groupId' + '}', group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_group_rules_with_asset_assessment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Groups
    # Retrieves a paged resource of policy groups for the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyGroup]
    def get_policy_groups(policy_id, opts = {})
      data, _status_code, _headers = get_policy_groups_with_http_info(policy_id, opts)
      data
    end

    # Policy Groups
    # Retrieves a paged resource of policy groups for the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyGroup, Fixnum, Hash)>] PageOfPolicyGroup data, response status code and response headers
    def get_policy_groups_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_groups ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_groups"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/groups'.sub('{' + 'policyId' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rule
    # Retrieves the specified policy rule.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @return [PolicyRule]
    def get_policy_rule(policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_policy_rule_with_http_info(policy_id, rule_id, opts)
      data
    end

    # Policy Rule
    # Retrieves the specified policy rule.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyRule, Fixnum, Hash)>] PolicyRule data, response status code and response headers
    def get_policy_rule_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_rule ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyApi.get_policy_rule"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/rules/{ruleId}'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Compliance For Policy Rule
    # Retrieves an asset resource with rule compliance results for the specified policy policy rule.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [PolicyAsset]
    def get_policy_rule_asset_result(policy_id, rule_id, asset_id, opts = {})
      data, _status_code, _headers = get_policy_rule_asset_result_with_http_info(policy_id, rule_id, asset_id, opts)
      data
    end

    # Asset Compliance For Policy Rule
    # Retrieves an asset resource with rule compliance results for the specified policy policy rule.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicyAsset, Fixnum, Hash)>] PolicyAsset data, response status code and response headers
    def get_policy_rule_asset_result_with_http_info(policy_id, rule_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_rule_asset_result ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_rule_asset_result"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyApi.get_policy_rule_asset_result"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling PolicyApi.get_policy_rule_asset_result"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/rules/{ruleId}/assets/{assetId}'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s).sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicyAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_rule_asset_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rule Proof For Asset
    # Retrieves the policy rule proof captured during evaluation against the specified asset.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_policy_rule_asset_result_proof(policy_id, rule_id, asset_id, opts = {})
      data, _status_code, _headers = get_policy_rule_asset_result_proof_with_http_info(policy_id, rule_id, asset_id, opts)
      data
    end

    # Policy Rule Proof For Asset
    # Retrieves the policy rule proof captured during evaluation against the specified asset.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_policy_rule_asset_result_proof_with_http_info(policy_id, rule_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_rule_asset_result_proof ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_rule_asset_result_proof"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyApi.get_policy_rule_asset_result_proof"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling PolicyApi.get_policy_rule_asset_result_proof"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/rules/{ruleId}/assets/{assetId}/proof'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s).sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_rule_asset_result_proof\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assets Compliance For Policy Rule
    # Retrieves asset resources with rule compliance results for the specified policy policy rule.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the assets retrieved should only include those with rule results of either PASS or FAIL. Default value is &#x60;false&#x60;, which will also include assets with a compliance status of NOT_APPLICABLE.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyAsset]
    def get_policy_rule_asset_results(policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_policy_rule_asset_results_with_http_info(policy_id, rule_id, opts)
      data
    end

    # Assets Compliance For Policy Rule
    # Retrieves asset resources with rule compliance results for the specified policy policy rule.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :applicable_only An optional boolean parameter indicating the assets retrieved should only include those with rule results of either PASS or FAIL. Default value is &#x60;false&#x60;, which will also include assets with a compliance status of NOT_APPLICABLE.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyAsset, Fixnum, Hash)>] PageOfPolicyAsset data, response status code and response headers
    def get_policy_rule_asset_results_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_rule_asset_results ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_rule_asset_results"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyApi.get_policy_rule_asset_results"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/rules/{ruleId}/assets'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'applicableOnly'] = opts[:'applicable_only'] if !opts[:'applicable_only'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_rule_asset_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rule Controls
    # Retrieves all NIST SP 800-53 controls mappings for each CCE within the specified policy rule.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyControl]
    def get_policy_rule_controls(policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_policy_rule_controls_with_http_info(policy_id, rule_id, opts)
      data
    end

    # Policy Rule Controls
    # Retrieves all NIST SP 800-53 controls mappings for each CCE within the specified policy rule.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyControl, Fixnum, Hash)>] PageOfPolicyControl data, response status code and response headers
    def get_policy_rule_controls_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_rule_controls ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_rule_controls"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyApi.get_policy_rule_controls"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/rules/{ruleId}/controls'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyControl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_rule_controls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rule Rationale
    # Retrieves the policy rule rationale for the specified policy.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_policy_rule_rationale(policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_policy_rule_rationale_with_http_info(policy_id, rule_id, opts)
      data
    end

    # Policy Rule Rationale
    # Retrieves the policy rule rationale for the specified policy.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_policy_rule_rationale_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_rule_rationale ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_rule_rationale"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyApi.get_policy_rule_rationale"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/rules/{ruleId}/rationale'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_rule_rationale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rule Remediation
    # Retrieves the policy rule remediation for the specified policy.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_policy_rule_remediation(policy_id, rule_id, opts = {})
      data, _status_code, _headers = get_policy_rule_remediation_with_http_info(policy_id, rule_id, opts)
      data
    end

    # Policy Rule Remediation
    # Retrieves the policy rule remediation for the specified policy.
    # @param policy_id The identifier of the policy
    # @param rule_id The identifier of the policy rule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_policy_rule_remediation_with_http_info(policy_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_rule_remediation ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_rule_remediation"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling PolicyApi.get_policy_rule_remediation"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/rules/{ruleId}/remediation'.sub('{' + 'policyId' + '}', policy_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_rule_remediation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Rules
    # Retrieves a paged resource of policy rules for the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfPolicyRule]
    def get_policy_rules(policy_id, opts = {})
      data, _status_code, _headers = get_policy_rules_with_http_info(policy_id, opts)
      data
    end

    # Policy Rules
    # Retrieves a paged resource of policy rules for the specified policy.
    # @param policy_id The identifier of the policy
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfPolicyRule, Fixnum, Hash)>] PageOfPolicyRule data, response status code and response headers
    def get_policy_rules_with_http_info(policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_rules ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling PolicyApi.get_policy_rules"
      end
      # resource path
      local_var_path = '/api/3/policies/{policyId}/rules'.sub('{' + 'policyId' + '}', policy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfPolicyRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Policy Compliance Summaries
    # Retrieves a compliance summary of all policies.
    # @param [Hash] opts the optional parameters
    # @return [PolicySummaryResource]
    def get_policy_summary(opts = {})
      data, _status_code, _headers = get_policy_summary_with_http_info(opts)
      data
    end

    # Policy Compliance Summaries
    # Retrieves a compliance summary of all policies.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PolicySummaryResource, Fixnum, Hash)>] PolicySummaryResource data, response status code and response headers
    def get_policy_summary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PolicyApi.get_policy_summary ...'
      end
      # resource path
      local_var_path = '/api/3/policy/summary'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PolicySummaryResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PolicyApi#get_policy_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
