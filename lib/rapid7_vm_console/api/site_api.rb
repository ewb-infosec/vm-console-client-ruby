=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class SiteApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Site Tag
    # Adds a tag to the site.
    # @param id The identifier of the site.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def add_site_tag(id, tag_id, opts = {})
      data, _status_code, _headers = add_site_tag_with_http_info(id, tag_id, opts)
      data
    end

    # Site Tag
    # Adds a tag to the site.
    # @param id The identifier of the site.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def add_site_tag_with_http_info(id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.add_site_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.add_site_tag"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling SiteApi.add_site_tag"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/tags/{tagId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#add_site_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Users Access
    # Grants a non-administrator user access to the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :param0 The identifier of the user.
    # @return [ReferenceWithUserIDLink]
    def add_site_user(id, opts = {})
      data, _status_code, _headers = add_site_user_with_http_info(id, opts)
      data
    end

    # Site Users Access
    # Grants a non-administrator user access to the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :param0 The identifier of the user.
    # @return [Array<(ReferenceWithUserIDLink, Fixnum, Hash)>] ReferenceWithUserIDLink data, response status code and response headers
    def add_site_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.add_site_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.add_site_user"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'param0'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferenceWithUserIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#add_site_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sites
    # Creates a new site with the specified configuration.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteCreateResource] :site Resource for creating a site configuration.
    # @return [ReferenceWithSiteIDLink]
    def create_site(opts = {})
      data, _status_code, _headers = create_site_with_http_info(opts)
      data
    end

    # Sites
    # Creates a new site with the specified configuration.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteCreateResource] :site Resource for creating a site configuration.
    # @return [Array<(ReferenceWithSiteIDLink, Fixnum, Hash)>] ReferenceWithSiteIDLink data, response status code and response headers
    def create_site_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.create_site ...'
      end
      # resource path
      local_var_path = '/api/3/sites'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'site'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferenceWithSiteIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#create_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Credentials
    # Creates a new site credential.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteCredential] :site_credential The specification of a site credential.
    # @return [CreatedReferenceCredentialIDLink]
    def create_site_credential(id, opts = {})
      data, _status_code, _headers = create_site_credential_with_http_info(id, opts)
      data
    end

    # Site Scan Credentials
    # Creates a new site credential.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteCredential] :site_credential The specification of a site credential.
    # @return [Array<(CreatedReferenceCredentialIDLink, Fixnum, Hash)>] CreatedReferenceCredentialIDLink data, response status code and response headers
    def create_site_credential_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.create_site_credential ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.create_site_credential"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/site_credentials'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'site_credential'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatedReferenceCredentialIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#create_site_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Schedules
    # Creates a new scan schedule for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [ScanSchedule] :scan_schedule Resource for a scan schedule.
    # @return [ReferenceWithScanScheduleIDLink]
    def create_site_scan_schedule(id, opts = {})
      data, _status_code, _headers = create_site_scan_schedule_with_http_info(id, opts)
      data
    end

    # Site Scan Schedules
    # Creates a new scan schedule for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [ScanSchedule] :scan_schedule Resource for a scan schedule.
    # @return [Array<(ReferenceWithScanScheduleIDLink, Fixnum, Hash)>] ReferenceWithScanScheduleIDLink data, response status code and response headers
    def create_site_scan_schedule_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.create_site_scan_schedule ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.create_site_scan_schedule"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_schedules'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan_schedule'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferenceWithScanScheduleIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#create_site_scan_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SMTP Alerts
    # Creates a new SMTP alert for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SmtpAlert] :alert Resource for creating a new SMTP alert.
    # @return [ReferenceWithAlertIDLink]
    def create_site_smtp_alert(id, opts = {})
      data, _status_code, _headers = create_site_smtp_alert_with_http_info(id, opts)
      data
    end

    # Site SMTP Alerts
    # Creates a new SMTP alert for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SmtpAlert] :alert Resource for creating a new SMTP alert.
    # @return [Array<(ReferenceWithAlertIDLink, Fixnum, Hash)>] ReferenceWithAlertIDLink data, response status code and response headers
    def create_site_smtp_alert_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.create_site_smtp_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.create_site_smtp_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/smtp'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'alert'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferenceWithAlertIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#create_site_smtp_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SNMP Alerts
    # Creates a new SNMP alert for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SnmpAlert] :alert Resource for creating a new SNMP alert.
    # @return [ReferenceWithAlertIDLink]
    def create_site_snmp_alert(id, opts = {})
      data, _status_code, _headers = create_site_snmp_alert_with_http_info(id, opts)
      data
    end

    # Site SNMP Alerts
    # Creates a new SNMP alert for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SnmpAlert] :alert Resource for creating a new SNMP alert.
    # @return [Array<(ReferenceWithAlertIDLink, Fixnum, Hash)>] ReferenceWithAlertIDLink data, response status code and response headers
    def create_site_snmp_alert_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.create_site_snmp_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.create_site_snmp_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/snmp'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'alert'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferenceWithAlertIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#create_site_snmp_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Syslog Alerts
    # Creates a new Syslog alert for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SyslogAlert] :alert Resource for creating a new Syslog alert.
    # @return [ReferenceWithAlertIDLink]
    def create_site_syslog_alert(id, opts = {})
      data, _status_code, _headers = create_site_syslog_alert_with_http_info(id, opts)
      data
    end

    # Site Syslog Alerts
    # Creates a new Syslog alert for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SyslogAlert] :alert Resource for creating a new Syslog alert.
    # @return [Array<(ReferenceWithAlertIDLink, Fixnum, Hash)>] ReferenceWithAlertIDLink data, response status code and response headers
    def create_site_syslog_alert_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.create_site_syslog_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.create_site_syslog_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/syslog'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'alert'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferenceWithAlertIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#create_site_syslog_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Alerts
    # Deletes all alerts from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_all_site_alerts(id, opts = {})
      data, _status_code, _headers = delete_all_site_alerts_with_http_info(id, opts)
      data
    end

    # Site Alerts
    # Deletes all alerts from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_all_site_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_all_site_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_all_site_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_all_site_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Credentials
    # Deletes all site credentials from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_all_site_credentials(id, opts = {})
      data, _status_code, _headers = delete_all_site_credentials_with_http_info(id, opts)
      data
    end

    # Site Scan Credentials
    # Deletes all site credentials from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_all_site_credentials_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_all_site_credentials ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_all_site_credentials"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/site_credentials'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_all_site_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Schedules
    # Deletes all scan schedules from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_all_site_scan_schedules(id, opts = {})
      data, _status_code, _headers = delete_all_site_scan_schedules_with_http_info(id, opts)
      data
    end

    # Site Scan Schedules
    # Deletes all scan schedules from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_all_site_scan_schedules_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_all_site_scan_schedules ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_all_site_scan_schedules"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_schedules'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_all_site_scan_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SMTP Alerts
    # Deletes all SMTP alerts from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_all_site_smtp_alerts(id, opts = {})
      data, _status_code, _headers = delete_all_site_smtp_alerts_with_http_info(id, opts)
      data
    end

    # Site SMTP Alerts
    # Deletes all SMTP alerts from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_all_site_smtp_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_all_site_smtp_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_all_site_smtp_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/smtp'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_all_site_smtp_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SNMP Alerts
    # Deletes all SNMP alerts from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_all_site_snmp_alerts(id, opts = {})
      data, _status_code, _headers = delete_all_site_snmp_alerts_with_http_info(id, opts)
      data
    end

    # Site SNMP Alerts
    # Deletes all SNMP alerts from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_all_site_snmp_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_all_site_snmp_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_all_site_snmp_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/snmp'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_all_site_snmp_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Syslog Alerts
    # Deletes all Syslog alerts from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_all_site_syslog_alerts(id, opts = {})
      data, _status_code, _headers = delete_all_site_syslog_alerts_with_http_info(id, opts)
      data
    end

    # Site Syslog Alerts
    # Deletes all Syslog alerts from the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_all_site_syslog_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_all_site_syslog_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_all_site_syslog_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/syslog'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_all_site_syslog_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site
    # site.delete.description
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_site(id, opts = {})
      data, _status_code, _headers = delete_site_with_http_info(id, opts)
      data
    end

    # Site
    # site.delete.description
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_site_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_site ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_site"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Credential
    # Deletes the specified site credential.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the site credential.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_site_credential(id, credential_id, opts = {})
      data, _status_code, _headers = delete_site_credential_with_http_info(id, credential_id, opts)
      data
    end

    # Site Scan Credential
    # Deletes the specified site credential.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the site credential.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_site_credential_with_http_info(id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_site_credential ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_site_credential"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling SiteApi.delete_site_credential"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/site_credentials/{credentialId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_site_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Schedule
    # Deletes the specified scan schedule from the site.
    # @param id The identifier of the site.
    # @param schedule_id The identifier of the scan schedule.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_site_scan_schedule(id, schedule_id, opts = {})
      data, _status_code, _headers = delete_site_scan_schedule_with_http_info(id, schedule_id, opts)
      data
    end

    # Site Scan Schedule
    # Deletes the specified scan schedule from the site.
    # @param id The identifier of the site.
    # @param schedule_id The identifier of the scan schedule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_site_scan_schedule_with_http_info(id, schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_site_scan_schedule ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_site_scan_schedule"
      end
      # verify the required parameter 'schedule_id' is set
      if @api_client.config.client_side_validation && schedule_id.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_id' when calling SiteApi.delete_site_scan_schedule"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_schedules/{scheduleId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_site_scan_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SMTP Alert
    # Deletes the specified SMTP alert from the site.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_site_smtp_alert(id, alert_id, opts = {})
      data, _status_code, _headers = delete_site_smtp_alert_with_http_info(id, alert_id, opts)
      data
    end

    # Site SMTP Alert
    # Deletes the specified SMTP alert from the site.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_site_smtp_alert_with_http_info(id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_site_smtp_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_site_smtp_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling SiteApi.delete_site_smtp_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/smtp/{alertId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_site_smtp_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SNMP Alert
    # Deletes the specified SNMP alert from the site.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_site_snmp_alert(id, alert_id, opts = {})
      data, _status_code, _headers = delete_site_snmp_alert_with_http_info(id, alert_id, opts)
      data
    end

    # Site SNMP Alert
    # Deletes the specified SNMP alert from the site.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_site_snmp_alert_with_http_info(id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_site_snmp_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_site_snmp_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling SiteApi.delete_site_snmp_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/snmp/{alertId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_site_snmp_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Syslog Alert
    # Deletes the specified Syslog alert from the site.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_site_syslog_alert(id, alert_id, opts = {})
      data, _status_code, _headers = delete_site_syslog_alert_with_http_info(id, alert_id, opts)
      data
    end

    # Site Syslog Alert
    # Deletes the specified Syslog alert from the site.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_site_syslog_alert_with_http_info(id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.delete_site_syslog_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.delete_site_syslog_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling SiteApi.delete_site_syslog_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/syslog/{alertId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#delete_site_syslog_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assigned Shared Credential Enablement
    # Enable or disable the shared credential for the site's scans.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the shared credential.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :status Flag indicating whether the shared credential is enabled for the site&#39;s scans.
    # @return [Links]
    def enable_shared_credential_on_site(id, credential_id, opts = {})
      data, _status_code, _headers = enable_shared_credential_on_site_with_http_info(id, credential_id, opts)
      data
    end

    # Assigned Shared Credential Enablement
    # Enable or disable the shared credential for the site&#39;s scans.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the shared credential.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :status Flag indicating whether the shared credential is enabled for the site&#39;s scans.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def enable_shared_credential_on_site_with_http_info(id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.enable_shared_credential_on_site ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.enable_shared_credential_on_site"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling SiteApi.enable_shared_credential_on_site"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/shared_credentials/{credentialId}/enabled'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'status'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#enable_shared_credential_on_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Credential Enablement
    # Enable or disable the site credential for scans.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the site credential.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :status Flag indicating whether the credential is enabled for use during the scan.
    # @return [Links]
    def enable_site_credential(id, credential_id, opts = {})
      data, _status_code, _headers = enable_site_credential_with_http_info(id, credential_id, opts)
      data
    end

    # Site Credential Enablement
    # Enable or disable the site credential for scans.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the site credential.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :status Flag indicating whether the credential is enabled for use during the scan.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def enable_site_credential_with_http_info(id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.enable_site_credential ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.enable_site_credential"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling SiteApi.enable_site_credential"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/site_credentials/{credentialId}/enabled'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'status'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#enable_site_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Excluded Asset Groups
    # Retrieves the excluded asset groups in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesAssetGroup]
    def get_excluded_asset_groups(id, opts = {})
      data, _status_code, _headers = get_excluded_asset_groups_with_http_info(id, opts)
      data
    end

    # Site Excluded Asset Groups
    # Retrieves the excluded asset groups in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesAssetGroup, Fixnum, Hash)>] ResourcesAssetGroup data, response status code and response headers
    def get_excluded_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_excluded_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_excluded_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/excluded_asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesAssetGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_excluded_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Excluded Targets
    # Retrieves the excluded targets in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ScanTargetsResource]
    def get_excluded_targets(id, opts = {})
      data, _status_code, _headers = get_excluded_targets_with_http_info(id, opts)
      data
    end

    # Site Excluded Targets
    # Retrieves the excluded targets in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScanTargetsResource, Fixnum, Hash)>] ScanTargetsResource data, response status code and response headers
    def get_excluded_targets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_excluded_targets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_excluded_targets"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/excluded_targets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScanTargetsResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_excluded_targets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Included Asset Groups
    # Retrieves the included asset groups in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesAssetGroup]
    def get_included_asset_groups(id, opts = {})
      data, _status_code, _headers = get_included_asset_groups_with_http_info(id, opts)
      data
    end

    # Site Included Asset Groups
    # Retrieves the included asset groups in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesAssetGroup, Fixnum, Hash)>] ResourcesAssetGroup data, response status code and response headers
    def get_included_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_included_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_included_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/included_asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesAssetGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_included_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Included Targets
    # Retrieves the included targets in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ScanTargetsResource]
    def get_included_targets(id, opts = {})
      data, _status_code, _headers = get_included_targets_with_http_info(id, opts)
      data
    end

    # Site Included Targets
    # Retrieves the included targets in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScanTargetsResource, Fixnum, Hash)>] ScanTargetsResource data, response status code and response headers
    def get_included_targets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_included_targets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_included_targets"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/included_targets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScanTargetsResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_included_targets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site
    # Retrieves the site with the specified identifier.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Site]
    def get_site(id, opts = {})
      data, _status_code, _headers = get_site_with_http_info(id, opts)
      data
    end

    # Site
    # Retrieves the site with the specified identifier.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Site, Fixnum, Hash)>] Site data, response status code and response headers
    def get_site_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Site')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Alerts
    # Retrieve all alerts defined in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesAlert]
    def get_site_alerts(id, opts = {})
      data, _status_code, _headers = get_site_alerts_with_http_info(id, opts)
      data
    end

    # Site Alerts
    # Retrieve all alerts defined in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesAlert, Fixnum, Hash)>] ResourcesAlert data, response status code and response headers
    def get_site_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesAlert')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Assets
    # Retrieves a paged resource of assets linked with the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfAsset]
    def get_site_assets(id, opts = {})
      data, _status_code, _headers = get_site_assets_with_http_info(id, opts)
      data
    end

    # Site Assets
    # Retrieves a paged resource of assets linked with the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfAsset, Fixnum, Hash)>] PageOfAsset data, response status code and response headers
    def get_site_assets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_assets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_assets"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/assets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Credential
    # Retrieves the specified site credential.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the site credential.
    # @param [Hash] opts the optional parameters
    # @return [SiteCredential]
    def get_site_credential(id, credential_id, opts = {})
      data, _status_code, _headers = get_site_credential_with_http_info(id, credential_id, opts)
      data
    end

    # Site Scan Credential
    # Retrieves the specified site credential.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the site credential.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SiteCredential, Fixnum, Hash)>] SiteCredential data, response status code and response headers
    def get_site_credential_with_http_info(id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_credential ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_credential"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling SiteApi.get_site_credential"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/site_credentials/{credentialId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SiteCredential')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Credentials
    # Retrieves all defined site credential resources.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesSiteCredential]
    def get_site_credentials(id, opts = {})
      data, _status_code, _headers = get_site_credentials_with_http_info(id, opts)
      data
    end

    # Site Scan Credentials
    # Retrieves all defined site credential resources.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesSiteCredential, Fixnum, Hash)>] ResourcesSiteCredential data, response status code and response headers
    def get_site_credentials_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_credentials ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_credentials"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/site_credentials'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSiteCredential')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Discovery Connection
    # Retrieves the discovery connection assigned to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [SiteDiscoveryConnection]
    def get_site_discovery_connection(id, opts = {})
      data, _status_code, _headers = get_site_discovery_connection_with_http_info(id, opts)
      data
    end

    # Site Discovery Connection
    # Retrieves the discovery connection assigned to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SiteDiscoveryConnection, Fixnum, Hash)>] SiteDiscoveryConnection data, response status code and response headers
    def get_site_discovery_connection_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_discovery_connection ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_discovery_connection"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/discovery_connection'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SiteDiscoveryConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_discovery_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Discovery Search Criteria
    # Retrieve the search criteria of the dynamic site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [DiscoverySearchCriteria]
    def get_site_discovery_search_criteria(id, opts = {})
      data, _status_code, _headers = get_site_discovery_search_criteria_with_http_info(id, opts)
      data
    end

    # Site Discovery Search Criteria
    # Retrieve the search criteria of the dynamic site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DiscoverySearchCriteria, Fixnum, Hash)>] DiscoverySearchCriteria data, response status code and response headers
    def get_site_discovery_search_criteria_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_discovery_search_criteria ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_discovery_search_criteria"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/discovery_search_criteria'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscoverySearchCriteria')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_discovery_search_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Organization Information
    # Retrieves the site organization information.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [SiteOrganization]
    def get_site_organization(id, opts = {})
      data, _status_code, _headers = get_site_organization_with_http_info(id, opts)
      data
    end

    # Site Organization Information
    # Retrieves the site organization information.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SiteOrganization, Fixnum, Hash)>] SiteOrganization data, response status code and response headers
    def get_site_organization_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_organization ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_organization"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/organization'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SiteOrganization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Engine
    # Retrieves the resource of the scan engine assigned to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ScanEngine]
    def get_site_scan_engine(id, opts = {})
      data, _status_code, _headers = get_site_scan_engine_with_http_info(id, opts)
      data
    end

    # Site Scan Engine
    # Retrieves the resource of the scan engine assigned to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScanEngine, Fixnum, Hash)>] ScanEngine data, response status code and response headers
    def get_site_scan_engine_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_scan_engine ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_scan_engine"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_engine'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScanEngine')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_scan_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Schedule
    # Retrieves the specified scan schedule.
    # @param id The identifier of the site.
    # @param schedule_id The identifier of the scan schedule.
    # @param [Hash] opts the optional parameters
    # @return [ScanSchedule]
    def get_site_scan_schedule(id, schedule_id, opts = {})
      data, _status_code, _headers = get_site_scan_schedule_with_http_info(id, schedule_id, opts)
      data
    end

    # Site Scan Schedule
    # Retrieves the specified scan schedule.
    # @param id The identifier of the site.
    # @param schedule_id The identifier of the scan schedule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScanSchedule, Fixnum, Hash)>] ScanSchedule data, response status code and response headers
    def get_site_scan_schedule_with_http_info(id, schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_scan_schedule ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_scan_schedule"
      end
      # verify the required parameter 'schedule_id' is set
      if @api_client.config.client_side_validation && schedule_id.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_id' when calling SiteApi.get_site_scan_schedule"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_schedules/{scheduleId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScanSchedule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_scan_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Schedules
    # Returns all scan schedules for the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesScanSchedule]
    def get_site_scan_schedules(id, opts = {})
      data, _status_code, _headers = get_site_scan_schedules_with_http_info(id, opts)
      data
    end

    # Site Scan Schedules
    # Returns all scan schedules for the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesScanSchedule, Fixnum, Hash)>] ResourcesScanSchedule data, response status code and response headers
    def get_site_scan_schedules_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_scan_schedules ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_scan_schedules"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_schedules'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesScanSchedule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_scan_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Template
    # Retrieves the resource of the scan template assigned to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ScanTemplate]
    def get_site_scan_template(id, opts = {})
      data, _status_code, _headers = get_site_scan_template_with_http_info(id, opts)
      data
    end

    # Site Scan Template
    # Retrieves the resource of the scan template assigned to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScanTemplate, Fixnum, Hash)>] ScanTemplate data, response status code and response headers
    def get_site_scan_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_scan_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_scan_template"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_template'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScanTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_scan_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assigned Shared Credentials
    # Retrieve all of the shared credentials assigned to the site. These shared credentials can be enabled/disabled for the site's scan.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesSiteSharedCredential]
    def get_site_shared_credentials(id, opts = {})
      data, _status_code, _headers = get_site_shared_credentials_with_http_info(id, opts)
      data
    end

    # Assigned Shared Credentials
    # Retrieve all of the shared credentials assigned to the site. These shared credentials can be enabled/disabled for the site&#39;s scan.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesSiteSharedCredential, Fixnum, Hash)>] ResourcesSiteSharedCredential data, response status code and response headers
    def get_site_shared_credentials_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_shared_credentials ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_shared_credentials"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/shared_credentials'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSiteSharedCredential')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_shared_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SMTP Alert
    # Retrieves the specified SMTP alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [SmtpAlert]
    def get_site_smtp_alert(id, alert_id, opts = {})
      data, _status_code, _headers = get_site_smtp_alert_with_http_info(id, alert_id, opts)
      data
    end

    # Site SMTP Alert
    # Retrieves the specified SMTP alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmtpAlert, Fixnum, Hash)>] SmtpAlert data, response status code and response headers
    def get_site_smtp_alert_with_http_info(id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_smtp_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_smtp_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling SiteApi.get_site_smtp_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/smtp/{alertId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmtpAlert')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_smtp_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SMTP Alerts
    # Retrieves all SMTP alerts defined in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesSmtpAlert]
    def get_site_smtp_alerts(id, opts = {})
      data, _status_code, _headers = get_site_smtp_alerts_with_http_info(id, opts)
      data
    end

    # Site SMTP Alerts
    # Retrieves all SMTP alerts defined in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesSmtpAlert, Fixnum, Hash)>] ResourcesSmtpAlert data, response status code and response headers
    def get_site_smtp_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_smtp_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_smtp_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/smtp'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSmtpAlert')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_smtp_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SNMP Alert
    # Retrieves the specified SNMP alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [SnmpAlert]
    def get_site_snmp_alert(id, alert_id, opts = {})
      data, _status_code, _headers = get_site_snmp_alert_with_http_info(id, alert_id, opts)
      data
    end

    # Site SNMP Alert
    # Retrieves the specified SNMP alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnmpAlert, Fixnum, Hash)>] SnmpAlert data, response status code and response headers
    def get_site_snmp_alert_with_http_info(id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_snmp_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_snmp_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling SiteApi.get_site_snmp_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/snmp/{alertId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SnmpAlert')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_snmp_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SNMP Alerts
    # Retrieves all SNMP alerts defined in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesSnmpAlert]
    def get_site_snmp_alerts(id, opts = {})
      data, _status_code, _headers = get_site_snmp_alerts_with_http_info(id, opts)
      data
    end

    # Site SNMP Alerts
    # Retrieves all SNMP alerts defined in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesSnmpAlert, Fixnum, Hash)>] ResourcesSnmpAlert data, response status code and response headers
    def get_site_snmp_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_snmp_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_snmp_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/snmp'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSnmpAlert')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_snmp_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Syslog Alert
    # Retrieves the specified Syslog alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [SyslogAlert]
    def get_site_syslog_alert(id, alert_id, opts = {})
      data, _status_code, _headers = get_site_syslog_alert_with_http_info(id, alert_id, opts)
      data
    end

    # Site Syslog Alert
    # Retrieves the specified Syslog alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyslogAlert, Fixnum, Hash)>] SyslogAlert data, response status code and response headers
    def get_site_syslog_alert_with_http_info(id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_syslog_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_syslog_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling SiteApi.get_site_syslog_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/syslog/{alertId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SyslogAlert')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_syslog_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Syslog Alerts
    # Retrieves all Syslog alerts defined in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesSyslogAlert]
    def get_site_syslog_alerts(id, opts = {})
      data, _status_code, _headers = get_site_syslog_alerts_with_http_info(id, opts)
      data
    end

    # Site Syslog Alerts
    # Retrieves all Syslog alerts defined in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesSyslogAlert, Fixnum, Hash)>] ResourcesSyslogAlert data, response status code and response headers
    def get_site_syslog_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_syslog_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_syslog_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/syslog'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSyslogAlert')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_syslog_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Tags
    # Retrieves the list of tags added to the sites.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesTag]
    def get_site_tags(id, opts = {})
      data, _status_code, _headers = get_site_tags_with_http_info(id, opts)
      data
    end

    # Site Tags
    # Retrieves the list of tags added to the sites.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesTag, Fixnum, Hash)>] ResourcesTag data, response status code and response headers
    def get_site_tags_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_tags ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_tags"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/tags'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesTag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Users Access
    # Retrieve the list of non-administrator users that have access to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesUser]
    def get_site_users(id, opts = {})
      data, _status_code, _headers = get_site_users_with_http_info(id, opts)
      data
    end

    # Site Users Access
    # Retrieve the list of non-administrator users that have access to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesUser, Fixnum, Hash)>] ResourcesUser data, response status code and response headers
    def get_site_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_site_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_site_users"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_site_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sites
    # Retrieves a paged resource of accessible sites.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfSite]
    def get_sites(opts = {})
      data, _status_code, _headers = get_sites_with_http_info(opts)
      data
    end

    # Sites
    # Retrieves a paged resource of accessible sites.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfSite, Fixnum, Hash)>] PageOfSite data, response status code and response headers
    def get_sites_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_sites ...'
      end
      # resource path
      local_var_path = '/api/3/sites'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfSite')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Web Authentication HTML Forms
    # Retrieves all HTML form authentications configured in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesWebFormAuthentication]
    def get_web_auth_html_forms(id, opts = {})
      data, _status_code, _headers = get_web_auth_html_forms_with_http_info(id, opts)
      data
    end

    # Web Authentication HTML Forms
    # Retrieves all HTML form authentications configured in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesWebFormAuthentication, Fixnum, Hash)>] ResourcesWebFormAuthentication data, response status code and response headers
    def get_web_auth_html_forms_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_web_auth_html_forms ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_web_auth_html_forms"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/web_authentication/html_forms'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesWebFormAuthentication')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_web_auth_html_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Web Authentication HTTP Headers
    # Retrieves all HTTP header authentications configured in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesWebHeaderAuthentication]
    def get_web_auth_http_headers(id, opts = {})
      data, _status_code, _headers = get_web_auth_http_headers_with_http_info(id, opts)
      data
    end

    # Web Authentication HTTP Headers
    # Retrieves all HTTP header authentications configured in the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesWebHeaderAuthentication, Fixnum, Hash)>] ResourcesWebHeaderAuthentication data, response status code and response headers
    def get_web_auth_http_headers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.get_web_auth_http_headers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.get_web_auth_http_headers"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/web_authentication/http_headers'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesWebHeaderAuthentication')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#get_web_auth_http_headers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Excluded Asset Groups
    # Removes all excluded asset groups from the specified static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_all_excluded_asset_groups(id, opts = {})
      data, _status_code, _headers = remove_all_excluded_asset_groups_with_http_info(id, opts)
      data
    end

    # Site Excluded Asset Groups
    # Removes all excluded asset groups from the specified static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_all_excluded_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.remove_all_excluded_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.remove_all_excluded_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/excluded_asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#remove_all_excluded_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Included Asset Groups
    # Removes all included asset groups from the specified static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_all_included_asset_groups(id, opts = {})
      data, _status_code, _headers = remove_all_included_asset_groups_with_http_info(id, opts)
      data
    end

    # Site Included Asset Groups
    # Removes all included asset groups from the specified static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_all_included_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.remove_all_included_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.remove_all_included_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/included_asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#remove_all_included_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Asset
    # Removes an asset from a site. The asset will only be deleted if it belongs to no other sites.
    # @param id The identifier of the site.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_asset_from_site(id, asset_id, opts = {})
      data, _status_code, _headers = remove_asset_from_site_with_http_info(id, asset_id, opts)
      data
    end

    # Site Asset
    # Removes an asset from a site. The asset will only be deleted if it belongs to no other sites.
    # @param id The identifier of the site.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_asset_from_site_with_http_info(id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.remove_asset_from_site ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.remove_asset_from_site"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling SiteApi.remove_asset_from_site"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/assets/{assetId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#remove_asset_from_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Excluded Asset Group
    # Removes the specified asset group from the excluded asset groups configured in the static site.
    # @param id The identifier of the site.
    # @param asset_group_id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_excluded_asset_group(id, asset_group_id, opts = {})
      data, _status_code, _headers = remove_excluded_asset_group_with_http_info(id, asset_group_id, opts)
      data
    end

    # Site Excluded Asset Group
    # Removes the specified asset group from the excluded asset groups configured in the static site.
    # @param id The identifier of the site.
    # @param asset_group_id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_excluded_asset_group_with_http_info(id, asset_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.remove_excluded_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.remove_excluded_asset_group"
      end
      # verify the required parameter 'asset_group_id' is set
      if @api_client.config.client_side_validation && asset_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_group_id' when calling SiteApi.remove_excluded_asset_group"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/excluded_asset_groups/{assetGroupId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetGroupId' + '}', asset_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#remove_excluded_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Included Asset Group
    # Removes the specified asset group from the included asset groups configured in the static site.
    # @param id The identifier of the site.
    # @param asset_group_id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_included_asset_group(id, asset_group_id, opts = {})
      data, _status_code, _headers = remove_included_asset_group_with_http_info(id, asset_group_id, opts)
      data
    end

    # Site Included Asset Group
    # Removes the specified asset group from the included asset groups configured in the static site.
    # @param id The identifier of the site.
    # @param asset_group_id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_included_asset_group_with_http_info(id, asset_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.remove_included_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.remove_included_asset_group"
      end
      # verify the required parameter 'asset_group_id' is set
      if @api_client.config.client_side_validation && asset_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_group_id' when calling SiteApi.remove_included_asset_group"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/included_asset_groups/{assetGroupId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetGroupId' + '}', asset_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#remove_included_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Assets
    # Removes all assets from the specified site. Assets will be deleted entirely from the Security Console if either Asset Linking is disabled or if Asset Linking is enabled and the asset only existed in this site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_site_assets(id, opts = {})
      data, _status_code, _headers = remove_site_assets_with_http_info(id, opts)
      data
    end

    # Site Assets
    # Removes all assets from the specified site. Assets will be deleted entirely from the Security Console if either Asset Linking is disabled or if Asset Linking is enabled and the asset only existed in this site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_site_assets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.remove_site_assets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.remove_site_assets"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/assets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#remove_site_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Tag
    # Removes the specified tag from the site's tags.
    # @param id The identifier of the site.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_site_tag(id, tag_id, opts = {})
      data, _status_code, _headers = remove_site_tag_with_http_info(id, tag_id, opts)
      data
    end

    # Site Tag
    # Removes the specified tag from the site&#39;s tags.
    # @param id The identifier of the site.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_site_tag_with_http_info(id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.remove_site_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.remove_site_tag"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling SiteApi.remove_site_tag"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/tags/{tagId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#remove_site_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site User Access
    # Removes the specified user from the site's access list.
    # @param id The identifier of the site.
    # @param user_id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_site_user(id, user_id, opts = {})
      data, _status_code, _headers = remove_site_user_with_http_info(id, user_id, opts)
      data
    end

    # Site User Access
    # Removes the specified user from the site&#39;s access list.
    # @param id The identifier of the site.
    # @param user_id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_site_user_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.remove_site_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.remove_site_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling SiteApi.remove_site_user"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/users/{userId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#remove_site_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Credentials
    # Updates multiple site credentials.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SiteCredential>] :site_credentials A list of site credentials resources.
    # @return [Links]
    def set_site_credentials(id, opts = {})
      data, _status_code, _headers = set_site_credentials_with_http_info(id, opts)
      data
    end

    # Site Scan Credentials
    # Updates multiple site credentials.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SiteCredential>] :site_credentials A list of site credentials resources.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_credentials_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_credentials ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_credentials"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/site_credentials'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'site_credentials'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Discovery Connection
    # Updates the discovery connection assigned to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :connection_id The identifier of the discovery connection.
    # @return [Links]
    def set_site_discovery_connection(id, opts = {})
      data, _status_code, _headers = set_site_discovery_connection_with_http_info(id, opts)
      data
    end

    # Site Discovery Connection
    # Updates the discovery connection assigned to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :connection_id The identifier of the discovery connection.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_discovery_connection_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_discovery_connection ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_discovery_connection"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/discovery_connection'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'connection_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_discovery_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Discovery Search Criteria
    # Update the search criteria of the dynamic site.
    # @param id The identifier of the site.
    # @param param1 param1
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def set_site_discovery_search_criteria(id, param1, opts = {})
      data, _status_code, _headers = set_site_discovery_search_criteria_with_http_info(id, param1, opts)
      data
    end

    # Site Discovery Search Criteria
    # Update the search criteria of the dynamic site.
    # @param id The identifier of the site.
    # @param param1 param1
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_discovery_search_criteria_with_http_info(id, param1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_discovery_search_criteria ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_discovery_search_criteria"
      end
      # verify the required parameter 'param1' is set
      if @api_client.config.client_side_validation && param1.nil?
        fail ArgumentError, "Missing the required parameter 'param1' when calling SiteApi.set_site_discovery_search_criteria"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/discovery_search_criteria'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(param1)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_discovery_search_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Engine
    # Updates the assigned scan engine to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :scan_engine_id The identifier of the scan engine.
    # @return [Links]
    def set_site_scan_engine(id, opts = {})
      data, _status_code, _headers = set_site_scan_engine_with_http_info(id, opts)
      data
    end

    # Site Scan Engine
    # Updates the assigned scan engine to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :scan_engine_id The identifier of the scan engine.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_scan_engine_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_scan_engine ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_scan_engine"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_engine'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan_engine_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_scan_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Schedules
    # Updates all scan schedules for the specified site in a single request using the array of resources defined in the request body.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ScanSchedule>] :scan_schedules Array of resources for updating all scan schedules defined in the site. Scan schedules defined in the site that are omitted from this request will be deleted from the site.
    # @return [Links]
    def set_site_scan_schedules(id, opts = {})
      data, _status_code, _headers = set_site_scan_schedules_with_http_info(id, opts)
      data
    end

    # Site Scan Schedules
    # Updates all scan schedules for the specified site in a single request using the array of resources defined in the request body.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ScanSchedule>] :scan_schedules Array of resources for updating all scan schedules defined in the site. Scan schedules defined in the site that are omitted from this request will be deleted from the site.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_scan_schedules_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_scan_schedules ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_scan_schedules"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_schedules'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan_schedules'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_scan_schedules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Template
    # Updates the assigned scan template to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scan_template_id The identifier of the scan template.
    # @return [Links]
    def set_site_scan_template(id, opts = {})
      data, _status_code, _headers = set_site_scan_template_with_http_info(id, opts)
      data
    end

    # Site Scan Template
    # Updates the assigned scan template to the site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scan_template_id The identifier of the scan template.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_scan_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_scan_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_scan_template"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_template'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan_template_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_scan_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SMTP Alerts
    # Updates all SMTP alerts for the specified site in a single request using the array of resources defined in the request body.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SmtpAlert>] :alert Array of resources for updating all SMTP alerts defined in the site. Alerts defined in the site that are omitted from this request will be deleted from the site.
    # @return [Links]
    def set_site_smtp_alerts(id, opts = {})
      data, _status_code, _headers = set_site_smtp_alerts_with_http_info(id, opts)
      data
    end

    # Site SMTP Alerts
    # Updates all SMTP alerts for the specified site in a single request using the array of resources defined in the request body.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SmtpAlert>] :alert Array of resources for updating all SMTP alerts defined in the site. Alerts defined in the site that are omitted from this request will be deleted from the site.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_smtp_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_smtp_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_smtp_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/smtp'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'alert'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_smtp_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SNMP Alerts
    # Updates all SNMP alerts for the specified site in a single request using the array of resources defined in the request body.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SnmpAlert>] :alert Array of resources for updating all SNMP alerts defined in the site. Alerts defined in the site that are omitted from this request will be deleted from the site.
    # @return [Links]
    def set_site_snmp_alerts(id, opts = {})
      data, _status_code, _headers = set_site_snmp_alerts_with_http_info(id, opts)
      data
    end

    # Site SNMP Alerts
    # Updates all SNMP alerts for the specified site in a single request using the array of resources defined in the request body.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SnmpAlert>] :alert Array of resources for updating all SNMP alerts defined in the site. Alerts defined in the site that are omitted from this request will be deleted from the site.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_snmp_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_snmp_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_snmp_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/snmp'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'alert'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_snmp_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Syslog Alerts
    # Updates all Syslog alerts for the specified site in a single request using the array of resources defined in the request body.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SyslogAlert>] :alert Array of resources for updating all Syslog alerts defined in the site. Alerts defined in the site that are omitted from this request will be deleted from the site.
    # @return [Links]
    def set_site_syslog_alerts(id, opts = {})
      data, _status_code, _headers = set_site_syslog_alerts_with_http_info(id, opts)
      data
    end

    # Site Syslog Alerts
    # Updates all Syslog alerts for the specified site in a single request using the array of resources defined in the request body.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SyslogAlert>] :alert Array of resources for updating all Syslog alerts defined in the site. Alerts defined in the site that are omitted from this request will be deleted from the site.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_syslog_alerts_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_syslog_alerts ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_syslog_alerts"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/syslog'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'alert'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_syslog_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Tags
    # Updates the site's list of tags.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :tags A list of tag identifiers to replace the site&#39;s tags.
    # @return [Links]
    def set_site_tags(id, opts = {})
      data, _status_code, _headers = set_site_tags_with_http_info(id, opts)
      data
    end

    # Site Tags
    # Updates the site&#39;s list of tags.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :tags A list of tag identifiers to replace the site&#39;s tags.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_tags_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_tags ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_tags"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/tags'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'tags'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Users Access
    # Updates the site's access list.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :users A list of user identifiers to replace the site&#39;s access list.
    # @return [Links]
    def set_site_users(id, opts = {})
      data, _status_code, _headers = set_site_users_with_http_info(id, opts)
      data
    end

    # Site Users Access
    # Updates the site&#39;s access list.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :users A list of user identifiers to replace the site&#39;s access list.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_site_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.set_site_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.set_site_users"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'users'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#set_site_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Excluded Asset Groups
    # Updates the excluded asset groups in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :asset_group_ids Array of asset group identifiers.
    # @return [Links]
    def update_excluded_asset_groups(id, opts = {})
      data, _status_code, _headers = update_excluded_asset_groups_with_http_info(id, opts)
      data
    end

    # Site Excluded Asset Groups
    # Updates the excluded asset groups in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :asset_group_ids Array of asset group identifiers.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_excluded_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_excluded_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_excluded_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/excluded_asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'asset_group_ids'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_excluded_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Excluded Targets
    # Updates the excluded targets in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :scan_targets List of addresses to be the site&#39;s new excluded scan targets. Each address is a string that can represent either a hostname, ipv4 address, ipv4 address range, ipv6 address, or CIDR notation.
    # @return [Links]
    def update_excluded_targets(id, opts = {})
      data, _status_code, _headers = update_excluded_targets_with_http_info(id, opts)
      data
    end

    # Site Excluded Targets
    # Updates the excluded targets in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :scan_targets List of addresses to be the site&#39;s new excluded scan targets. Each address is a string that can represent either a hostname, ipv4 address, ipv4 address range, ipv6 address, or CIDR notation.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_excluded_targets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_excluded_targets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_excluded_targets"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/excluded_targets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan_targets'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_excluded_targets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Included Asset Groups
    # Updates the included asset groups in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :asset_group_ids Array of asset group identifiers.
    # @return [Links]
    def update_included_asset_groups(id, opts = {})
      data, _status_code, _headers = update_included_asset_groups_with_http_info(id, opts)
      data
    end

    # Site Included Asset Groups
    # Updates the included asset groups in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :asset_group_ids Array of asset group identifiers.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_included_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_included_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_included_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/included_asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'asset_group_ids'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_included_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Included Targets
    # Updates the included targets in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :scan_targets List of addresses to be the site&#39;s new included scan targets. Each address is a string that can represent either a hostname, ipv4 address, ipv4 address range, ipv6 address, or CIDR notation.
    # @return [Links]
    def update_included_targets(id, opts = {})
      data, _status_code, _headers = update_included_targets_with_http_info(id, opts)
      data
    end

    # Site Included Targets
    # Updates the included targets in a static site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :scan_targets List of addresses to be the site&#39;s new included scan targets. Each address is a string that can represent either a hostname, ipv4 address, ipv4 address range, ipv6 address, or CIDR notation.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_included_targets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_included_targets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_included_targets"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/included_targets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan_targets'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_included_targets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site
    # Updates the configuration of the site with the specified identifier.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteUpdateResource] :site Resource for updating a site configuration.
    # @return [Links]
    def update_site(id, opts = {})
      data, _status_code, _headers = update_site_with_http_info(id, opts)
      data
    end

    # Site
    # Updates the configuration of the site with the specified identifier.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteUpdateResource] :site Resource for updating a site configuration.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_site_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_site ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_site"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'site'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Credential
    # Updates the specified site credential.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the site credential.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteCredential] :site_credential The specification of the site credential to update.
    # @return [Links]
    def update_site_credential(id, credential_id, opts = {})
      data, _status_code, _headers = update_site_credential_with_http_info(id, credential_id, opts)
      data
    end

    # Site Scan Credential
    # Updates the specified site credential.
    # @param id The identifier of the site.
    # @param credential_id The identifier of the site credential.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteCredential] :site_credential The specification of the site credential to update.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_site_credential_with_http_info(id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_site_credential ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_site_credential"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling SiteApi.update_site_credential"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/site_credentials/{credentialId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'site_credential'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_site_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Organization Information
    # Updates the site organization information.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteOrganization] :site_organization Resource for updating the specified site&#39;s organization information.
    # @return [Links]
    def update_site_organization(id, opts = {})
      data, _status_code, _headers = update_site_organization_with_http_info(id, opts)
      data
    end

    # Site Organization Information
    # Updates the site organization information.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [SiteOrganization] :site_organization Resource for updating the specified site&#39;s organization information.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_site_organization_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_site_organization ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_site_organization"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/organization'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'site_organization'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_site_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scan Schedule
    # Updates the specified scan schedule.
    # @param id The identifier of the site.
    # @param schedule_id The identifier of the scan schedule.
    # @param [Hash] opts the optional parameters
    # @option opts [ScanSchedule] :scan_schedule Resource for updating the specified scan schedule.
    # @return [Links]
    def update_site_scan_schedule(id, schedule_id, opts = {})
      data, _status_code, _headers = update_site_scan_schedule_with_http_info(id, schedule_id, opts)
      data
    end

    # Site Scan Schedule
    # Updates the specified scan schedule.
    # @param id The identifier of the site.
    # @param schedule_id The identifier of the scan schedule.
    # @param [Hash] opts the optional parameters
    # @option opts [ScanSchedule] :scan_schedule Resource for updating the specified scan schedule.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_site_scan_schedule_with_http_info(id, schedule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_site_scan_schedule ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_site_scan_schedule"
      end
      # verify the required parameter 'schedule_id' is set
      if @api_client.config.client_side_validation && schedule_id.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_id' when calling SiteApi.update_site_scan_schedule"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scan_schedules/{scheduleId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'scheduleId' + '}', schedule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan_schedule'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_site_scan_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SMTP Alert
    # Updates the specified SMTP alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @option opts [SmtpAlert] :alert Resource for updating the specified SMTP alert.
    # @return [Links]
    def update_site_smtp_alert(id, alert_id, opts = {})
      data, _status_code, _headers = update_site_smtp_alert_with_http_info(id, alert_id, opts)
      data
    end

    # Site SMTP Alert
    # Updates the specified SMTP alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @option opts [SmtpAlert] :alert Resource for updating the specified SMTP alert.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_site_smtp_alert_with_http_info(id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_site_smtp_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_site_smtp_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling SiteApi.update_site_smtp_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/smtp/{alertId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'alert'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_site_smtp_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site SNMP Alert
    # Updates the specified SNMP alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @option opts [SnmpAlert] :alert Resource for updating the specified SNMP alert.
    # @return [Links]
    def update_site_snmp_alert(id, alert_id, opts = {})
      data, _status_code, _headers = update_site_snmp_alert_with_http_info(id, alert_id, opts)
      data
    end

    # Site SNMP Alert
    # Updates the specified SNMP alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @option opts [SnmpAlert] :alert Resource for updating the specified SNMP alert.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_site_snmp_alert_with_http_info(id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_site_snmp_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_site_snmp_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling SiteApi.update_site_snmp_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/snmp/{alertId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'alert'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_site_snmp_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Syslog Alert
    # Updates the specified Syslog alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @option opts [SyslogAlert] :alert Resource for updating the specified Syslog alert.
    # @return [Links]
    def update_site_syslog_alert(id, alert_id, opts = {})
      data, _status_code, _headers = update_site_syslog_alert_with_http_info(id, alert_id, opts)
      data
    end

    # Site Syslog Alert
    # Updates the specified Syslog alert.
    # @param id The identifier of the site.
    # @param alert_id The identifier of the alert.
    # @param [Hash] opts the optional parameters
    # @option opts [SyslogAlert] :alert Resource for updating the specified Syslog alert.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_site_syslog_alert_with_http_info(id, alert_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SiteApi.update_site_syslog_alert ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SiteApi.update_site_syslog_alert"
      end
      # verify the required parameter 'alert_id' is set
      if @api_client.config.client_side_validation && alert_id.nil?
        fail ArgumentError, "Missing the required parameter 'alert_id' when calling SiteApi.update_site_syslog_alert"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/alerts/syslog/{alertId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'alert'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SiteApi#update_site_syslog_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
