=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class ScanApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Scan
    # Returns the specified scan.
    # @param id The identifier of the scan.
    # @param [Hash] opts the optional parameters
    # @return [Scan]
    def get_scan(id, opts = {})
      data, _status_code, _headers = get_scan_with_http_info(id, opts)
      data
    end

    # Scan
    # Returns the specified scan.
    # @param id The identifier of the scan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Scan, Fixnum, Hash)>] Scan data, response status code and response headers
    def get_scan_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanApi.get_scan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanApi.get_scan"
      end
      # resource path
      local_var_path = '/api/3/scans/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Scan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanApi#get_scan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scans
    # Returns all scans.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active Return running scans or past scans (true/false value). (default to false)
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfGlobalScan]
    def get_scans(opts = {})
      data, _status_code, _headers = get_scans_with_http_info(opts)
      data
    end

    # Scans
    # Returns all scans.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active Return running scans or past scans (true/false value).
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfGlobalScan, Fixnum, Hash)>] PageOfGlobalScan data, response status code and response headers
    def get_scans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanApi.get_scans ...'
      end
      # resource path
      local_var_path = '/api/3/scans'

      # query parameters
      query_params = {}
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfGlobalScan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanApi#get_scans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scans
    # Returns the scans for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active Return running scans or past scans (true/false value). (default to false)
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfScan]
    def get_site_scans(id, opts = {})
      data, _status_code, _headers = get_site_scans_with_http_info(id, opts)
      data
    end

    # Site Scans
    # Returns the scans for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :active Return running scans or past scans (true/false value).
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfScan, Fixnum, Hash)>] PageOfScan data, response status code and response headers
    def get_site_scans_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanApi.get_site_scans ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanApi.get_site_scans"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scans'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfScan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanApi#get_site_scans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Status
    # Updates the scan status. Can pause, resume, and stop scans using this resource. In order to stop a scan the scan must be running or paused. In order to resume a scan the scan must be paused. In order to pause a scan the scan must be running.
    # @param id The identifier of the scan.
    # @param status The status of the scan.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def set_scan_status(id, status, opts = {})
      data, _status_code, _headers = set_scan_status_with_http_info(id, status, opts)
      data
    end

    # Scan Status
    # Updates the scan status. Can pause, resume, and stop scans using this resource. In order to stop a scan the scan must be running or paused. In order to resume a scan the scan must be paused. In order to pause a scan the scan must be running.
    # @param id The identifier of the scan.
    # @param status The status of the scan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_scan_status_with_http_info(id, status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanApi.set_scan_status ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanApi.set_scan_status"
      end
      # verify the required parameter 'status' is set
      if @api_client.config.client_side_validation && status.nil?
        fail ArgumentError, "Missing the required parameter 'status' when calling ScanApi.set_scan_status"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['pause', 'stop', 'resume'].include?(status)
        fail ArgumentError, "invalid value for 'status', must be one of pause, stop, resume"
      end
      # resource path
      local_var_path = '/api/3/scans/{id}/{status}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'status' + '}', status.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanApi#set_scan_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Scans
    # Starts a scan for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override_blackout ${override.blackout} (default to false)
    # @option opts [AdhocScan] :scan The details for the scan.
    # @return [CreatedReferenceScanIDLink]
    def start_scan(id, opts = {})
      data, _status_code, _headers = start_scan_with_http_info(id, opts)
      data
    end

    # Site Scans
    # Starts a scan for the specified site.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :override_blackout ${override.blackout}
    # @option opts [AdhocScan] :scan The details for the scan.
    # @return [Array<(CreatedReferenceScanIDLink, Fixnum, Hash)>] CreatedReferenceScanIDLink data, response status code and response headers
    def start_scan_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanApi.start_scan ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanApi.start_scan"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/scans'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'overrideBlackout'] = opts[:'override_blackout'] if !opts[:'override_blackout'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatedReferenceScanIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanApi#start_scan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
