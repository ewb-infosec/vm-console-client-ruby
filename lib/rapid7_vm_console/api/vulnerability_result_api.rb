=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class VulnerabilityResultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Asset Vulnerability Validations
    # Creates a vulnerability validation for a vulnerability on an asset. The validation signifies that the vulnerability has been confirmed exploitable by an external tool, such as <a target=\"_blank\" href=\"https://www.metasploit.com\">Metasploit</a>.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [VulnerabilityValidationResource] :validation A vulnerability validation for a vulnerability on an asset. The  validation signifies that the vulnerability has been confirmed exploitable by an external tool, such as &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.metasploit.com\&quot;&gt;Metasploit&lt;/a&gt;.
    # @return [CreatedReferenceVulnerabilityValidationIDLink]
    def create_vulnerability_validation(id, vulnerability_id, opts = {})
      data, _status_code, _headers = create_vulnerability_validation_with_http_info(id, vulnerability_id, opts)
      data
    end

    # Asset Vulnerability Validations
    # Creates a vulnerability validation for a vulnerability on an asset. The validation signifies that the vulnerability has been confirmed exploitable by an external tool, such as &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.metasploit.com\&quot;&gt;Metasploit&lt;/a&gt;.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [VulnerabilityValidationResource] :validation A vulnerability validation for a vulnerability on an asset. The  validation signifies that the vulnerability has been confirmed exploitable by an external tool, such as &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://www.metasploit.com\&quot;&gt;Metasploit&lt;/a&gt;.
    # @return [Array<(CreatedReferenceVulnerabilityValidationIDLink, Fixnum, Hash)>] CreatedReferenceVulnerabilityValidationIDLink data, response status code and response headers
    def create_vulnerability_validation_with_http_info(id, vulnerability_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityResultApi.create_vulnerability_validation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityResultApi.create_vulnerability_validation"
      end
      # verify the required parameter 'vulnerability_id' is set
      if @api_client.config.client_side_validation && vulnerability_id.nil?
        fail ArgumentError, "Missing the required parameter 'vulnerability_id' when calling VulnerabilityResultApi.create_vulnerability_validation"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'vulnerabilityId' + '}', vulnerability_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'validation'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatedReferenceVulnerabilityValidationIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityResultApi#create_vulnerability_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Vulnerability Validation
    # Removes a vulnerability validation for a vulnerability from an asset.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param validation_id The identifier of the vulnerability validation.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_vulnerability_validation(id, vulnerability_id, validation_id, opts = {})
      data, _status_code, _headers = delete_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, opts)
      data
    end

    # Asset Vulnerability Validation
    # Removes a vulnerability validation for a vulnerability from an asset.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param validation_id The identifier of the vulnerability validation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityResultApi.delete_vulnerability_validation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityResultApi.delete_vulnerability_validation"
      end
      # verify the required parameter 'vulnerability_id' is set
      if @api_client.config.client_side_validation && vulnerability_id.nil?
        fail ArgumentError, "Missing the required parameter 'vulnerability_id' when calling VulnerabilityResultApi.delete_vulnerability_validation"
      end
      # verify the required parameter 'validation_id' is set
      if @api_client.config.client_side_validation && validation_id.nil?
        fail ArgumentError, "Missing the required parameter 'validation_id' when calling VulnerabilityResultApi.delete_vulnerability_validation"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations/{validationId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'vulnerabilityId' + '}', vulnerability_id.to_s).sub('{' + 'validationId' + '}', validation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityResultApi#delete_vulnerability_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Service Vulnerabilities
    # Retrieves the vulnerabilities present on a service running on an asset. A finding may be `invulnerable` if all instances on the service have exceptions applied.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfVulnerabilityFinding]
    def get_asset_service_vulnerabilities(id, protocol, port, opts = {})
      data, _status_code, _headers = get_asset_service_vulnerabilities_with_http_info(id, protocol, port, opts)
      data
    end

    # Asset Service Vulnerabilities
    # Retrieves the vulnerabilities present on a service running on an asset. A finding may be &#x60;invulnerable&#x60; if all instances on the service have exceptions applied.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfVulnerabilityFinding, Fixnum, Hash)>] PageOfVulnerabilityFinding data, response status code and response headers
    def get_asset_service_vulnerabilities_with_http_info(id, protocol, port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityResultApi.get_asset_service_vulnerabilities ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityResultApi.get_asset_service_vulnerabilities"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling VulnerabilityResultApi.get_asset_service_vulnerabilities"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ip', 'icmp', 'igmp', 'ggp', 'tcp', 'pup', 'udp', 'idp', 'esp', 'nd', 'raw'].include?(protocol)
        fail ArgumentError, "invalid value for 'protocol', must be one of ip, icmp, igmp, ggp, tcp, pup, udp, idp, esp, nd, raw"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling VulnerabilityResultApi.get_asset_service_vulnerabilities"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/services/{protocol}/{port}/vulnerabilities'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'protocol' + '}', protocol.to_s).sub('{' + 'port' + '}', port.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfVulnerabilityFinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityResultApi#get_asset_service_vulnerabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Vulnerabilities
    # Retrieves all vulnerability findings on an asset. A finding may be `invulnerable` if all instances have exceptions applied.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfVulnerabilityFinding]
    def get_asset_vulnerabilities(id, opts = {})
      data, _status_code, _headers = get_asset_vulnerabilities_with_http_info(id, opts)
      data
    end

    # Asset Vulnerabilities
    # Retrieves all vulnerability findings on an asset. A finding may be &#x60;invulnerable&#x60; if all instances have exceptions applied.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfVulnerabilityFinding, Fixnum, Hash)>] PageOfVulnerabilityFinding data, response status code and response headers
    def get_asset_vulnerabilities_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityResultApi.get_asset_vulnerabilities ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityResultApi.get_asset_vulnerabilities"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/vulnerabilities'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfVulnerabilityFinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityResultApi#get_asset_vulnerabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Vulnerability
    # Retrieves the details for a vulnerability finding on an asset.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [VulnerabilityFinding]
    def get_asset_vulnerability(id, vulnerability_id, opts = {})
      data, _status_code, _headers = get_asset_vulnerability_with_http_info(id, vulnerability_id, opts)
      data
    end

    # Asset Vulnerability
    # Retrieves the details for a vulnerability finding on an asset.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VulnerabilityFinding, Fixnum, Hash)>] VulnerabilityFinding data, response status code and response headers
    def get_asset_vulnerability_with_http_info(id, vulnerability_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityResultApi.get_asset_vulnerability ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityResultApi.get_asset_vulnerability"
      end
      # verify the required parameter 'vulnerability_id' is set
      if @api_client.config.client_side_validation && vulnerability_id.nil?
        fail ArgumentError, "Missing the required parameter 'vulnerability_id' when calling VulnerabilityResultApi.get_asset_vulnerability"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'vulnerabilityId' + '}', vulnerability_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VulnerabilityFinding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityResultApi#get_asset_vulnerability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Vulnerability Validation
    # Returns a vulnerability validation for a vulnerability on an asset. The asset must be currently vulnerable to the validated vulnerable for the validation to be returned.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param validation_id The identifier of the vulnerability validation.
    # @param [Hash] opts the optional parameters
    # @return [VulnerabilityValidationResource]
    def get_vulnerability_validation(id, vulnerability_id, validation_id, opts = {})
      data, _status_code, _headers = get_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, opts)
      data
    end

    # Asset Vulnerability Validation
    # Returns a vulnerability validation for a vulnerability on an asset. The asset must be currently vulnerable to the validated vulnerable for the validation to be returned.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param validation_id The identifier of the vulnerability validation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VulnerabilityValidationResource, Fixnum, Hash)>] VulnerabilityValidationResource data, response status code and response headers
    def get_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityResultApi.get_vulnerability_validation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityResultApi.get_vulnerability_validation"
      end
      # verify the required parameter 'vulnerability_id' is set
      if @api_client.config.client_side_validation && vulnerability_id.nil?
        fail ArgumentError, "Missing the required parameter 'vulnerability_id' when calling VulnerabilityResultApi.get_vulnerability_validation"
      end
      # verify the required parameter 'validation_id' is set
      if @api_client.config.client_side_validation && validation_id.nil?
        fail ArgumentError, "Missing the required parameter 'validation_id' when calling VulnerabilityResultApi.get_vulnerability_validation"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations/{validationId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'vulnerabilityId' + '}', vulnerability_id.to_s).sub('{' + 'validationId' + '}', validation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VulnerabilityValidationResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityResultApi#get_vulnerability_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Vulnerability Validations
    # Returns all vulnerability validations for a vulnerability on an asset. The asset must be currently vulnerable to the validated vulnerable for the validation to be returned.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesVulnerabilityValidationResource]
    def get_vulnerability_validations(id, vulnerability_id, opts = {})
      data, _status_code, _headers = get_vulnerability_validations_with_http_info(id, vulnerability_id, opts)
      data
    end

    # Asset Vulnerability Validations
    # Returns all vulnerability validations for a vulnerability on an asset. The asset must be currently vulnerable to the validated vulnerable for the validation to be returned.
    # @param id The identifier of the asset.
    # @param vulnerability_id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesVulnerabilityValidationResource, Fixnum, Hash)>] ResourcesVulnerabilityValidationResource data, response status code and response headers
    def get_vulnerability_validations_with_http_info(id, vulnerability_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityResultApi.get_vulnerability_validations ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityResultApi.get_vulnerability_validations"
      end
      # verify the required parameter 'vulnerability_id' is set
      if @api_client.config.client_side_validation && vulnerability_id.nil?
        fail ArgumentError, "Missing the required parameter 'vulnerability_id' when calling VulnerabilityResultApi.get_vulnerability_validations"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'vulnerabilityId' + '}', vulnerability_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesVulnerabilityValidationResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityResultApi#get_vulnerability_validations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
