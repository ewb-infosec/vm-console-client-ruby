=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class ReportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Reports
    # Configures a new report for generation. Report types are controlled through either or both a format and template. Non-templatized (`export`) report formats do not require a template and have their output format preset. Templatized (`document` and `file`) report formats support a report template that governs the content of the output and the output format can be chosen from a list of supported formats.
    # @param [Hash] opts the optional parameters
    # @option opts [Report] :report The specification of a report configuration.
    # @return [CreatedReferenceintLink]
    def create_report(opts = {})
      data, _status_code, _headers = create_report_with_http_info(opts)
      data
    end

    # Reports
    # Configures a new report for generation. Report types are controlled through either or both a format and template. Non-templatized (&#x60;export&#x60;) report formats do not require a template and have their output format preset. Templatized (&#x60;document&#x60; and &#x60;file&#x60;) report formats support a report template that governs the content of the output and the output format can be chosen from a list of supported formats.
    # @param [Hash] opts the optional parameters
    # @option opts [Report] :report The specification of a report configuration.
    # @return [Array<(CreatedReferenceintLink, Fixnum, Hash)>] CreatedReferenceintLink data, response status code and response headers
    def create_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.create_report ...'
      end
      # resource path
      local_var_path = '/api/3/reports'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'report'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatedReferenceintLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#create_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report
    # Deletes the configuration of a report.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_report(id, opts = {})
      data, _status_code, _headers = delete_report_with_http_info(id, opts)
      data
    end

    # Report
    # Deletes the configuration of a report.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_report_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.delete_report ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportApi.delete_report"
      end
      # resource path
      local_var_path = '/api/3/reports/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#delete_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report History
    # Returns the details for a generation of the report.
    # @param id The identifier of the report.
    # @param instance The identifier of the report instance.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_report_instance(id, instance, opts = {})
      data, _status_code, _headers = delete_report_instance_with_http_info(id, instance, opts)
      data
    end

    # Report History
    # Returns the details for a generation of the report.
    # @param id The identifier of the report.
    # @param instance The identifier of the report instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_report_instance_with_http_info(id, instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.delete_report_instance ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportApi.delete_report_instance"
      end
      # verify the required parameter 'instance' is set
      if @api_client.config.client_side_validation && instance.nil?
        fail ArgumentError, "Missing the required parameter 'instance' when calling ReportApi.delete_report_instance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['latest', 'integer <<int32>>'].include?(instance)
        fail ArgumentError, "invalid value for 'instance', must be one of latest, integer <<int32>>"
      end
      # resource path
      local_var_path = '/api/3/reports/{id}/history/{instance}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'instance' + '}', instance.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#delete_report_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report Download
    # Returns the contents of a generated report. The report content is usually returned in a GZip compressed format.
    # @param id The identifier of the report.
    # @param instance The identifier of the report instance.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def download_report(id, instance, opts = {})
      data, _status_code, _headers = download_report_with_http_info(id, instance, opts)
      data
    end

    # Report Download
    # Returns the contents of a generated report. The report content is usually returned in a GZip compressed format.
    # @param id The identifier of the report.
    # @param instance The identifier of the report instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def download_report_with_http_info(id, instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.download_report ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportApi.download_report"
      end
      # verify the required parameter 'instance' is set
      if @api_client.config.client_side_validation && instance.nil?
        fail ArgumentError, "Missing the required parameter 'instance' when calling ReportApi.download_report"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['latest', 'integer <<int32>>'].include?(instance)
        fail ArgumentError, "invalid value for 'instance', must be one of latest, integer <<int32>>"
      end
      # resource path
      local_var_path = '/api/3/reports/{id}/history/{instance}/output'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'instance' + '}', instance.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#download_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report Generation
    # Generates a configured report and returns the instance identifier of the report.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @return [ReferenceWithReportIDLink]
    def generate_report(id, opts = {})
      data, _status_code, _headers = generate_report_with_http_info(id, opts)
      data
    end

    # Report Generation
    # Generates a configured report and returns the instance identifier of the report.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferenceWithReportIDLink, Fixnum, Hash)>] ReferenceWithReportIDLink data, response status code and response headers
    def generate_report_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.generate_report ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportApi.generate_report"
      end
      # resource path
      local_var_path = '/api/3/reports/{id}/generate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferenceWithReportIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#generate_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report
    # Returns the configuration details of a report.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @return [Report]
    def get_report(id, opts = {})
      data, _status_code, _headers = get_report_with_http_info(id, opts)
      data
    end

    # Report
    # Returns the configuration details of a report.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Report, Fixnum, Hash)>] Report data, response status code and response headers
    def get_report_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_report ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportApi.get_report"
      end
      # resource path
      local_var_path = '/api/3/reports/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Report')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report Formats
    # Returns all available report formats. A report format indicates an output file format specification (e.g. PDF, XML, etc). Some printable formats may be templated, and others may not. The supported templates for each formated are provided.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesAvailableReportFormat]
    def get_report_formats(opts = {})
      data, _status_code, _headers = get_report_formats_with_http_info(opts)
      data
    end

    # Report Formats
    # Returns all available report formats. A report format indicates an output file format specification (e.g. PDF, XML, etc). Some printable formats may be templated, and others may not. The supported templates for each formated are provided.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesAvailableReportFormat, Fixnum, Hash)>] ResourcesAvailableReportFormat data, response status code and response headers
    def get_report_formats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_report_formats ...'
      end
      # resource path
      local_var_path = '/api/3/report_formats'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesAvailableReportFormat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_report_formats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report History
    # Returns the details for a generation of the report.
    # @param id The identifier of the report.
    # @param instance The identifier of the report instance.
    # @param [Hash] opts the optional parameters
    # @return [ReportInstance]
    def get_report_instance(id, instance, opts = {})
      data, _status_code, _headers = get_report_instance_with_http_info(id, instance, opts)
      data
    end

    # Report History
    # Returns the details for a generation of the report.
    # @param id The identifier of the report.
    # @param instance The identifier of the report instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportInstance, Fixnum, Hash)>] ReportInstance data, response status code and response headers
    def get_report_instance_with_http_info(id, instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_report_instance ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportApi.get_report_instance"
      end
      # verify the required parameter 'instance' is set
      if @api_client.config.client_side_validation && instance.nil?
        fail ArgumentError, "Missing the required parameter 'instance' when calling ReportApi.get_report_instance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['latest', 'integer <<int32>>'].include?(instance)
        fail ArgumentError, "invalid value for 'instance', must be one of latest, integer <<int32>>"
      end
      # resource path
      local_var_path = '/api/3/reports/{id}/history/{instance}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'instance' + '}', instance.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_report_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report Histories
    # Returns all historical details for generation of the report over time.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesReportInstance]
    def get_report_instances(id, opts = {})
      data, _status_code, _headers = get_report_instances_with_http_info(id, opts)
      data
    end

    # Report Histories
    # Returns all historical details for generation of the report over time.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesReportInstance, Fixnum, Hash)>] ResourcesReportInstance data, response status code and response headers
    def get_report_instances_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_report_instances ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportApi.get_report_instances"
      end
      # resource path
      local_var_path = '/api/3/reports/{id}/history'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesReportInstance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_report_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report Template
    # Returns the details of a report template. Report templates govern the contents generated within a report. 
    # @param id The identifier of the report template;
    # @param [Hash] opts the optional parameters
    # @return [ReportTemplate]
    def get_report_template(id, opts = {})
      data, _status_code, _headers = get_report_template_with_http_info(id, opts)
      data
    end

    # Report Template
    # Returns the details of a report template. Report templates govern the contents generated within a report. 
    # @param id The identifier of the report template;
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportTemplate, Fixnum, Hash)>] ReportTemplate data, response status code and response headers
    def get_report_template_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_report_template ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportApi.get_report_template"
      end
      # resource path
      local_var_path = '/api/3/report_templates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_report_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report Templates
    # Returns all available report templates.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesReportTemplate]
    def get_report_templates(opts = {})
      data, _status_code, _headers = get_report_templates_with_http_info(opts)
      data
    end

    # Report Templates
    # Returns all available report templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesReportTemplate, Fixnum, Hash)>] ResourcesReportTemplate data, response status code and response headers
    def get_report_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_report_templates ...'
      end
      # resource path
      local_var_path = '/api/3/report_templates'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesReportTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_report_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reports
    # Returns all defined report configurations.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfReport]
    def get_reports(opts = {})
      data, _status_code, _headers = get_reports_with_http_info(opts)
      data
    end

    # Reports
    # Returns all defined report configurations.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfReport, Fixnum, Hash)>] PageOfReport data, response status code and response headers
    def get_reports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_reports ...'
      end
      # resource path
      local_var_path = '/api/3/reports'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfReport')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report
    # Updates the configuration details of a report.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @option opts [Report] :report The specification of a report configuration.
    # @return [Links]
    def update_report(id, opts = {})
      data, _status_code, _headers = update_report_with_http_info(id, opts)
      data
    end

    # Report
    # Updates the configuration details of a report.
    # @param id The identifier of the report.
    # @param [Hash] opts the optional parameters
    # @option opts [Report] :report The specification of a report configuration.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_report_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.update_report ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReportApi.update_report"
      end
      # resource path
      local_var_path = '/api/3/reports/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'report'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#update_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
