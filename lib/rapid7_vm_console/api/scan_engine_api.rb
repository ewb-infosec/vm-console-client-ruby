=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class ScanEngineApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Engine Pool Engines
    # Add an engine to the engine pool.
    # @param id The identifier of the engine pool.
    # @param engine_id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def add_scan_engine_pool_scan_engine(id, engine_id, opts = {})
      data, _status_code, _headers = add_scan_engine_pool_scan_engine_with_http_info(id, engine_id, opts)
      data
    end

    # Engine Pool Engines
    # Add an engine to the engine pool.
    # @param id The identifier of the engine pool.
    # @param engine_id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def add_scan_engine_pool_scan_engine_with_http_info(id, engine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.add_scan_engine_pool_scan_engine ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.add_scan_engine_pool_scan_engine"
      end
      # verify the required parameter 'engine_id' is set
      if @api_client.config.client_side_validation && engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'engine_id' when calling ScanEngineApi.add_scan_engine_pool_scan_engine"
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools/{id}/engines/{engineId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'engineId' + '}', engine_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#add_scan_engine_pool_scan_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engines
    # Creates a new scan engine.
    # @param [Hash] opts the optional parameters
    # @option opts [ScanEngine] :scan_engine The specification of a scan engine.
    # @return [ReferenceWithEngineIDLink]
    def create_scan_engine(opts = {})
      data, _status_code, _headers = create_scan_engine_with_http_info(opts)
      data
    end

    # Scan Engines
    # Creates a new scan engine.
    # @param [Hash] opts the optional parameters
    # @option opts [ScanEngine] :scan_engine The specification of a scan engine.
    # @return [Array<(ReferenceWithEngineIDLink, Fixnum, Hash)>] ReferenceWithEngineIDLink data, response status code and response headers
    def create_scan_engine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.create_scan_engine ...'
      end
      # resource path
      local_var_path = '/api/3/scan_engines'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan_engine'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferenceWithEngineIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#create_scan_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Engine Pools
    # Creates a new engine pool.
    # @param [Hash] opts the optional parameters
    # @option opts [EnginePool] :engine_pool The details for the scan engine to update.
    # @return [CreatedReferenceEngineIDLink]
    def create_scan_engine_pool(opts = {})
      data, _status_code, _headers = create_scan_engine_pool_with_http_info(opts)
      data
    end

    # Engine Pools
    # Creates a new engine pool.
    # @param [Hash] opts the optional parameters
    # @option opts [EnginePool] :engine_pool The details for the scan engine to update.
    # @return [Array<(CreatedReferenceEngineIDLink, Fixnum, Hash)>] CreatedReferenceEngineIDLink data, response status code and response headers
    def create_scan_engine_pool_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.create_scan_engine_pool ...'
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'engine_pool'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatedReferenceEngineIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#create_scan_engine_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engine Shared Secret
    # Returns the current valid shared secret or generates a new shared secret. The endpoint returns an existing shared secret if one was previously generated and it has not yet expired. Conversely, the endpoint will generate and return a new shared secret for either of the following conditions: a shared secret was not previously generated or the previously-generated shared secret has expired. The shared secret is valid for 60 minutes from the moment it is generated.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def create_shared_secret(opts = {})
      data, _status_code, _headers = create_shared_secret_with_http_info(opts)
      data
    end

    # Scan Engine Shared Secret
    # Returns the current valid shared secret or generates a new shared secret. The endpoint returns an existing shared secret if one was previously generated and it has not yet expired. Conversely, the endpoint will generate and return a new shared secret for either of the following conditions: a shared secret was not previously generated or the previously-generated shared secret has expired. The shared secret is valid for 60 minutes from the moment it is generated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_shared_secret_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.create_shared_secret ...'
      end
      # resource path
      local_var_path = '/api/3/scan_engines/shared_secret'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#create_shared_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engine
    # Deletes the specified scan engine.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_scan_engine(id, opts = {})
      data, _status_code, _headers = delete_scan_engine_with_http_info(id, opts)
      data
    end

    # Scan Engine
    # Deletes the specified scan engine.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_scan_engine_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.delete_scan_engine ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.delete_scan_engine"
      end
      # resource path
      local_var_path = '/api/3/scan_engines/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#delete_scan_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engine Shared Secret
    # Revokes the current valid shared secret, if one exists.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_shared_secret(opts = {})
      data, _status_code, _headers = delete_shared_secret_with_http_info(opts)
      data
    end

    # Scan Engine Shared Secret
    # Revokes the current valid shared secret, if one exists.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_shared_secret_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.delete_shared_secret ...'
      end
      # resource path
      local_var_path = '/api/3/scan_engines/shared_secret'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#delete_shared_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assigned Engine Pools
    # Retrieves the list of engine pools the scan engine is currently assigned to.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesEnginePool]
    def get_assigned_engine_pools(id, opts = {})
      data, _status_code, _headers = get_assigned_engine_pools_with_http_info(id, opts)
      data
    end

    # Assigned Engine Pools
    # Retrieves the list of engine pools the scan engine is currently assigned to.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesEnginePool, Fixnum, Hash)>] ResourcesEnginePool data, response status code and response headers
    def get_assigned_engine_pools_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_assigned_engine_pools ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.get_assigned_engine_pools"
      end
      # resource path
      local_var_path = '/api/3/scan_engines/{id}/scan_engine_pools'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesEnginePool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_assigned_engine_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engine Shared Secret
    # Returns the current valid shared secret, if one has been previously generated and it has not yet expired; otherwise the endpoint will respond with a 404 status code. Use this endpoint to detect whether a previously-generated shared secret is still valid.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_current_shared_secret(opts = {})
      data, _status_code, _headers = get_current_shared_secret_with_http_info(opts)
      data
    end

    # Scan Engine Shared Secret
    # Returns the current valid shared secret, if one has been previously generated and it has not yet expired; otherwise the endpoint will respond with a 404 status code. Use this endpoint to detect whether a previously-generated shared secret is still valid.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_current_shared_secret_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_current_shared_secret ...'
      end
      # resource path
      local_var_path = '/api/3/scan_engines/shared_secret'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_current_shared_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engine Shared Secret Time to live
    # Returns the number of seconds remaining for the current shared secret before it expires, if one has been previously generated and it has not yet expired; otherwise the endpoint will respond with a 404 status code.
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def get_current_shared_secret_time_to_live(opts = {})
      data, _status_code, _headers = get_current_shared_secret_time_to_live_with_http_info(opts)
      data
    end

    # Scan Engine Shared Secret Time to live
    # Returns the number of seconds remaining for the current shared secret before it expires, if one has been previously generated and it has not yet expired; otherwise the endpoint will respond with a 404 status code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def get_current_shared_secret_time_to_live_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_current_shared_secret_time_to_live ...'
      end
      # resource path
      local_var_path = '/api/3/scan_engines/shared_secret/time_to_live'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_current_shared_secret_time_to_live\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Engine Pool
    # Retrieves the details for an engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @return [EnginePool]
    def get_engine_pool(id, opts = {})
      data, _status_code, _headers = get_engine_pool_with_http_info(id, opts)
      data
    end

    # Engine Pool
    # Retrieves the details for an engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnginePool, Fixnum, Hash)>] EnginePool data, response status code and response headers
    def get_engine_pool_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_engine_pool ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.get_engine_pool"
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnginePool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_engine_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engine
    # Retrieves the details for a scan engine.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [ScanEngine]
    def get_scan_engine(id, opts = {})
      data, _status_code, _headers = get_scan_engine_with_http_info(id, opts)
      data
    end

    # Scan Engine
    # Retrieves the details for a scan engine.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScanEngine, Fixnum, Hash)>] ScanEngine data, response status code and response headers
    def get_scan_engine_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_scan_engine ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.get_scan_engine"
      end
      # resource path
      local_var_path = '/api/3/scan_engines/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScanEngine')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_scan_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Engine Pool Engines
    # Get the engines in the engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithEngineIDLink]
    def get_scan_engine_pool_scan_engines(id, opts = {})
      data, _status_code, _headers = get_scan_engine_pool_scan_engines_with_http_info(id, opts)
      data
    end

    # Engine Pool Engines
    # Get the engines in the engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithEngineIDLink, Fixnum, Hash)>] ReferencesWithEngineIDLink data, response status code and response headers
    def get_scan_engine_pool_scan_engines_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_scan_engine_pool_scan_engines ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.get_scan_engine_pool_scan_engines"
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools/{id}/engines'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithEngineIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_scan_engine_pool_scan_engines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Engine Pool Sites
    # Returns links to the sites associated with this engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithSiteIDLink]
    def get_scan_engine_pool_sites(id, opts = {})
      data, _status_code, _headers = get_scan_engine_pool_sites_with_http_info(id, opts)
      data
    end

    # Engine Pool Sites
    # Returns links to the sites associated with this engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithSiteIDLink, Fixnum, Hash)>] ReferencesWithSiteIDLink data, response status code and response headers
    def get_scan_engine_pool_sites_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_scan_engine_pool_sites ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.get_scan_engine_pool_sites"
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools/{id}/sites'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithSiteIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_scan_engine_pool_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Engine Pools
    # Returns engine pools available to use for scanning.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesEnginePool]
    def get_scan_engine_pools(opts = {})
      data, _status_code, _headers = get_scan_engine_pools_with_http_info(opts)
      data
    end

    # Engine Pools
    # Returns engine pools available to use for scanning.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesEnginePool, Fixnum, Hash)>] ResourcesEnginePool data, response status code and response headers
    def get_scan_engine_pools_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_scan_engine_pools ...'
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesEnginePool')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_scan_engine_pools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engine Scans
    # Returns the scans that have been run on a scan engine.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfScan]
    def get_scan_engine_scans(id, opts = {})
      data, _status_code, _headers = get_scan_engine_scans_with_http_info(id, opts)
      data
    end

    # Scan Engine Scans
    # Returns the scans that have been run on a scan engine.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfScan, Fixnum, Hash)>] PageOfScan data, response status code and response headers
    def get_scan_engine_scans_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_scan_engine_scans ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.get_scan_engine_scans"
      end
      # resource path
      local_var_path = '/api/3/scan_engines/{id}/scans'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfScan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_scan_engine_scans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engine Sites
    # Retrieves the list of sites the specified scan engine is assigned to.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfSite]
    def get_scan_engine_sites(id, opts = {})
      data, _status_code, _headers = get_scan_engine_sites_with_http_info(id, opts)
      data
    end

    # Scan Engine Sites
    # Retrieves the list of sites the specified scan engine is assigned to.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfSite, Fixnum, Hash)>] PageOfSite data, response status code and response headers
    def get_scan_engine_sites_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_scan_engine_sites ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.get_scan_engine_sites"
      end
      # resource path
      local_var_path = '/api/3/scan_engines/{id}/sites'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfSite')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_scan_engine_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engines
    # Returns scan engines available to use for scanning.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesScanEngine]
    def get_scan_engines(opts = {})
      data, _status_code, _headers = get_scan_engines_with_http_info(opts)
      data
    end

    # Scan Engines
    # Returns scan engines available to use for scanning.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesScanEngine, Fixnum, Hash)>] ResourcesScanEngine data, response status code and response headers
    def get_scan_engines_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.get_scan_engines ...'
      end
      # resource path
      local_var_path = '/api/3/scan_engines'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesScanEngine')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#get_scan_engines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Engine Pool
    # Deletes the specified engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_scan_engine_pool(id, opts = {})
      data, _status_code, _headers = remove_scan_engine_pool_with_http_info(id, opts)
      data
    end

    # Engine Pool
    # Deletes the specified engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_scan_engine_pool_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.remove_scan_engine_pool ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.remove_scan_engine_pool"
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#remove_scan_engine_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Engine Pool Engines
    # Remove the specified engine from the engine pool.
    # @param id The identifier of the engine pool.
    # @param engine_id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_scan_engine_pool_scan_engine(id, engine_id, opts = {})
      data, _status_code, _headers = remove_scan_engine_pool_scan_engine_with_http_info(id, engine_id, opts)
      data
    end

    # Engine Pool Engines
    # Remove the specified engine from the engine pool.
    # @param id The identifier of the engine pool.
    # @param engine_id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_scan_engine_pool_scan_engine_with_http_info(id, engine_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.remove_scan_engine_pool_scan_engine ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.remove_scan_engine_pool_scan_engine"
      end
      # verify the required parameter 'engine_id' is set
      if @api_client.config.client_side_validation && engine_id.nil?
        fail ArgumentError, "Missing the required parameter 'engine_id' when calling ScanEngineApi.remove_scan_engine_pool_scan_engine"
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools/{id}/engines/{engineId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'engineId' + '}', engine_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#remove_scan_engine_pool_scan_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Engine Pool Engines
    # Set the engines in the engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :engines The identifiers of the scan engines to place into the engine pool.
    # @return [Links]
    def set_scan_engine_pool_scan_engines(id, opts = {})
      data, _status_code, _headers = set_scan_engine_pool_scan_engines_with_http_info(id, opts)
      data
    end

    # Engine Pool Engines
    # Set the engines in the engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :engines The identifiers of the scan engines to place into the engine pool.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_scan_engine_pool_scan_engines_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.set_scan_engine_pool_scan_engines ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.set_scan_engine_pool_scan_engines"
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools/{id}/engines'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'engines'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#set_scan_engine_pool_scan_engines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scan Engine
    # Updates the specified scan engine.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @option opts [ScanEngine] :scan_engine The specification of the scan engine to update.
    # @return [Links]
    def update_scan_engine(id, opts = {})
      data, _status_code, _headers = update_scan_engine_with_http_info(id, opts)
      data
    end

    # Scan Engine
    # Updates the specified scan engine.
    # @param id The identifier of the scan engine.
    # @param [Hash] opts the optional parameters
    # @option opts [ScanEngine] :scan_engine The specification of the scan engine to update.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_scan_engine_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.update_scan_engine ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.update_scan_engine"
      end
      # resource path
      local_var_path = '/api/3/scan_engines/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'scan_engine'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#update_scan_engine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Engine Pool
    # Updates the specified engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @option opts [EnginePool] :engine_pool The details for the scan engine to update.
    # @return [Links]
    def update_scan_engine_pool(id, opts = {})
      data, _status_code, _headers = update_scan_engine_pool_with_http_info(id, opts)
      data
    end

    # Engine Pool
    # Updates the specified engine pool.
    # @param id The identifier of the engine pool.
    # @param [Hash] opts the optional parameters
    # @option opts [EnginePool] :engine_pool The details for the scan engine to update.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_scan_engine_pool_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScanEngineApi.update_scan_engine_pool ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScanEngineApi.update_scan_engine_pool"
      end
      # resource path
      local_var_path = '/api/3/scan_engine_pools/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'engine_pool'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScanEngineApi#update_scan_engine_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
