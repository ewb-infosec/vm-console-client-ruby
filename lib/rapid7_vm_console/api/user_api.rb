=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Asset Group Access
    # Grants the user access to the asset group. Individual asset group access cannot be granted to users with the `allAssetGroups` permission. <span class=\"authorization\">Global Administrator</span>
    # @param id The identifier of the user.
    # @param asset_group_id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def add_user_asset_group(id, asset_group_id, opts = {})
      data, _status_code, _headers = add_user_asset_group_with_http_info(id, asset_group_id, opts)
      data
    end

    # Asset Group Access
    # Grants the user access to the asset group. Individual asset group access cannot be granted to users with the &#x60;allAssetGroups&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param id The identifier of the user.
    # @param asset_group_id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def add_user_asset_group_with_http_info(id, asset_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.add_user_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.add_user_asset_group"
      end
      # verify the required parameter 'asset_group_id' is set
      if @api_client.config.client_side_validation && asset_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_group_id' when calling UserApi.add_user_asset_group"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/asset_groups/{assetGroupId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetGroupId' + '}', asset_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#add_user_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Access
    # Grants the user access to the site. Individual site access cannot be granted to users with the `allSites` permission. <span class=\"authorization\">Global Administrator</span>
    # @param id The identifier of the user.
    # @param site_id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def add_user_site(id, site_id, opts = {})
      data, _status_code, _headers = add_user_site_with_http_info(id, site_id, opts)
      data
    end

    # Site Access
    # Grants the user access to the site. Individual site access cannot be granted to users with the &#x60;allSites&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param id The identifier of the user.
    # @param site_id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def add_user_site_with_http_info(id, site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.add_user_site ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.add_user_site"
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling UserApi.add_user_site"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/sites/{siteId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'siteId' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#add_user_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Users
    # Creates a new user. <span class=\"authorization\">Global Administrator</span>
    # @param [Hash] opts the optional parameters
    # @option opts [UserEdit] :user The details of the user.
    # @return [CreatedReferenceUserIDLink]
    def create_user(opts = {})
      data, _status_code, _headers = create_user_with_http_info(opts)
      data
    end

    # Users
    # Creates a new user. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [UserEdit] :user The details of the user.
    # @return [Array<(CreatedReferenceUserIDLink, Fixnum, Hash)>] CreatedReferenceUserIDLink data, response status code and response headers
    def create_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.create_user ...'
      end
      # resource path
      local_var_path = '/api/3/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'user'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatedReferenceUserIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Role
    # Removes a role with the specified identifier. The role must not be built-in and cannot be currently assigned to any users.
    # @param id The identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_role(id, opts = {})
      data, _status_code, _headers = delete_role_with_http_info(id, opts)
      data
    end

    # Role
    # Removes a role with the specified identifier. The role must not be built-in and cannot be currently assigned to any users.
    # @param id The identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_role_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.delete_role ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.delete_role"
      end
      # resource path
      local_var_path = '/api/3/roles/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # User
    # Deletes a user account.<span class=\"authorization\">Global Administrator</span>
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_user(id, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(id, opts)
      data
    end

    # User
    # Deletes a user account.&lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.delete_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.delete_user"
      end
      # resource path
      local_var_path = '/api/3/users/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Authentication Source
    # Returns the details for an authentication source.
    # @param id The identifier of the authentication source.
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationSource]
    def get_authentication_source(id, opts = {})
      data, _status_code, _headers = get_authentication_source_with_http_info(id, opts)
      data
    end

    # Authentication Source
    # Returns the details for an authentication source.
    # @param id The identifier of the authentication source.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationSource, Fixnum, Hash)>] AuthenticationSource data, response status code and response headers
    def get_authentication_source_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_authentication_source ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_authentication_source"
      end
      # resource path
      local_var_path = '/api/3/authentication_sources/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthenticationSource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_authentication_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Authentication Source Users
    # Returns hypermedia links for the user accounts that use the authentication source to authenticate.
    # @param id The identifier of the authentication source.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithUserIDLink]
    def get_authentication_source_users(id, opts = {})
      data, _status_code, _headers = get_authentication_source_users_with_http_info(id, opts)
      data
    end

    # Authentication Source Users
    # Returns hypermedia links for the user accounts that use the authentication source to authenticate.
    # @param id The identifier of the authentication source.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithUserIDLink, Fixnum, Hash)>] ReferencesWithUserIDLink data, response status code and response headers
    def get_authentication_source_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_authentication_source_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_authentication_source_users"
      end
      # resource path
      local_var_path = '/api/3/authentication_sources/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithUserIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_authentication_source_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Authentication Sources
    # Returns all available sources of authentication for users.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesAuthenticationSource]
    def get_authentication_sources(opts = {})
      data, _status_code, _headers = get_authentication_sources_with_http_info(opts)
      data
    end

    # Authentication Sources
    # Returns all available sources of authentication for users.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesAuthenticationSource, Fixnum, Hash)>] ResourcesAuthenticationSource data, response status code and response headers
    def get_authentication_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_authentication_sources ...'
      end
      # resource path
      local_var_path = '/api/3/authentication_sources'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesAuthenticationSource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_authentication_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Privilege
    # Returns the details for a privilege.
    # @param id The identifier of the privilege.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def get_privilege(id, opts = {})
      data, _status_code, _headers = get_privilege_with_http_info(id, opts)
      data
    end

    # Privilege
    # Returns the details for a privilege.
    # @param id The identifier of the privilege.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def get_privilege_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_privilege ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_privilege"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['all-permissions', 'create-reports', 'configure-global-settings', 'manage-sites', 'manage-tags', 'manage-static-asset-groups', 'manage-dynamic-asset-groups', 'manage-scan-templates', 'manage-report-templates', 'manage-scan-engines', 'submit-vulnerability-exceptions', 'approve-vulnerability-exceptions', 'delete-vulnerability-exceptions', 'create-tickets', 'close-tickets', 'assign-ticket-assignee', 'manage-site-access', 'manage-asset-group-access', 'manage-report-access', 'use-restricted-report-sections', 'manage-policies', 'view-asset-group-asset-data', 'manage-asset-group-assets', 'view-site-asset-data', 'specify-site-metadata', 'purge-site-asset-data', 'specify-scan-targets', 'assign-scan-engine', 'assign-scan-template', 'manage-site-credentials', 'manage-scan-alerts', 'schedule-automatic-scans', 'start-unscheduled-scans'].include?(id)
        fail ArgumentError, "invalid value for 'id', must be one of all-permissions, create-reports, configure-global-settings, manage-sites, manage-tags, manage-static-asset-groups, manage-dynamic-asset-groups, manage-scan-templates, manage-report-templates, manage-scan-engines, submit-vulnerability-exceptions, approve-vulnerability-exceptions, delete-vulnerability-exceptions, create-tickets, close-tickets, assign-ticket-assignee, manage-site-access, manage-asset-group-access, manage-report-access, use-restricted-report-sections, manage-policies, view-asset-group-asset-data, manage-asset-group-assets, view-site-asset-data, specify-site-metadata, purge-site-asset-data, specify-scan-targets, assign-scan-engine, assign-scan-template, manage-site-credentials, manage-scan-alerts, schedule-automatic-scans, start-unscheduled-scans"
      end
      # resource path
      local_var_path = '/api/3/privileges/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_privilege\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Privileges
    # Returns all privileges that may be granted to a role.
    # @param [Hash] opts the optional parameters
    # @return [Privileges]
    def get_privileges(opts = {})
      data, _status_code, _headers = get_privileges_with_http_info(opts)
      data
    end

    # Privileges
    # Returns all privileges that may be granted to a role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Privileges, Fixnum, Hash)>] Privileges data, response status code and response headers
    def get_privileges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_privileges ...'
      end
      # resource path
      local_var_path = '/api/3/privileges'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Privileges')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_privileges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Role
    # Retrieves the details of a role.
    # @param id The identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Role]
    def get_role(id, opts = {})
      data, _status_code, _headers = get_role_with_http_info(id, opts)
      data
    end

    # Role
    # Retrieves the details of a role.
    # @param id The identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Role, Fixnum, Hash)>] Role data, response status code and response headers
    def get_role_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_role ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_role"
      end
      # resource path
      local_var_path = '/api/3/roles/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Role')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Users With Role
    # Returns hypermedia links for the the users currently assigned a role.
    # @param id The identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithUserIDLink]
    def get_role_users(id, opts = {})
      data, _status_code, _headers = get_role_users_with_http_info(id, opts)
      data
    end

    # Users With Role
    # Returns hypermedia links for the the users currently assigned a role.
    # @param id The identifier of the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithUserIDLink, Fixnum, Hash)>] ReferencesWithUserIDLink data, response status code and response headers
    def get_role_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_role_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_role_users"
      end
      # resource path
      local_var_path = '/api/3/roles/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithUserIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_role_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Roles
    # Returns all roles for which users may be assigned.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesRole]
    def get_roles(opts = {})
      data, _status_code, _headers = get_roles_with_http_info(opts)
      data
    end

    # Roles
    # Returns all roles for which users may be assigned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesRole, Fixnum, Hash)>] ResourcesRole data, response status code and response headers
    def get_roles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_roles ...'
      end
      # resource path
      local_var_path = '/api/3/roles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesRole')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Two-Factor Authentication
    # Retrieves the current authentication token seed (key) for the user, if configured.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [TokenResource]
    def get_two_factor_authentication_key(id, opts = {})
      data, _status_code, _headers = get_two_factor_authentication_key_with_http_info(id, opts)
      data
    end

    # Two-Factor Authentication
    # Retrieves the current authentication token seed (key) for the user, if configured.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenResource, Fixnum, Hash)>] TokenResource data, response status code and response headers
    def get_two_factor_authentication_key_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_two_factor_authentication_key ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_two_factor_authentication_key"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/2FA'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_two_factor_authentication_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # User
    # Returns the details for a user.<span class=\"authorization\">Global Administrator, Current User</span>
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_user(id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(id, opts)
      data
    end

    # User
    # Returns the details for a user.&lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator, Current User&lt;/span&gt;
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_user"
      end
      # resource path
      local_var_path = '/api/3/users/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Groups Access
    # Returns the asset groups to which the user has access.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithAssetGroupIDLink]
    def get_user_asset_groups(id, opts = {})
      data, _status_code, _headers = get_user_asset_groups_with_http_info(id, opts)
      data
    end

    # Asset Groups Access
    # Returns the asset groups to which the user has access.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithAssetGroupIDLink, Fixnum, Hash)>] ReferencesWithAssetGroupIDLink data, response status code and response headers
    def get_user_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_user_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_user_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithAssetGroupIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_user_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # User Privileges
    # Returns the privileges granted to the user by their role. <span class=\"authorization\">Global Administrator</span>
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Privileges]
    def get_user_privileges(id, opts = {})
      data, _status_code, _headers = get_user_privileges_with_http_info(id, opts)
      data
    end

    # User Privileges
    # Returns the privileges granted to the user by their role. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Privileges, Fixnum, Hash)>] Privileges data, response status code and response headers
    def get_user_privileges_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_user_privileges ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_user_privileges"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/privileges'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Privileges')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_user_privileges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sites Access
    # Returns the sites to which the user has access.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithSiteIDLink]
    def get_user_sites(id, opts = {})
      data, _status_code, _headers = get_user_sites_with_http_info(id, opts)
      data
    end

    # Sites Access
    # Returns the sites to which the user has access.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithSiteIDLink, Fixnum, Hash)>] ReferencesWithSiteIDLink data, response status code and response headers
    def get_user_sites_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_user_sites ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_user_sites"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/sites'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithSiteIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_user_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Users
    # Returns all defined users. <span class=\"authorization\">Global Administrator</span>
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfUser]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # Users
    # Returns all defined users. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfUser, Fixnum, Hash)>] PageOfUser data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_users ...'
      end
      # resource path
      local_var_path = '/api/3/users'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Users With Privilege
    # Returns hypermedia links for all users granted the specified privilege by their role.
    # @param id The identifier of the privilege.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithUserIDLink]
    def get_users_with_privilege(id, opts = {})
      data, _status_code, _headers = get_users_with_privilege_with_http_info(id, opts)
      data
    end

    # Users With Privilege
    # Returns hypermedia links for all users granted the specified privilege by their role.
    # @param id The identifier of the privilege.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithUserIDLink, Fixnum, Hash)>] ReferencesWithUserIDLink data, response status code and response headers
    def get_users_with_privilege_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.get_users_with_privilege ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.get_users_with_privilege"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['all-permissions', 'create-reports', 'configure-global-settings', 'manage-sites', 'manage-tags', 'manage-static-asset-groups', 'manage-dynamic-asset-groups', 'manage-scan-templates', 'manage-report-templates', 'manage-scan-engines', 'submit-vulnerability-exceptions', 'approve-vulnerability-exceptions', 'delete-vulnerability-exceptions', 'create-tickets', 'close-tickets', 'assign-ticket-assignee', 'manage-site-access', 'manage-asset-group-access', 'manage-report-access', 'use-restricted-report-sections', 'manage-policies', 'view-asset-group-asset-data', 'manage-asset-group-assets', 'view-site-asset-data', 'specify-site-metadata', 'purge-site-asset-data', 'specify-scan-targets', 'assign-scan-engine', 'assign-scan-template', 'manage-site-credentials', 'manage-scan-alerts', 'schedule-automatic-scans', 'start-unscheduled-scans'].include?(id)
        fail ArgumentError, "invalid value for 'id', must be one of all-permissions, create-reports, configure-global-settings, manage-sites, manage-tags, manage-static-asset-groups, manage-dynamic-asset-groups, manage-scan-templates, manage-report-templates, manage-scan-engines, submit-vulnerability-exceptions, approve-vulnerability-exceptions, delete-vulnerability-exceptions, create-tickets, close-tickets, assign-ticket-assignee, manage-site-access, manage-asset-group-access, manage-report-access, use-restricted-report-sections, manage-policies, view-asset-group-asset-data, manage-asset-group-assets, view-site-asset-data, specify-site-metadata, purge-site-asset-data, specify-scan-targets, assign-scan-engine, assign-scan-template, manage-site-credentials, manage-scan-alerts, schedule-automatic-scans, start-unscheduled-scans"
      end
      # resource path
      local_var_path = '/api/3/privileges/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithUserIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_users_with_privilege\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Two-Factor Authentication
    # Regenerates a new authentication token seed (key) and updates it for the user. This key may be then be used in the appropriate 2FA authenticator.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [TokenResource]
    def regenerate_two_factor_authentication(id, opts = {})
      data, _status_code, _headers = regenerate_two_factor_authentication_with_http_info(id, opts)
      data
    end

    # Two-Factor Authentication
    # Regenerates a new authentication token seed (key) and updates it for the user. This key may be then be used in the appropriate 2FA authenticator.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenResource, Fixnum, Hash)>] TokenResource data, response status code and response headers
    def regenerate_two_factor_authentication_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.regenerate_two_factor_authentication ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.regenerate_two_factor_authentication"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/2FA'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenResource')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#regenerate_two_factor_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Groups Access
    # Revokes access to all asset groups from the user.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_all_user_asset_groups(id, opts = {})
      data, _status_code, _headers = remove_all_user_asset_groups_with_http_info(id, opts)
      data
    end

    # Asset Groups Access
    # Revokes access to all asset groups from the user.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_all_user_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.remove_all_user_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.remove_all_user_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#remove_all_user_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sites Access
    # Revokes access to all sites from the user.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_all_user_sites(id, opts = {})
      data, _status_code, _headers = remove_all_user_sites_with_http_info(id, opts)
      data
    end

    # Sites Access
    # Revokes access to all sites from the user.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_all_user_sites_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.remove_all_user_sites ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.remove_all_user_sites"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/sites'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#remove_all_user_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Access
    # Grants the user access to the asset group. Individual asset group access cannot be granted to users with the `allAssetGroups` permission. <span class=\"authorization\">Global Administrator</span>
    # @param id The identifier of the user.
    # @param asset_group_id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_user_asset_group(id, asset_group_id, opts = {})
      data, _status_code, _headers = remove_user_asset_group_with_http_info(id, asset_group_id, opts)
      data
    end

    # Asset Group Access
    # Grants the user access to the asset group. Individual asset group access cannot be granted to users with the &#x60;allAssetGroups&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param id The identifier of the user.
    # @param asset_group_id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_user_asset_group_with_http_info(id, asset_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.remove_user_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.remove_user_asset_group"
      end
      # verify the required parameter 'asset_group_id' is set
      if @api_client.config.client_side_validation && asset_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_group_id' when calling UserApi.remove_user_asset_group"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/asset_groups/{assetGroupId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetGroupId' + '}', asset_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#remove_user_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Site Access
    # Grants the user access to the site. Individual site access cannot be granted to users with the `allSites` permission. <span class=\"authorization\">Global Administrator</span>
    # @param id The identifier of the user.
    # @param site_id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_user_site(id, site_id, opts = {})
      data, _status_code, _headers = remove_user_site_with_http_info(id, site_id, opts)
      data
    end

    # Site Access
    # Grants the user access to the site. Individual site access cannot be granted to users with the &#x60;allSites&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param id The identifier of the user.
    # @param site_id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_user_site_with_http_info(id, site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.remove_user_site ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.remove_user_site"
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling UserApi.remove_user_site"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/sites/{siteId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'siteId' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#remove_user_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Password Reset
    # Changes the password for the user. Users may only change their own password.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password The new password to set.
    # @return [Links]
    def reset_password(id, opts = {})
      data, _status_code, _headers = reset_password_with_http_info(id, opts)
      data
    end

    # Password Reset
    # Changes the password for the user. Users may only change their own password.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password The new password to set.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def reset_password_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.reset_password ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.reset_password"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/password'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'password'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#reset_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Two-Factor Authentication
    # Sets the authentication token seed (key) for the user. This key may be then be used in the appropriate 2FA authenticator.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token seed (key) to use for the user.
    # @return [Links]
    def set_two_factor_authentication(id, opts = {})
      data, _status_code, _headers = set_two_factor_authentication_with_http_info(id, opts)
      data
    end

    # Two-Factor Authentication
    # Sets the authentication token seed (key) for the user. This key may be then be used in the appropriate 2FA authenticator.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The authentication token seed (key) to use for the user.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_two_factor_authentication_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.set_two_factor_authentication ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.set_two_factor_authentication"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/2FA'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'token'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#set_two_factor_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Groups Access
    # Updates the asset groups to which the user has access. Individual asset group access cannot be granted to users with the `allAssetGroups` permission. <span class=\"authorization\">Global Administrator</span>
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :asset_group_ids The identifiers of the asset groups to grant the user access to. Ignored if user has access to &#x60;allAssetGroups&#x60;.
    # @return [Links]
    def set_user_asset_groups(id, opts = {})
      data, _status_code, _headers = set_user_asset_groups_with_http_info(id, opts)
      data
    end

    # Asset Groups Access
    # Updates the asset groups to which the user has access. Individual asset group access cannot be granted to users with the &#x60;allAssetGroups&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :asset_group_ids The identifiers of the asset groups to grant the user access to. Ignored if user has access to &#x60;allAssetGroups&#x60;.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_user_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.set_user_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.set_user_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'asset_group_ids'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#set_user_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sites Access
    # Updates the sites to which the user has access. Individual site access cannot be granted to users with the `allSites` permission. <span class=\"authorization\">Global Administrator</span>
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :site_ids The identifiers of the sites to grant the user access to. Ignored if the user has access to &#x60;allSites&#x60;.
    # @return [Links]
    def set_user_sites(id, opts = {})
      data, _status_code, _headers = set_user_sites_with_http_info(id, opts)
      data
    end

    # Sites Access
    # Updates the sites to which the user has access. Individual site access cannot be granted to users with the &#x60;allSites&#x60; permission. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :site_ids The identifiers of the sites to grant the user access to. Ignored if the user has access to &#x60;allSites&#x60;.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_user_sites_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.set_user_sites ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.set_user_sites"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/sites'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'site_ids'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#set_user_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unlock Account
    # Unlocks a locked user account that has too many failed authentication attempts. Disabled accounts may not be unlocked.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def unlock_user(id, opts = {})
      data, _status_code, _headers = unlock_user_with_http_info(id, opts)
      data
    end

    # Unlock Account
    # Unlocks a locked user account that has too many failed authentication attempts. Disabled accounts may not be unlocked.
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def unlock_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.unlock_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.unlock_user"
      end
      # resource path
      local_var_path = '/api/3/users/{id}/lock'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#unlock_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Role
    # Updates the details of a role.
    # @param id The identifier of the role.
    # @param [Hash] opts the optional parameters
    # @option opts [Role] :role The details of the role.
    # @return [Links]
    def update_role(id, opts = {})
      data, _status_code, _headers = update_role_with_http_info(id, opts)
      data
    end

    # Role
    # Updates the details of a role.
    # @param id The identifier of the role.
    # @param [Hash] opts the optional parameters
    # @option opts [Role] :role The details of the role.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_role_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.update_role ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.update_role"
      end
      # resource path
      local_var_path = '/api/3/roles/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'role'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#update_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # User
    # Updates the details of a user. <span class=\"authorization\">Global Administrator</span>
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [UserEdit] :user The details of the user.
    # @return [Links]
    def update_user(id, opts = {})
      data, _status_code, _headers = update_user_with_http_info(id, opts)
      data
    end

    # User
    # Updates the details of a user. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [UserEdit] :user The details of the user.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_user_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.update_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserApi.update_user"
      end
      # resource path
      local_var_path = '/api/3/users/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'user'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
