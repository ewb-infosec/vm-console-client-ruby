=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class TagApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Tags
    # Creates a new tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Tag] :tag The details of the tag.
    # @return [ReferenceWithTagIDLink]
    def create_tag(opts = {})
      data, _status_code, _headers = create_tag_with_http_info(opts)
      data
    end

    # Tags
    # Creates a new tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Tag] :tag The details of the tag.
    # @return [Array<(ReferenceWithTagIDLink, Fixnum, Hash)>] ReferenceWithTagIDLink data, response status code and response headers
    def create_tag_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.create_tag ...'
      end
      # resource path
      local_var_path = '/api/3/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'tag'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferenceWithTagIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#create_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag
    # Deletes the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_tag(id, opts = {})
      data, _status_code, _headers = delete_tag_with_http_info(id, opts)
      data
    end

    # Tag
    # Deletes the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_tag_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.delete_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.delete_tag"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#delete_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag
    # Returns a tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Tag]
    def get_tag(id, opts = {})
      data, _status_code, _headers = get_tag_with_http_info(id, opts)
      data
    end

    # Tag
    # Returns a tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tag, Fixnum, Hash)>] Tag data, response status code and response headers
    def get_tag_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.get_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.get_tag"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Tag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#get_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Asset Groups
    # Returns the asset groups associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithAssetGroupIDLink]
    def get_tag_asset_groups(id, opts = {})
      data, _status_code, _headers = get_tag_asset_groups_with_http_info(id, opts)
      data
    end

    # Tag Asset Groups
    # Returns the asset groups associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithAssetGroupIDLink, Fixnum, Hash)>] ReferencesWithAssetGroupIDLink data, response status code and response headers
    def get_tag_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.get_tag_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.get_tag_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithAssetGroupIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#get_tag_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Search Criteria
    # Returns the search criteria associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [SearchCriteria]
    def get_tag_search_criteria(id, opts = {})
      data, _status_code, _headers = get_tag_search_criteria_with_http_info(id, opts)
      data
    end

    # Tag Search Criteria
    # Returns the search criteria associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchCriteria, Fixnum, Hash)>] SearchCriteria data, response status code and response headers
    def get_tag_search_criteria_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.get_tag_search_criteria ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.get_tag_search_criteria"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/search_criteria'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchCriteria')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#get_tag_search_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Assets
    # Returns the assets tagged with a tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [TaggedAssetReferences]
    def get_tagged_assets(id, opts = {})
      data, _status_code, _headers = get_tagged_assets_with_http_info(id, opts)
      data
    end

    # Tag Assets
    # Returns the assets tagged with a tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaggedAssetReferences, Fixnum, Hash)>] TaggedAssetReferences data, response status code and response headers
    def get_tagged_assets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.get_tagged_assets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.get_tagged_assets"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/assets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaggedAssetReferences')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#get_tagged_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Sites
    # Returns the sites associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithSiteIDLink]
    def get_tagged_sites(id, opts = {})
      data, _status_code, _headers = get_tagged_sites_with_http_info(id, opts)
      data
    end

    # Tag Sites
    # Returns the sites associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithSiteIDLink, Fixnum, Hash)>] ReferencesWithSiteIDLink data, response status code and response headers
    def get_tagged_sites_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.get_tagged_sites ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.get_tagged_sites"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/sites'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithSiteIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#get_tagged_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tags
    # Returns all tags.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @option opts [String] :type type
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfTag]
    def get_tags(opts = {})
      data, _status_code, _headers = get_tags_with_http_info(opts)
      data
    end

    # Tags
    # Returns all tags.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @option opts [String] :type type
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfTag, Fixnum, Hash)>] PageOfTag data, response status code and response headers
    def get_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.get_tags ...'
      end
      # resource path
      local_var_path = '/api/3/tags'

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfTag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#get_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Search Criteria
    # Removes the search criteria associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_tag_search_criteria(id, opts = {})
      data, _status_code, _headers = remove_tag_search_criteria_with_http_info(id, opts)
      data
    end

    # Tag Search Criteria
    # Removes the search criteria associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_tag_search_criteria_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.remove_tag_search_criteria ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.remove_tag_search_criteria"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/search_criteria'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#remove_tag_search_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Sites
    # Removes the associations between the tag and the sites.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_tagged_sites(id, opts = {})
      data, _status_code, _headers = remove_tagged_sites_with_http_info(id, opts)
      data
    end

    # Tag Sites
    # Removes the associations between the tag and the sites.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_tagged_sites_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.remove_tagged_sites ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.remove_tagged_sites"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/sites'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#remove_tagged_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Asset Groups
    # Sets the asset groups associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :asset_group_ids The asset groups to add to the tag.
    # @return [Links]
    def set_tagged_asset_groups(id, opts = {})
      data, _status_code, _headers = set_tagged_asset_groups_with_http_info(id, opts)
      data
    end

    # Tag Asset Groups
    # Sets the asset groups associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :asset_group_ids The asset groups to add to the tag.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_tagged_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.set_tagged_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.set_tagged_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'asset_group_ids'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#set_tagged_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Sites
    # Sets the sites associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :sites The sites to add to the tag.
    # @return [Links]
    def set_tagged_sites(id, opts = {})
      data, _status_code, _headers = set_tagged_sites_with_http_info(id, opts)
      data
    end

    # Tag Sites
    # Sets the sites associated with the tag.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :sites The sites to add to the tag.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_tagged_sites_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.set_tagged_sites ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.set_tagged_sites"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/sites'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'sites'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#set_tagged_sites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Asset
    # Adds an asset to the tag.
    # @param id The identifier of the tag.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def tag_asset(id, asset_id, opts = {})
      data, _status_code, _headers = tag_asset_with_http_info(id, asset_id, opts)
      data
    end

    # Tag Asset
    # Adds an asset to the tag.
    # @param id The identifier of the tag.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def tag_asset_with_http_info(id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.tag_asset ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.tag_asset"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling TagApi.tag_asset"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/assets/{assetId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#tag_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Asset Group
    # Adds an asset group to this tag.
    # @param id The identifier of the tag.
    # @param asset_group_id The asset group identifier.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def tag_asset_group(id, asset_group_id, opts = {})
      data, _status_code, _headers = tag_asset_group_with_http_info(id, asset_group_id, opts)
      data
    end

    # Tag Asset Group
    # Adds an asset group to this tag.
    # @param id The identifier of the tag.
    # @param asset_group_id The asset group identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def tag_asset_group_with_http_info(id, asset_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.tag_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.tag_asset_group"
      end
      # verify the required parameter 'asset_group_id' is set
      if @api_client.config.client_side_validation && asset_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_group_id' when calling TagApi.tag_asset_group"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/asset_groups/{assetGroupId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetGroupId' + '}', asset_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#tag_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Site
    # Adds a site to this tag.
    # @param id The identifier of the tag.
    # @param site_id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def tag_site(id, site_id, opts = {})
      data, _status_code, _headers = tag_site_with_http_info(id, site_id, opts)
      data
    end

    # Tag Site
    # Adds a site to this tag.
    # @param id The identifier of the tag.
    # @param site_id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def tag_site_with_http_info(id, site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.tag_site ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.tag_site"
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TagApi.tag_site"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/sites/{siteId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'siteId' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#tag_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Asset Groups
    # Removes the associations between the tag and all asset groups.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def untag_all_asset_groups(id, opts = {})
      data, _status_code, _headers = untag_all_asset_groups_with_http_info(id, opts)
      data
    end

    # Tag Asset Groups
    # Removes the associations between the tag and all asset groups.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def untag_all_asset_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.untag_all_asset_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.untag_all_asset_groups"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/asset_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#untag_all_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Asset
    # Removes an asset from the tag. Note: The asset must be added through the asset or tag, if the asset is added using a site, asset group, or search criteria this will not remove the asset.
    # @param id The identifier of the tag.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def untag_asset(id, asset_id, opts = {})
      data, _status_code, _headers = untag_asset_with_http_info(id, asset_id, opts)
      data
    end

    # Tag Asset
    # Removes an asset from the tag. Note: The asset must be added through the asset or tag, if the asset is added using a site, asset group, or search criteria this will not remove the asset.
    # @param id The identifier of the tag.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def untag_asset_with_http_info(id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.untag_asset ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.untag_asset"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling TagApi.untag_asset"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/assets/{assetId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#untag_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Asset Group
    # Removes an asset group from this tag.
    # @param id The identifier of the tag.
    # @param asset_group_id The asset group identifier.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def untag_asset_group(id, asset_group_id, opts = {})
      data, _status_code, _headers = untag_asset_group_with_http_info(id, asset_group_id, opts)
      data
    end

    # Tag Asset Group
    # Removes an asset group from this tag.
    # @param id The identifier of the tag.
    # @param asset_group_id The asset group identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def untag_asset_group_with_http_info(id, asset_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.untag_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.untag_asset_group"
      end
      # verify the required parameter 'asset_group_id' is set
      if @api_client.config.client_side_validation && asset_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_group_id' when calling TagApi.untag_asset_group"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/asset_groups/{assetGroupId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetGroupId' + '}', asset_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#untag_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Site
    # Removes a site from this tag.
    # @param id The identifier of the tag.
    # @param site_id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def untag_site(id, site_id, opts = {})
      data, _status_code, _headers = untag_site_with_http_info(id, site_id, opts)
      data
    end

    # Tag Site
    # Removes a site from this tag.
    # @param id The identifier of the tag.
    # @param site_id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def untag_site_with_http_info(id, site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.untag_site ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.untag_site"
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling TagApi.untag_site"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/sites/{siteId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'siteId' + '}', site_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#untag_site\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag
    # Updates the details of a tag. For more information about accepted fields for the tag search criteria see the PUT /search_criteria documentation.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Tag] :tag The details of the tag.
    # @return [Links]
    def update_tag(id, opts = {})
      data, _status_code, _headers = update_tag_with_http_info(id, opts)
      data
    end

    # Tag
    # Updates the details of a tag. For more information about accepted fields for the tag search criteria see the PUT /search_criteria documentation.
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @option opts [Tag] :tag The details of the tag.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_tag_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.update_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.update_tag"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'tag'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#update_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Tag Search Criteria
    # Updates the search criteria associated with the tag.   The following table outlines the search criteria fields and the available operators:  | Field | Operators |  | ---------- | ---------------- |  | asset name | is,is not,starts with,ends with,contains,does not contain,is empty,is not empty,is like,not like |  | asset risk score | is,is not,in range,greater than,less than |  | container image | is,is not,starts with,ends with,contains,does not contain,is like,not like |  | container status | is,is not |  | containers | are |  | CVE IDs | is,is not,contains,does not contain |  | CVSS Access Complexity | is,is not | | CVSS Authentication Required | is,is not | | CVSS Access Vector | is,is not | | CVSS Availability Impact | is,is not | | CVSS Confidentiality Impact | is,is not | | CVSS Integrity Impact | is,is not | | CVSS Access Complexity | is,is not | | host type | in,not in |  | asset IP Address | is,is not,in range,not in range,is like,not like |  | asset IP Address Type | in,not in |  | asset last scan date | is on or before,is on or after,is between,is earlier than,is within the last |  | mobile device last sync time | is within the last,is earlier than |  | open ports | is,is not,in range |  | asset operating system | contains,does not contain,is empty,is not empty |  | asset alternate address type | in |  | asset PCI compliance | is |  | asset service name | contains,does not contain |  | asset site ID | in,not in |  | asset software | contains,does not contain|  | asset Criticality tag | is,is not,is greater than,is less than,is applied,is not applied |  | asset Custom tag | is,is not,starts with, ends with,contains,does not contain,is applied,is not applied |  | asset Location tag | is,is not,starts with,ends with,contains,does not contain,is applied,is not applied |  | asset Owner tag | is,is not,starts with,ends with,contains,does not contain,is applied,is not applied |  | asset vulnerability validated status | are |  | asset VAsset cluster | is,is not,contains,does not contain,starts with |  | asset VAsset datacenter | is,is not |  | asset VAsset host name | is,is not,contains,does not contain,starts with |  | asset VAsset power state | in,not in |  | asset VAsset resource pool path | contains,does not contain |  | asset vulnerability assessed | is on or before,is on or after,is between,is earlier than,is within the last |  | asset vulnerability category | is,is not,starts with,ends with,contains,does not contain|  | asset vulnerability CVSS score | is,is not,in range,is greater than,is less than |  | asset vulnerability exposures | includes,does not include |  | asset vulnerability title | contains,does not contain,is,is not,starts with,ends with |   The following table outlines the operators and the values associated with them:  | Operator | Values |  | -------- | ------ |  | are | A single string property named \"value\" |  | is between | A number property named \"lower\" and a number property named \"upper\" |  | contains | A single string property named \"value\" |  | does not contain | A single string property named \"value\" |  | is earlier than | A single number property named \"value\" |  | ends with | A single string property named \"value\" |  | is greater than | A single number property named \"value\" |  | in | An array property named \"values\" |  | not in | An array property named \"values\" |  | in range | A number property named \"lower\" and a number property named \"upper\" |  | includes | An array property named \"values\" |  | is | A single string property named \"value\" |  | is not | A single string property named \"value\" |  | is applied | No value |  | is not applied | No value |  | is empty | No value |  | is not empty | No value |  | less than | A single number property named \"value\" |  | like | A single string property named \"value\" |  | not contains | A single string property named \"value\" |  | not in range | A number property named \"lower\" and a number property named \"upper\" |  | not like | A single string property named \"value\" |  | is on or after | A single string property named \"value\", which is the date in ISO8601 format (yyyy-MM-dd) |  | is on or before | A single string property named \"value\", which is the date in ISO8601 format (yyyy-MM-dd) |  | starts with | A single string property named \"value\" |  | is within the last | A single number property named \"value\" |   The following fields have enumerated values:  | Field | Acceptable Values |  | ----- | ----------------- |  | containers | 0=present, 1=not present |  | asset vulnerability validated status | 0=present, 1=not present |  | asset PCI compliance | 0=fail, 1=pass |  | asset alternate address type | 0=IPv4, 1=IPv6 |  | asset IP Address Type | 0=IPv4, 1=IPv6 |  | host type | 0=Unknown, 1=Guest, 2=Hypervisor, 3=Physical, 4=Mobile |  | CVSS Access Complexity | L=Low, M=Medium, H=High |  | CVSS Integrity Impact | N=None, P=Partial, C=Complete |  | CVSS Confidentiality Impact | N=None, P=Partial, C=Complete |  | CVSS Availability Impact | N=None, P=Partial, C=Complete |  | CVSS Access Vector | L=Local, A=Adjacent, N=Network |  | CVSS Authentication Required | N=None, S=Single, M=Multiple |  | CVSS Access Complexity | L=Low, M=Medium, H=High |  | container status | created, running, paused, restarting, exited, dead, unknown |  
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @option opts [SearchCriteria] :criterial The details of the search criteria.
    # @return [Links]
    def update_tag_search_criteria(id, opts = {})
      data, _status_code, _headers = update_tag_search_criteria_with_http_info(id, opts)
      data
    end

    # Tag Search Criteria
    # Updates the search criteria associated with the tag.   The following table outlines the search criteria fields and the available operators:  | Field | Operators |  | ---------- | ---------------- |  | asset name | is,is not,starts with,ends with,contains,does not contain,is empty,is not empty,is like,not like |  | asset risk score | is,is not,in range,greater than,less than |  | container image | is,is not,starts with,ends with,contains,does not contain,is like,not like |  | container status | is,is not |  | containers | are |  | CVE IDs | is,is not,contains,does not contain |  | CVSS Access Complexity | is,is not | | CVSS Authentication Required | is,is not | | CVSS Access Vector | is,is not | | CVSS Availability Impact | is,is not | | CVSS Confidentiality Impact | is,is not | | CVSS Integrity Impact | is,is not | | CVSS Access Complexity | is,is not | | host type | in,not in |  | asset IP Address | is,is not,in range,not in range,is like,not like |  | asset IP Address Type | in,not in |  | asset last scan date | is on or before,is on or after,is between,is earlier than,is within the last |  | mobile device last sync time | is within the last,is earlier than |  | open ports | is,is not,in range |  | asset operating system | contains,does not contain,is empty,is not empty |  | asset alternate address type | in |  | asset PCI compliance | is |  | asset service name | contains,does not contain |  | asset site ID | in,not in |  | asset software | contains,does not contain|  | asset Criticality tag | is,is not,is greater than,is less than,is applied,is not applied |  | asset Custom tag | is,is not,starts with, ends with,contains,does not contain,is applied,is not applied |  | asset Location tag | is,is not,starts with,ends with,contains,does not contain,is applied,is not applied |  | asset Owner tag | is,is not,starts with,ends with,contains,does not contain,is applied,is not applied |  | asset vulnerability validated status | are |  | asset VAsset cluster | is,is not,contains,does not contain,starts with |  | asset VAsset datacenter | is,is not |  | asset VAsset host name | is,is not,contains,does not contain,starts with |  | asset VAsset power state | in,not in |  | asset VAsset resource pool path | contains,does not contain |  | asset vulnerability assessed | is on or before,is on or after,is between,is earlier than,is within the last |  | asset vulnerability category | is,is not,starts with,ends with,contains,does not contain|  | asset vulnerability CVSS score | is,is not,in range,is greater than,is less than |  | asset vulnerability exposures | includes,does not include |  | asset vulnerability title | contains,does not contain,is,is not,starts with,ends with |   The following table outlines the operators and the values associated with them:  | Operator | Values |  | -------- | ------ |  | are | A single string property named \&quot;value\&quot; |  | is between | A number property named \&quot;lower\&quot; and a number property named \&quot;upper\&quot; |  | contains | A single string property named \&quot;value\&quot; |  | does not contain | A single string property named \&quot;value\&quot; |  | is earlier than | A single number property named \&quot;value\&quot; |  | ends with | A single string property named \&quot;value\&quot; |  | is greater than | A single number property named \&quot;value\&quot; |  | in | An array property named \&quot;values\&quot; |  | not in | An array property named \&quot;values\&quot; |  | in range | A number property named \&quot;lower\&quot; and a number property named \&quot;upper\&quot; |  | includes | An array property named \&quot;values\&quot; |  | is | A single string property named \&quot;value\&quot; |  | is not | A single string property named \&quot;value\&quot; |  | is applied | No value |  | is not applied | No value |  | is empty | No value |  | is not empty | No value |  | less than | A single number property named \&quot;value\&quot; |  | like | A single string property named \&quot;value\&quot; |  | not contains | A single string property named \&quot;value\&quot; |  | not in range | A number property named \&quot;lower\&quot; and a number property named \&quot;upper\&quot; |  | not like | A single string property named \&quot;value\&quot; |  | is on or after | A single string property named \&quot;value\&quot;, which is the date in ISO8601 format (yyyy-MM-dd) |  | is on or before | A single string property named \&quot;value\&quot;, which is the date in ISO8601 format (yyyy-MM-dd) |  | starts with | A single string property named \&quot;value\&quot; |  | is within the last | A single number property named \&quot;value\&quot; |   The following fields have enumerated values:  | Field | Acceptable Values |  | ----- | ----------------- |  | containers | 0&#x3D;present, 1&#x3D;not present |  | asset vulnerability validated status | 0&#x3D;present, 1&#x3D;not present |  | asset PCI compliance | 0&#x3D;fail, 1&#x3D;pass |  | asset alternate address type | 0&#x3D;IPv4, 1&#x3D;IPv6 |  | asset IP Address Type | 0&#x3D;IPv4, 1&#x3D;IPv6 |  | host type | 0&#x3D;Unknown, 1&#x3D;Guest, 2&#x3D;Hypervisor, 3&#x3D;Physical, 4&#x3D;Mobile |  | CVSS Access Complexity | L&#x3D;Low, M&#x3D;Medium, H&#x3D;High |  | CVSS Integrity Impact | N&#x3D;None, P&#x3D;Partial, C&#x3D;Complete |  | CVSS Confidentiality Impact | N&#x3D;None, P&#x3D;Partial, C&#x3D;Complete |  | CVSS Availability Impact | N&#x3D;None, P&#x3D;Partial, C&#x3D;Complete |  | CVSS Access Vector | L&#x3D;Local, A&#x3D;Adjacent, N&#x3D;Network |  | CVSS Authentication Required | N&#x3D;None, S&#x3D;Single, M&#x3D;Multiple |  | CVSS Access Complexity | L&#x3D;Low, M&#x3D;Medium, H&#x3D;High |  | container status | created, running, paused, restarting, exited, dead, unknown |  
    # @param id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @option opts [SearchCriteria] :criterial The details of the search criteria.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_tag_search_criteria_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TagApi.update_tag_search_criteria ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TagApi.update_tag_search_criteria"
      end
      # resource path
      local_var_path = '/api/3/tags/{id}/search_criteria'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'criterial'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagApi#update_tag_search_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
