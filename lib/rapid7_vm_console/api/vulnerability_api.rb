=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class VulnerabilityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Vulnerability Affected Assets
    # Get the assets affected by the vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithAssetIDLink]
    def get_affected_assets(id, opts = {})
      data, _status_code, _headers = get_affected_assets_with_http_info(id, opts)
      data
    end

    # Vulnerability Affected Assets
    # Get the assets affected by the vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithAssetIDLink, Fixnum, Hash)>] ReferencesWithAssetIDLink data, response status code and response headers
    def get_affected_assets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_affected_assets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_affected_assets"
      end
      # resource path
      local_var_path = '/api/3/vulnerabilities/{id}/assets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithAssetIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_affected_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Exploit
    # Returns the details for an exploit.
    # @param id The identifier of the exploit.
    # @param [Hash] opts the optional parameters
    # @return [Exploit]
    def get_exploit(id, opts = {})
      data, _status_code, _headers = get_exploit_with_http_info(id, opts)
      data
    end

    # Exploit
    # Returns the details for an exploit.
    # @param id The identifier of the exploit.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Exploit, Fixnum, Hash)>] Exploit data, response status code and response headers
    def get_exploit_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_exploit ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_exploit"
      end
      # resource path
      local_var_path = '/api/3/exploits/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Exploit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_exploit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Exploitable Vulnerabilities
    # Returns the vulnerabilities exploitable to a exploit.
    # @param id The identifier of the exploit.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithVulnerabilityNaturalIDLink]
    def get_exploit_vulnerabilities(id, opts = {})
      data, _status_code, _headers = get_exploit_vulnerabilities_with_http_info(id, opts)
      data
    end

    # Exploitable Vulnerabilities
    # Returns the vulnerabilities exploitable to a exploit.
    # @param id The identifier of the exploit.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithVulnerabilityNaturalIDLink, Fixnum, Hash)>] ReferencesWithVulnerabilityNaturalIDLink data, response status code and response headers
    def get_exploit_vulnerabilities_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_exploit_vulnerabilities ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_exploit_vulnerabilities"
      end
      # resource path
      local_var_path = '/api/3/exploits/{id}/vulnerabilities'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithVulnerabilityNaturalIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_exploit_vulnerabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Exploits
    # Returns all known exploits.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfExploit]
    def get_exploits(opts = {})
      data, _status_code, _headers = get_exploits_with_http_info(opts)
      data
    end

    # Exploits
    # Returns all known exploits.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfExploit, Fixnum, Hash)>] PageOfExploit data, response status code and response headers
    def get_exploits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_exploits ...'
      end
      # resource path
      local_var_path = '/api/3/exploits'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfExploit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_exploits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Malware Kit
    # Returns the details for a malware kit.
    # @param id The identifier of the malware kit.
    # @param [Hash] opts the optional parameters
    # @return [MalwareKit]
    def get_malware_kit(id, opts = {})
      data, _status_code, _headers = get_malware_kit_with_http_info(id, opts)
      data
    end

    # Malware Kit
    # Returns the details for a malware kit.
    # @param id The identifier of the malware kit.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MalwareKit, Fixnum, Hash)>] MalwareKit data, response status code and response headers
    def get_malware_kit_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_malware_kit ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_malware_kit"
      end
      # resource path
      local_var_path = '/api/3/malware_kits/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MalwareKit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_malware_kit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Malware Kit Vulnerabilities
    # Returns the vulnerabilities that are susceptible to being attacked by a malware kit.
    # @param id The identifier of the malware kit.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithVulnerabilityNaturalIDLink]
    def get_malware_kit_vulnerabilities(id, opts = {})
      data, _status_code, _headers = get_malware_kit_vulnerabilities_with_http_info(id, opts)
      data
    end

    # Malware Kit Vulnerabilities
    # Returns the vulnerabilities that are susceptible to being attacked by a malware kit.
    # @param id The identifier of the malware kit.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithVulnerabilityNaturalIDLink, Fixnum, Hash)>] ReferencesWithVulnerabilityNaturalIDLink data, response status code and response headers
    def get_malware_kit_vulnerabilities_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_malware_kit_vulnerabilities ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_malware_kit_vulnerabilities"
      end
      # resource path
      local_var_path = '/api/3/malware_kits/{id}/vulnerabilities'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithVulnerabilityNaturalIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_malware_kit_vulnerabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Malware Kits
    # Returns all known malware kits.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfMalwareKit]
    def get_malware_kits(opts = {})
      data, _status_code, _headers = get_malware_kits_with_http_info(opts)
      data
    end

    # Malware Kits
    # Returns all known malware kits.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfMalwareKit, Fixnum, Hash)>] PageOfMalwareKit data, response status code and response headers
    def get_malware_kits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_malware_kits ...'
      end
      # resource path
      local_var_path = '/api/3/malware_kits'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfMalwareKit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_malware_kits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Solution Prerequisites
    # Returns the solutions that must be executed in order for a solution to resolve a vulnerability.
    # @param id The identifier of the solution.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithSolutionNaturalIDLink]
    def get_prerequisite_solutions(id, opts = {})
      data, _status_code, _headers = get_prerequisite_solutions_with_http_info(id, opts)
      data
    end

    # Solution Prerequisites
    # Returns the solutions that must be executed in order for a solution to resolve a vulnerability.
    # @param id The identifier of the solution.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithSolutionNaturalIDLink, Fixnum, Hash)>] ReferencesWithSolutionNaturalIDLink data, response status code and response headers
    def get_prerequisite_solutions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_prerequisite_solutions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_prerequisite_solutions"
      end
      # resource path
      local_var_path = '/api/3/solutions/{id}/prerequisites'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithSolutionNaturalIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_prerequisite_solutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Solution
    # Returns the details for a solution that can remediate one or more vulnerabilities.
    # @param id The identifier of the solution.
    # @param [Hash] opts the optional parameters
    # @return [Solution]
    def get_solution(id, opts = {})
      data, _status_code, _headers = get_solution_with_http_info(id, opts)
      data
    end

    # Solution
    # Returns the details for a solution that can remediate one or more vulnerabilities.
    # @param id The identifier of the solution.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Solution, Fixnum, Hash)>] Solution data, response status code and response headers
    def get_solution_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_solution ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_solution"
      end
      # resource path
      local_var_path = '/api/3/solutions/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Solution')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_solution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Solutions
    # Returns the details for all solutions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [ResourcesSolution]
    def get_solutions(opts = {})
      data, _status_code, _headers = get_solutions_with_http_info(opts)
      data
    end

    # Solutions
    # Returns the details for all solutions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(ResourcesSolution, Fixnum, Hash)>] ResourcesSolution data, response status code and response headers
    def get_solutions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_solutions ...'
      end
      # resource path
      local_var_path = '/api/3/solutions'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSolution')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_solutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Superseded Solutions
    # Returns the solutions that are superseded by this solution.
    # @param id The identifier of the solution.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesSolution]
    def get_superseded_solutions(id, opts = {})
      data, _status_code, _headers = get_superseded_solutions_with_http_info(id, opts)
      data
    end

    # Superseded Solutions
    # Returns the solutions that are superseded by this solution.
    # @param id The identifier of the solution.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesSolution, Fixnum, Hash)>] ResourcesSolution data, response status code and response headers
    def get_superseded_solutions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_superseded_solutions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_superseded_solutions"
      end
      # resource path
      local_var_path = '/api/3/solutions/{id}/supersedes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSolution')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_superseded_solutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Superseding Solutions
    # Returns the solutions that supersede this solution.
    # @param id The identifier of the solution.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :rollup Whether to return only highest-level \&quot;rollup\&quot; superseding solutions. (default to true)
    # @return [ResourcesSolution]
    def get_superseding_solutions(id, opts = {})
      data, _status_code, _headers = get_superseding_solutions_with_http_info(id, opts)
      data
    end

    # Superseding Solutions
    # Returns the solutions that supersede this solution.
    # @param id The identifier of the solution.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :rollup Whether to return only highest-level \&quot;rollup\&quot; superseding solutions.
    # @return [Array<(ResourcesSolution, Fixnum, Hash)>] ResourcesSolution data, response status code and response headers
    def get_superseding_solutions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_superseding_solutions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_superseding_solutions"
      end
      # resource path
      local_var_path = '/api/3/solutions/{id}/superseding'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'rollup'] = opts[:'rollup'] if !opts[:'rollup'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSolution')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_superseding_solutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Vulnerabilities
    # Returns all vulnerabilities that can be assessed during a scan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfVulnerability]
    def get_vulnerabilities(opts = {})
      data, _status_code, _headers = get_vulnerabilities_with_http_info(opts)
      data
    end

    # Vulnerabilities
    # Returns all vulnerabilities that can be assessed during a scan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfVulnerability, Fixnum, Hash)>] PageOfVulnerability data, response status code and response headers
    def get_vulnerabilities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerabilities ...'
      end
      # resource path
      local_var_path = '/api/3/vulnerabilities'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfVulnerability')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Vulnerability
    # Returns the details for a vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [Vulnerability]
    def get_vulnerability(id, opts = {})
      data, _status_code, _headers = get_vulnerability_with_http_info(id, opts)
      data
    end

    # Vulnerability
    # Returns the details for a vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Vulnerability, Fixnum, Hash)>] Vulnerability data, response status code and response headers
    def get_vulnerability_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_vulnerability"
      end
      # resource path
      local_var_path = '/api/3/vulnerabilities/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Vulnerability')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Categories
    # Returns all vulnerabilities categories that can be assigned to a vulnerability. These categories group and label vulnerabilities by general purpose, affected systems, vendor, etc.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfVulnerabilityCategory]
    def get_vulnerability_categories(opts = {})
      data, _status_code, _headers = get_vulnerability_categories_with_http_info(opts)
      data
    end

    # Categories
    # Returns all vulnerabilities categories that can be assigned to a vulnerability. These categories group and label vulnerabilities by general purpose, affected systems, vendor, etc.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfVulnerabilityCategory, Fixnum, Hash)>] PageOfVulnerabilityCategory data, response status code and response headers
    def get_vulnerability_categories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_categories ...'
      end
      # resource path
      local_var_path = '/api/3/vulnerability_categories'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfVulnerabilityCategory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Category
    # Returns the details for a vulnerability category.
    # @param id The identifier of the vulnerability category.
    # @param [Hash] opts the optional parameters
    # @return [VulnerabilityCategory]
    def get_vulnerability_category(id, opts = {})
      data, _status_code, _headers = get_vulnerability_category_with_http_info(id, opts)
      data
    end

    # Category
    # Returns the details for a vulnerability category.
    # @param id The identifier of the vulnerability category.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VulnerabilityCategory, Fixnum, Hash)>] VulnerabilityCategory data, response status code and response headers
    def get_vulnerability_category_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_category ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_vulnerability_category"
      end
      # resource path
      local_var_path = '/api/3/vulnerability_categories/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VulnerabilityCategory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Category Vulnerabilities
    # Returns hypermedia links to the vulnerabilities that are in a vulnerability category.
    # @param id The identifier of the vulnerability category.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithVulnerabilityNaturalIDLink]
    def get_vulnerability_category_vulnerabilities(id, opts = {})
      data, _status_code, _headers = get_vulnerability_category_vulnerabilities_with_http_info(id, opts)
      data
    end

    # Category Vulnerabilities
    # Returns hypermedia links to the vulnerabilities that are in a vulnerability category.
    # @param id The identifier of the vulnerability category.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithVulnerabilityNaturalIDLink, Fixnum, Hash)>] ReferencesWithVulnerabilityNaturalIDLink data, response status code and response headers
    def get_vulnerability_category_vulnerabilities_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_category_vulnerabilities ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_vulnerability_category_vulnerabilities"
      end
      # resource path
      local_var_path = '/api/3/vulnerability_categories/{id}/vulnerabilities'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithVulnerabilityNaturalIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_category_vulnerabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Vulnerability Exploits
    # Returns the exploits that can be used to exploit a vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfExploit]
    def get_vulnerability_exploits(id, opts = {})
      data, _status_code, _headers = get_vulnerability_exploits_with_http_info(id, opts)
      data
    end

    # Vulnerability Exploits
    # Returns the exploits that can be used to exploit a vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfExploit, Fixnum, Hash)>] PageOfExploit data, response status code and response headers
    def get_vulnerability_exploits_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_exploits ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_vulnerability_exploits"
      end
      # resource path
      local_var_path = '/api/3/vulnerabilities/{id}/exploits'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfExploit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_exploits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Vulnerability Malware Kits
    # Returns the malware kits that are known to be used to exploit the vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfMalwareKit]
    def get_vulnerability_malware_kits(id, opts = {})
      data, _status_code, _headers = get_vulnerability_malware_kits_with_http_info(id, opts)
      data
    end

    # Vulnerability Malware Kits
    # Returns the malware kits that are known to be used to exploit the vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfMalwareKit, Fixnum, Hash)>] PageOfMalwareKit data, response status code and response headers
    def get_vulnerability_malware_kits_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_malware_kits ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_vulnerability_malware_kits"
      end
      # resource path
      local_var_path = '/api/3/vulnerabilities/{id}/malware_kits'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfMalwareKit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_malware_kits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reference
    # Returns an external vulnerability reference.
    # @param id The identifier of the vulnerability reference.
    # @param [Hash] opts the optional parameters
    # @return [VulnerabilityReference]
    def get_vulnerability_reference(id, opts = {})
      data, _status_code, _headers = get_vulnerability_reference_with_http_info(id, opts)
      data
    end

    # Reference
    # Returns an external vulnerability reference.
    # @param id The identifier of the vulnerability reference.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VulnerabilityReference, Fixnum, Hash)>] VulnerabilityReference data, response status code and response headers
    def get_vulnerability_reference_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_reference ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_vulnerability_reference"
      end
      # resource path
      local_var_path = '/api/3/vulnerability_references/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VulnerabilityReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reference Vulnerabilities
    # Returns the vulnerabilities that are referenced by an external reference.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfVulnerability]
    def get_vulnerability_reference_vulnerabilities(id, opts = {})
      data, _status_code, _headers = get_vulnerability_reference_vulnerabilities_with_http_info(id, opts)
      data
    end

    # Reference Vulnerabilities
    # Returns the vulnerabilities that are referenced by an external reference.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfVulnerability, Fixnum, Hash)>] PageOfVulnerability data, response status code and response headers
    def get_vulnerability_reference_vulnerabilities_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_reference_vulnerabilities ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_vulnerability_reference_vulnerabilities"
      end
      # resource path
      local_var_path = '/api/3/vulnerability_references/{id}/vulnerabilities'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfVulnerability')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_reference_vulnerabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # References
    # Returns the external references that may be associated to a vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfVulnerabilityReference]
    def get_vulnerability_references(opts = {})
      data, _status_code, _headers = get_vulnerability_references_with_http_info(opts)
      data
    end

    # References
    # Returns the external references that may be associated to a vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfVulnerabilityReference, Fixnum, Hash)>] PageOfVulnerabilityReference data, response status code and response headers
    def get_vulnerability_references_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_references ...'
      end
      # resource path
      local_var_path = '/api/3/vulnerability_references'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfVulnerabilityReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_references\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Vulnerability References
    # Returns the external references that may be associated to a vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfVulnerabilityReference]
    def get_vulnerability_references1(id, opts = {})
      data, _status_code, _headers = get_vulnerability_references1_with_http_info(id, opts)
      data
    end

    # Vulnerability References
    # Returns the external references that may be associated to a vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfVulnerabilityReference, Fixnum, Hash)>] PageOfVulnerabilityReference data, response status code and response headers
    def get_vulnerability_references1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_references1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_vulnerability_references1"
      end
      # resource path
      local_var_path = '/api/3/vulnerabilities/{id}/references'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfVulnerabilityReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_references1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Vulnerability Solutions
    # Returns all solutions (across all platforms) that may be used to remediate this vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithSolutionNaturalIDLink]
    def get_vulnerability_solutions(id, opts = {})
      data, _status_code, _headers = get_vulnerability_solutions_with_http_info(id, opts)
      data
    end

    # Vulnerability Solutions
    # Returns all solutions (across all platforms) that may be used to remediate this vulnerability.
    # @param id The identifier of the vulnerability.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithSolutionNaturalIDLink, Fixnum, Hash)>] ReferencesWithSolutionNaturalIDLink data, response status code and response headers
    def get_vulnerability_solutions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_solutions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VulnerabilityApi.get_vulnerability_solutions"
      end
      # resource path
      local_var_path = '/api/3/vulnerabilities/{id}/solutions'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithSolutionNaturalIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_solutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
