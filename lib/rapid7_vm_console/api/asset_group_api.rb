=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class AssetGroupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Asset Group Tag
    # Adds a tag to an asset group.
    # @param id The identifier of the asset group.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def add_asset_group_tag(id, tag_id, opts = {})
      data, _status_code, _headers = add_asset_group_tag_with_http_info(id, tag_id, opts)
      data
    end

    # Asset Group Tag
    # Adds a tag to an asset group.
    # @param id The identifier of the asset group.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def add_asset_group_tag_with_http_info(id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.add_asset_group_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.add_asset_group_tag"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AssetGroupApi.add_asset_group_tag"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/tags/{tagId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#add_asset_group_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group User
    # Grants a user with sufficient privileges access to the asset group.
    # @param id The identifier of the asset group.
    # @param user_id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def add_asset_group_user(id, user_id, opts = {})
      data, _status_code, _headers = add_asset_group_user_with_http_info(id, user_id, opts)
      data
    end

    # Asset Group User
    # Grants a user with sufficient privileges access to the asset group.
    # @param id The identifier of the asset group.
    # @param user_id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def add_asset_group_user_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.add_asset_group_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.add_asset_group_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AssetGroupApi.add_asset_group_user"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/users/{userId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#add_asset_group_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Asset
    # Adds an asset to a static asset group.
    # @param id The identifier of the asset group.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def add_asset_to_asset_group(id, asset_id, opts = {})
      data, _status_code, _headers = add_asset_to_asset_group_with_http_info(id, asset_id, opts)
      data
    end

    # Asset Group Asset
    # Adds an asset to a static asset group.
    # @param id The identifier of the asset group.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def add_asset_to_asset_group_with_http_info(id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.add_asset_to_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.add_asset_to_asset_group"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetGroupApi.add_asset_to_asset_group"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/assets/{assetId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#add_asset_to_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Groups
    # Creates a new asset group. The `searchCriteria` field can be passed no matter what the type of the asset group is. The asset group `type` changes when the assets are refreshed. Dynamic asset groups constantly refreshed their membership as assets are scanned whereas static asset groups do not change membership automatically.  See the <a href=\"#section/Responses/SearchCriteria\">Search Criteria</a> for more information on using dynamic criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [AssetGroup] :asset_group The details of the asset group.
    # @return [CreatedReferenceAssetGroupIDLink]
    def create_asset_group(opts = {})
      data, _status_code, _headers = create_asset_group_with_http_info(opts)
      data
    end

    # Asset Groups
    # Creates a new asset group. The &#x60;searchCriteria&#x60; field can be passed no matter what the type of the asset group is. The asset group &#x60;type&#x60; changes when the assets are refreshed. Dynamic asset groups constantly refreshed their membership as assets are scanned whereas static asset groups do not change membership automatically.  See the &lt;a href&#x3D;\&quot;#section/Responses/SearchCriteria\&quot;&gt;Search Criteria&lt;/a&gt; for more information on using dynamic criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [AssetGroup] :asset_group The details of the asset group.
    # @return [Array<(CreatedReferenceAssetGroupIDLink, Fixnum, Hash)>] CreatedReferenceAssetGroupIDLink data, response status code and response headers
    def create_asset_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.create_asset_group ...'
      end
      # resource path
      local_var_path = '/api/3/asset_groups'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'asset_group'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatedReferenceAssetGroupIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#create_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group
    # Deletes the asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_asset_group(id, opts = {})
      data, _status_code, _headers = delete_asset_group_with_http_info(id, opts)
      data
    end

    # Asset Group
    # Deletes the asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_asset_group_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.delete_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.delete_asset_group"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#delete_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group
    # Returns an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [AssetGroup]
    def get_asset_group(id, opts = {})
      data, _status_code, _headers = get_asset_group_with_http_info(id, opts)
      data
    end

    # Asset Group
    # Returns an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssetGroup, Fixnum, Hash)>] AssetGroup data, response status code and response headers
    def get_asset_group_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.get_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.get_asset_group"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssetGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#get_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Assets
    # Returns hypermedia links for the assets that belong to an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithAssetIDLink]
    def get_asset_group_assets(id, opts = {})
      data, _status_code, _headers = get_asset_group_assets_with_http_info(id, opts)
      data
    end

    # Asset Group Assets
    # Returns hypermedia links for the assets that belong to an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithAssetIDLink, Fixnum, Hash)>] ReferencesWithAssetIDLink data, response status code and response headers
    def get_asset_group_assets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.get_asset_group_assets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.get_asset_group_assets"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/assets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithAssetIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#get_asset_group_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Search Criteria
    # Returns the search criteria of a dynamic asset group.For a reference of valid search criteria input see the <a href=\"#operation/getAssetsSearchUsingPOST\">Asset Search</a> resource.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [SearchCriteria]
    def get_asset_group_search_criteria(id, opts = {})
      data, _status_code, _headers = get_asset_group_search_criteria_with_http_info(id, opts)
      data
    end

    # Asset Group Search Criteria
    # Returns the search criteria of a dynamic asset group.For a reference of valid search criteria input see the &lt;a href&#x3D;\&quot;#operation/getAssetsSearchUsingPOST\&quot;&gt;Asset Search&lt;/a&gt; resource.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchCriteria, Fixnum, Hash)>] SearchCriteria data, response status code and response headers
    def get_asset_group_search_criteria_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.get_asset_group_search_criteria ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.get_asset_group_search_criteria"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/search_criteria'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchCriteria')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#get_asset_group_search_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Tags
    # Returns the tags assigned to an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithTagIDLink]
    def get_asset_group_tags(id, opts = {})
      data, _status_code, _headers = get_asset_group_tags_with_http_info(id, opts)
      data
    end

    # Asset Group Tags
    # Returns the tags assigned to an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithTagIDLink, Fixnum, Hash)>] ReferencesWithTagIDLink data, response status code and response headers
    def get_asset_group_tags_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.get_asset_group_tags ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.get_asset_group_tags"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/tags'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithTagIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#get_asset_group_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Users
    # Returns hypermedia links for the users with access to this asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithUserIDLink]
    def get_asset_group_users(id, opts = {})
      data, _status_code, _headers = get_asset_group_users_with_http_info(id, opts)
      data
    end

    # Asset Group Users
    # Returns hypermedia links for the users with access to this asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithUserIDLink, Fixnum, Hash)>] ReferencesWithUserIDLink data, response status code and response headers
    def get_asset_group_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.get_asset_group_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.get_asset_group_users"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithUserIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#get_asset_group_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Groups
    # Returns all asset groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of asset group.
    # @option opts [String] :name A search pattern for the name of the asset group. Searches are case-insensitive contains.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfAssetGroup]
    def get_asset_groups(opts = {})
      data, _status_code, _headers = get_asset_groups_with_http_info(opts)
      data
    end

    # Asset Groups
    # Returns all asset groups.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of asset group.
    # @option opts [String] :name A search pattern for the name of the asset group. Searches are case-insensitive contains.
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfAssetGroup, Fixnum, Hash)>] PageOfAssetGroup data, response status code and response headers
    def get_asset_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.get_asset_groups ...'
      end
      # resource path
      local_var_path = '/api/3/asset_groups'

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfAssetGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#get_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Tags
    # Removes all tag associations from the asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_all_asset_group_tags(id, opts = {})
      data, _status_code, _headers = remove_all_asset_group_tags_with_http_info(id, opts)
      data
    end

    # Asset Group Tags
    # Removes all tag associations from the asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_all_asset_group_tags_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.remove_all_asset_group_tags ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.remove_all_asset_group_tags"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/tags'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#remove_all_asset_group_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Assets
    # Removes the assets from the given static asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_all_assets_from_asset_group(id, opts = {})
      data, _status_code, _headers = remove_all_assets_from_asset_group_with_http_info(id, opts)
      data
    end

    # Asset Group Assets
    # Removes the assets from the given static asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_all_assets_from_asset_group_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.remove_all_assets_from_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.remove_all_assets_from_asset_group"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/assets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#remove_all_assets_from_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Asset
    # Removes an asset from an asset group.
    # @param id The identifier of the asset group.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_asset_from_asset_group(id, asset_id, opts = {})
      data, _status_code, _headers = remove_asset_from_asset_group_with_http_info(id, asset_id, opts)
      data
    end

    # Asset Group Asset
    # Removes an asset from an asset group.
    # @param id The identifier of the asset group.
    # @param asset_id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_asset_from_asset_group_with_http_info(id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.remove_asset_from_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.remove_asset_from_asset_group"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling AssetGroupApi.remove_asset_from_asset_group"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/assets/{assetId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'assetId' + '}', asset_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#remove_asset_from_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Tag
    # Removes a tag from an asset group.
    # @param id The identifier of the asset group.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_asset_group_tag(id, tag_id, opts = {})
      data, _status_code, _headers = remove_asset_group_tag_with_http_info(id, tag_id, opts)
      data
    end

    # Asset Group Tag
    # Removes a tag from an asset group.
    # @param id The identifier of the asset group.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_asset_group_tag_with_http_info(id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.remove_asset_group_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.remove_asset_group_tag"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AssetGroupApi.remove_asset_group_tag"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/tags/{tagId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#remove_asset_group_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group User
    # Removes a user's access from an asset group.
    # @param id The identifier of the asset group.
    # @param user_id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_asset_group_user(id, user_id, opts = {})
      data, _status_code, _headers = remove_asset_group_user_with_http_info(id, user_id, opts)
      data
    end

    # Asset Group User
    # Removes a user&#39;s access from an asset group.
    # @param id The identifier of the asset group.
    # @param user_id The identifier of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_asset_group_user_with_http_info(id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.remove_asset_group_user ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.remove_asset_group_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AssetGroupApi.remove_asset_group_user"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/users/{userId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#remove_asset_group_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Search Criteria
    # Updates the search criteria of a dynamic asset group. For a reference of valid search criteria input see the <a href=\"#operation/getAssetsSearchUsingPOST\">Asset Search</a> resource.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [SearchCriteria] :criteria The search criteria specification.
    # @return [Links]
    def set_asset_group_search_criteria(id, opts = {})
      data, _status_code, _headers = set_asset_group_search_criteria_with_http_info(id, opts)
      data
    end

    # Asset Group Search Criteria
    # Updates the search criteria of a dynamic asset group. For a reference of valid search criteria input see the &lt;a href&#x3D;\&quot;#operation/getAssetsSearchUsingPOST\&quot;&gt;Asset Search&lt;/a&gt; resource.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [SearchCriteria] :criteria The search criteria specification.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_asset_group_search_criteria_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.set_asset_group_search_criteria ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.set_asset_group_search_criteria"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/search_criteria'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'criteria'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#set_asset_group_search_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Tags
    # Updates the tags of an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :tags The tags to associate to the asset group.
    # @return [Links]
    def set_asset_group_tags(id, opts = {})
      data, _status_code, _headers = set_asset_group_tags_with_http_info(id, opts)
      data
    end

    # Asset Group Tags
    # Updates the tags of an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :tags The tags to associate to the asset group.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_asset_group_tags_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.set_asset_group_tags ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.set_asset_group_tags"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/tags'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'tags'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#set_asset_group_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Users
    # Grants users with sufficient privileges access to an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :users The users to grant access to the asset group.
    # @return [Links]
    def set_asset_group_users(id, opts = {})
      data, _status_code, _headers = set_asset_group_users_with_http_info(id, opts)
      data
    end

    # Asset Group Users
    # Grants users with sufficient privileges access to an asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :users The users to grant access to the asset group.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def set_asset_group_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.set_asset_group_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.set_asset_group_users"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'users'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#set_asset_group_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group
    # Updates the details of an asset group. See the search criteria endpoint (/search_criteria) for more information about building the search criteria and examples.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [AssetGroup] :asset_group The details of the asset group.
    # @return [Links]
    def update_asset_group(id, opts = {})
      data, _status_code, _headers = update_asset_group_with_http_info(id, opts)
      data
    end

    # Asset Group
    # Updates the details of an asset group. See the search criteria endpoint (/search_criteria) for more information about building the search criteria and examples.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [AssetGroup] :asset_group The details of the asset group.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_asset_group_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.update_asset_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.update_asset_group"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'asset_group'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#update_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Group Assets
    # Updates all the assets that belong to a static asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :assets The assets to place in the asset group. 
    # @return [Links]
    def update_asset_group_assets(id, opts = {})
      data, _status_code, _headers = update_asset_group_assets_with_http_info(id, opts)
      data
    end

    # Asset Group Assets
    # Updates all the assets that belong to a static asset group.
    # @param id The identifier of the asset group.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :assets The assets to place in the asset group. 
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_asset_group_assets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupApi.update_asset_group_assets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupApi.update_asset_group_assets"
      end
      # resource path
      local_var_path = '/api/3/asset_groups/{id}/assets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'assets'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupApi#update_asset_group_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
