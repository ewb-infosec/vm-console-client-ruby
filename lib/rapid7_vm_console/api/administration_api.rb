=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class AdministrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # License
    # Licenses the product with an activation key or a provided license file. If both are provided, the license file is preferred. <span class=\"authorization\">Global Administrator</span>
    # @param [Hash] opts the optional parameters
    # @option opts [File] :license The contents of a license (.lic) file.
    # @option opts [String] :key A license activation key.
    # @return [Links]
    def activate_license(opts = {})
      data, _status_code, _headers = activate_license_with_http_info(opts)
      data
    end

    # License
    # Licenses the product with an activation key or a provided license file. If both are provided, the license file is preferred. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [File] :license The contents of a license (.lic) file.
    # @option opts [String] :key A license activation key.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def activate_license_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.activate_license ...'
      end
      # resource path
      local_var_path = '/api/3/administration/license'

      # query parameters
      query_params = {}
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['license'] = opts[:'license'] if !opts[:'license'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#activate_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Console Commands
    # Executes a console command against the Security Console. <span class=\"authorization\">Global Administrator</span>
    # @param [Hash] opts the optional parameters
    # @option opts [String] :command The console command to execute.
    # @return [ConsoleCommandOutput]
    def execute_command(opts = {})
      data, _status_code, _headers = execute_command_with_http_info(opts)
      data
    end

    # Console Commands
    # Executes a console command against the Security Console. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :command The console command to execute.
    # @return [Array<(ConsoleCommandOutput, Fixnum, Hash)>] ConsoleCommandOutput data, response status code and response headers
    def execute_command_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.execute_command ...'
      end
      # resource path
      local_var_path = '/api/3/administration/commands'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'command'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsoleCommandOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#execute_command\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Information
    # Returns system details, including host and version information.
    # @param [Hash] opts the optional parameters
    # @return [Info]
    def get_info(opts = {})
      data, _status_code, _headers = get_info_with_http_info(opts)
      data
    end

    # Information
    # Returns system details, including host and version information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Info, Fixnum, Hash)>] Info data, response status code and response headers
    def get_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.get_info ...'
      end
      # resource path
      local_var_path = '/api/3/administration/info'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Info')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#get_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # License
    # Returns the enabled features and limits of the current license. <span class=\"authorization\">Global Administrator</span>
    # @param [Hash] opts the optional parameters
    # @return [License]
    def get_license(opts = {})
      data, _status_code, _headers = get_license_with_http_info(opts)
      data
    end

    # License
    # Returns the enabled features and limits of the current license. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(License, Fixnum, Hash)>] License data, response status code and response headers
    def get_license_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.get_license ...'
      end
      # resource path
      local_var_path = '/api/3/administration/license'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'License')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#get_license\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Properties
    # Returns system details, including host and version information.
    # @param [Hash] opts the optional parameters
    # @return [EnvironmentProperties]
    def get_properties(opts = {})
      data, _status_code, _headers = get_properties_with_http_info(opts)
      data
    end

    # Properties
    # Returns system details, including host and version information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnvironmentProperties, Fixnum, Hash)>] EnvironmentProperties data, response status code and response headers
    def get_properties_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.get_properties ...'
      end
      # resource path
      local_var_path = '/api/3/administration/properties'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnvironmentProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#get_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Settings
    # Returns the current administration settings. <span class=\"authorization\">Global Administrator</span>
    # @param [Hash] opts the optional parameters
    # @return [Settings]
    def get_settings(opts = {})
      data, _status_code, _headers = get_settings_with_http_info(opts)
      data
    end

    # Settings
    # Returns the current administration settings. &lt;span class&#x3D;\&quot;authorization\&quot;&gt;Global Administrator&lt;/span&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Settings, Fixnum, Hash)>] Settings data, response status code and response headers
    def get_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrationApi.get_settings ...'
      end
      # resource path
      local_var_path = '/api/3/administration/settings'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Settings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrationApi#get_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
