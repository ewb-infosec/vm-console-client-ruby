=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class AssetDiscoveryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Sonar Queries
    # Creates a sonar query.
    # @param [Hash] opts the optional parameters
    # @option opts [SonarQuery] :query The criteria for a Sonar query.
    # @return [CreatedReferenceDiscoveryQueryIDLink]
    def create_sonar_query(opts = {})
      data, _status_code, _headers = create_sonar_query_with_http_info(opts)
      data
    end

    # Sonar Queries
    # Creates a sonar query.
    # @param [Hash] opts the optional parameters
    # @option opts [SonarQuery] :query The criteria for a Sonar query.
    # @return [Array<(CreatedReferenceDiscoveryQueryIDLink, Fixnum, Hash)>] CreatedReferenceDiscoveryQueryIDLink data, response status code and response headers
    def create_sonar_query_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.create_sonar_query ...'
      end
      # resource path
      local_var_path = '/api/3/sonar_queries'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatedReferenceDiscoveryQueryIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#create_sonar_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sonar Query
    # Removes a sonar query.
    # @param id The identifier of the Sonar query.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_sonar_query(id, opts = {})
      data, _status_code, _headers = delete_sonar_query_with_http_info(id, opts)
      data
    end

    # Sonar Query
    # Removes a sonar query.
    # @param id The identifier of the Sonar query.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_sonar_query_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.delete_sonar_query ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetDiscoveryApi.delete_sonar_query"
      end
      # resource path
      local_var_path = '/api/3/sonar_queries/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#delete_sonar_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Discovery Connection
    # Returns a discovery connection.
    # @param id The identifier of the discovery connection.
    # @param [Hash] opts the optional parameters
    # @return [DiscoveryConnection]
    def get_discovery_connection(id, opts = {})
      data, _status_code, _headers = get_discovery_connection_with_http_info(id, opts)
      data
    end

    # Discovery Connection
    # Returns a discovery connection.
    # @param id The identifier of the discovery connection.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DiscoveryConnection, Fixnum, Hash)>] DiscoveryConnection data, response status code and response headers
    def get_discovery_connection_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.get_discovery_connection ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetDiscoveryApi.get_discovery_connection"
      end
      # resource path
      local_var_path = '/api/3/discovery_connections/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscoveryConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#get_discovery_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Discovery Connections
    # Returns all discovery connections.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfDiscoveryConnection]
    def get_discovery_connections(opts = {})
      data, _status_code, _headers = get_discovery_connections_with_http_info(opts)
      data
    end

    # Discovery Connections
    # Returns all discovery connections.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfDiscoveryConnection, Fixnum, Hash)>] PageOfDiscoveryConnection data, response status code and response headers
    def get_discovery_connections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.get_discovery_connections ...'
      end
      # resource path
      local_var_path = '/api/3/discovery_connections'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfDiscoveryConnection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#get_discovery_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sonar Queries
    # Returns all sonar queries.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesSonarQuery]
    def get_sonar_queries(opts = {})
      data, _status_code, _headers = get_sonar_queries_with_http_info(opts)
      data
    end

    # Sonar Queries
    # Returns all sonar queries.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesSonarQuery, Fixnum, Hash)>] ResourcesSonarQuery data, response status code and response headers
    def get_sonar_queries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.get_sonar_queries ...'
      end
      # resource path
      local_var_path = '/api/3/sonar_queries'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSonarQuery')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#get_sonar_queries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sonar Query
    # Returns a sonar query.
    # @param id The identifier of the Sonar query.
    # @param [Hash] opts the optional parameters
    # @return [SonarQuery]
    def get_sonar_query(id, opts = {})
      data, _status_code, _headers = get_sonar_query_with_http_info(id, opts)
      data
    end

    # Sonar Query
    # Returns a sonar query.
    # @param id The identifier of the Sonar query.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SonarQuery, Fixnum, Hash)>] SonarQuery data, response status code and response headers
    def get_sonar_query_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.get_sonar_query ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetDiscoveryApi.get_sonar_query"
      end
      # resource path
      local_var_path = '/api/3/sonar_queries/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SonarQuery')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#get_sonar_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sonar Query Assets
    # Returns the assets that are discovered by a Sonar query.
    # @param id The identifier of the Sonar query.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesDiscoveryAsset]
    def get_sonar_query_assets(id, opts = {})
      data, _status_code, _headers = get_sonar_query_assets_with_http_info(id, opts)
      data
    end

    # Sonar Query Assets
    # Returns the assets that are discovered by a Sonar query.
    # @param id The identifier of the Sonar query.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesDiscoveryAsset, Fixnum, Hash)>] ResourcesDiscoveryAsset data, response status code and response headers
    def get_sonar_query_assets_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.get_sonar_query_assets ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetDiscoveryApi.get_sonar_query_assets"
      end
      # resource path
      local_var_path = '/api/3/sonar_queries/{id}/assets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesDiscoveryAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#get_sonar_query_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Discovery Connection Reconnect
    # Attempts to reconnect the discovery connection.
    # @param id The identifier of the discovery connection.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reconnect_discovery_connection(id, opts = {})
      reconnect_discovery_connection_with_http_info(id, opts)
      nil
    end

    # Discovery Connection Reconnect
    # Attempts to reconnect the discovery connection.
    # @param id The identifier of the discovery connection.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reconnect_discovery_connection_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.reconnect_discovery_connection ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetDiscoveryApi.reconnect_discovery_connection"
      end
      # resource path
      local_var_path = '/api/3/discovery_connections/{id}/connect'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#reconnect_discovery_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sonar Query Search
    # Executes a Sonar query to discover assets with the given search criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [SonarCriteria] :query The criteria for a Sonar query.
    # @return [Array<DiscoveryAsset>]
    def sonar_query_search(opts = {})
      data, _status_code, _headers = sonar_query_search_with_http_info(opts)
      data
    end

    # Sonar Query Search
    # Executes a Sonar query to discover assets with the given search criteria.
    # @param [Hash] opts the optional parameters
    # @option opts [SonarCriteria] :query The criteria for a Sonar query.
    # @return [Array<(Array<DiscoveryAsset>, Fixnum, Hash)>] Array<DiscoveryAsset> data, response status code and response headers
    def sonar_query_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.sonar_query_search ...'
      end
      # resource path
      local_var_path = '/api/3/sonar_queries/search'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DiscoveryAsset>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#sonar_query_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sonar Query
    # Updates a sonar query.
    # @param id The identifier of the Sonar query.
    # @param [Hash] opts the optional parameters
    # @option opts [SonarQuery] :query The criteria for a Sonar query.
    # @return [Links]
    def update_sonar_query(id, opts = {})
      data, _status_code, _headers = update_sonar_query_with_http_info(id, opts)
      data
    end

    # Sonar Query
    # Updates a sonar query.
    # @param id The identifier of the Sonar query.
    # @param [Hash] opts the optional parameters
    # @option opts [SonarQuery] :query The criteria for a Sonar query.
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def update_sonar_query_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetDiscoveryApi.update_sonar_query ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetDiscoveryApi.update_sonar_query"
      end
      # resource path
      local_var_path = '/api/3/sonar_queries/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'query'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetDiscoveryApi#update_sonar_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
