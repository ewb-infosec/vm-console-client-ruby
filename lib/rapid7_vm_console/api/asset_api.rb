=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module Rapid7VmConsole
  class AssetApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Asset Tag
    # Assigns the specified tag to the asset.
    # @param id The identifier of the asset.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def add_asset_tag(id, tag_id, opts = {})
      data, _status_code, _headers = add_asset_tag_with_http_info(id, tag_id, opts)
      data
    end

    # Asset Tag
    # Assigns the specified tag to the asset.
    # @param id The identifier of the asset.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def add_asset_tag_with_http_info(id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.add_asset_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.add_asset_tag"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AssetApi.add_asset_tag"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/tags/{tagId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#add_asset_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assets
    # Creates or updates an asset with the specified details.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [AssetCreate] :asset The details of the asset being added or updated.  The operating system can be specified in one of three ways, with the order of precedence: &#x60;\&quot;osFingerprint\&quot;&#x60;, &#x60;\&quot;os\&quot;&#x60;, &#x60;\&quot;cpe\&quot;&#x60;
    # @return [CreatedReference]
    def create_asset(id, opts = {})
      data, _status_code, _headers = create_asset_with_http_info(id, opts)
      data
    end

    # Assets
    # Creates or updates an asset with the specified details.
    # @param id The identifier of the site.
    # @param [Hash] opts the optional parameters
    # @option opts [AssetCreate] :asset The details of the asset being added or updated.  The operating system can be specified in one of three ways, with the order of precedence: &#x60;\&quot;osFingerprint\&quot;&#x60;, &#x60;\&quot;os\&quot;&#x60;, &#x60;\&quot;cpe\&quot;&#x60;
    # @return [Array<(CreatedReference, Fixnum, Hash)>] CreatedReference data, response status code and response headers
    def create_asset_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.create_asset ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.create_asset"
      end
      # resource path
      local_var_path = '/api/3/sites/{id}/assets'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'asset'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatedReference')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#create_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset
    # Deletes the specified asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def delete_asset(id, opts = {})
      data, _status_code, _headers = delete_asset_with_http_info(id, opts)
      data
    end

    # Asset
    # Deletes the specified asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def delete_asset_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.delete_asset ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.delete_asset"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#delete_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Search
    # Returns all assets for which you have access that match the given search criteria.
    # @param param1 param1
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfAsset]
    def find_assets(param1, opts = {})
      data, _status_code, _headers = find_assets_with_http_info(param1, opts)
      data
    end

    # Asset Search
    # Returns all assets for which you have access that match the given search criteria.
    # @param param1 param1
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfAsset, Fixnum, Hash)>] PageOfAsset data, response status code and response headers
    def find_assets_with_http_info(param1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.find_assets ...'
      end
      # verify the required parameter 'param1' is set
      if @api_client.config.client_side_validation && param1.nil?
        fail ArgumentError, "Missing the required parameter 'param1' when calling AssetApi.find_assets"
      end
      # resource path
      local_var_path = '/api/3/assets/search'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(param1)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#find_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset
    # Returns the specified asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Asset]
    def get_asset(id, opts = {})
      data, _status_code, _headers = get_asset_with_http_info(id, opts)
      data
    end

    # Asset
    # Returns the specified asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Asset, Fixnum, Hash)>] Asset data, response status code and response headers
    def get_asset_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Asset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Databases
    # Returns the databases enumerated on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesDatabase]
    def get_asset_databases(id, opts = {})
      data, _status_code, _headers = get_asset_databases_with_http_info(id, opts)
      data
    end

    # Asset Databases
    # Returns the databases enumerated on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesDatabase, Fixnum, Hash)>] ResourcesDatabase data, response status code and response headers
    def get_asset_databases_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_databases ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_databases"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/databases'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesDatabase')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_databases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Files
    # Returns the files discovered on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesFile]
    def get_asset_files(id, opts = {})
      data, _status_code, _headers = get_asset_files_with_http_info(id, opts)
      data
    end

    # Asset Files
    # Returns the files discovered on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesFile, Fixnum, Hash)>] ResourcesFile data, response status code and response headers
    def get_asset_files_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_files ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_files"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/files'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Service
    # Returns the service running a port and protocol on the asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [Service]
    def get_asset_service(id, protocol, port, opts = {})
      data, _status_code, _headers = get_asset_service_with_http_info(id, protocol, port, opts)
      data
    end

    # Asset Service
    # Returns the service running a port and protocol on the asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Service, Fixnum, Hash)>] Service data, response status code and response headers
    def get_asset_service_with_http_info(id, protocol, port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_service ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_service"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling AssetApi.get_asset_service"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ip', 'icmp', 'igmp', 'ggp', 'tcp', 'pup', 'udp', 'idp', 'esp', 'nd', 'raw'].include?(protocol)
        fail ArgumentError, "invalid value for 'protocol', must be one of ip, icmp, igmp, ggp, tcp, pup, udp, idp, esp, nd, raw"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AssetApi.get_asset_service"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/services/{protocol}/{port}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'protocol' + '}', protocol.to_s).sub('{' + 'port' + '}', port.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Service')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Service Configurations
    # Returns the configuration (properties) of a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesConfiguration]
    def get_asset_service_configurations(id, protocol, port, opts = {})
      data, _status_code, _headers = get_asset_service_configurations_with_http_info(id, protocol, port, opts)
      data
    end

    # Asset Service Configurations
    # Returns the configuration (properties) of a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesConfiguration, Fixnum, Hash)>] ResourcesConfiguration data, response status code and response headers
    def get_asset_service_configurations_with_http_info(id, protocol, port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_service_configurations ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_service_configurations"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling AssetApi.get_asset_service_configurations"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ip', 'icmp', 'igmp', 'ggp', 'tcp', 'pup', 'udp', 'idp', 'esp', 'nd', 'raw'].include?(protocol)
        fail ArgumentError, "invalid value for 'protocol', must be one of ip, icmp, igmp, ggp, tcp, pup, udp, idp, esp, nd, raw"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AssetApi.get_asset_service_configurations"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/services/{protocol}/{port}/configurations'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'protocol' + '}', protocol.to_s).sub('{' + 'port' + '}', port.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_service_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Service Databases
    # Returns the databases running on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesDatabase]
    def get_asset_service_databases(id, protocol, port, opts = {})
      data, _status_code, _headers = get_asset_service_databases_with_http_info(id, protocol, port, opts)
      data
    end

    # Asset Service Databases
    # Returns the databases running on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesDatabase, Fixnum, Hash)>] ResourcesDatabase data, response status code and response headers
    def get_asset_service_databases_with_http_info(id, protocol, port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_service_databases ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_service_databases"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling AssetApi.get_asset_service_databases"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ip', 'icmp', 'igmp', 'ggp', 'tcp', 'pup', 'udp', 'idp', 'esp', 'nd', 'raw'].include?(protocol)
        fail ArgumentError, "invalid value for 'protocol', must be one of ip, icmp, igmp, ggp, tcp, pup, udp, idp, esp, nd, raw"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AssetApi.get_asset_service_databases"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/services/{protocol}/{port}/databases'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'protocol' + '}', protocol.to_s).sub('{' + 'port' + '}', port.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesDatabase')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_service_databases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Service User Groups
    # Returns the user groups enumerated on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesGroupAccount]
    def get_asset_service_user_groups(id, protocol, port, opts = {})
      data, _status_code, _headers = get_asset_service_user_groups_with_http_info(id, protocol, port, opts)
      data
    end

    # Asset Service User Groups
    # Returns the user groups enumerated on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesGroupAccount, Fixnum, Hash)>] ResourcesGroupAccount data, response status code and response headers
    def get_asset_service_user_groups_with_http_info(id, protocol, port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_service_user_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_service_user_groups"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling AssetApi.get_asset_service_user_groups"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ip', 'icmp', 'igmp', 'ggp', 'tcp', 'pup', 'udp', 'idp', 'esp', 'nd', 'raw'].include?(protocol)
        fail ArgumentError, "invalid value for 'protocol', must be one of ip, icmp, igmp, ggp, tcp, pup, udp, idp, esp, nd, raw"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AssetApi.get_asset_service_user_groups"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/services/{protocol}/{port}/user_groups'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'protocol' + '}', protocol.to_s).sub('{' + 'port' + '}', port.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesGroupAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_service_user_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Service Users
    # Returns the users enumerated on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesUserAccount]
    def get_asset_service_users(id, protocol, port, opts = {})
      data, _status_code, _headers = get_asset_service_users_with_http_info(id, protocol, port, opts)
      data
    end

    # Asset Service Users
    # Returns the users enumerated on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesUserAccount, Fixnum, Hash)>] ResourcesUserAccount data, response status code and response headers
    def get_asset_service_users_with_http_info(id, protocol, port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_service_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_service_users"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling AssetApi.get_asset_service_users"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ip', 'icmp', 'igmp', 'ggp', 'tcp', 'pup', 'udp', 'idp', 'esp', 'nd', 'raw'].include?(protocol)
        fail ArgumentError, "invalid value for 'protocol', must be one of ip, icmp, igmp, ggp, tcp, pup, udp, idp, esp, nd, raw"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AssetApi.get_asset_service_users"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/services/{protocol}/{port}/users'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'protocol' + '}', protocol.to_s).sub('{' + 'port' + '}', port.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesUserAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_service_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Service Web Application
    # Returns a web application running on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param web_application_id The identifier of the web application.
    # @param [Hash] opts the optional parameters
    # @return [WebApplication]
    def get_asset_service_web_application(id, protocol, port, web_application_id, opts = {})
      data, _status_code, _headers = get_asset_service_web_application_with_http_info(id, protocol, port, web_application_id, opts)
      data
    end

    # Asset Service Web Application
    # Returns a web application running on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param web_application_id The identifier of the web application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebApplication, Fixnum, Hash)>] WebApplication data, response status code and response headers
    def get_asset_service_web_application_with_http_info(id, protocol, port, web_application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_service_web_application ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_service_web_application"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling AssetApi.get_asset_service_web_application"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ip', 'icmp', 'igmp', 'ggp', 'tcp', 'pup', 'udp', 'idp', 'esp', 'nd', 'raw'].include?(protocol)
        fail ArgumentError, "invalid value for 'protocol', must be one of ip, icmp, igmp, ggp, tcp, pup, udp, idp, esp, nd, raw"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AssetApi.get_asset_service_web_application"
      end
      # verify the required parameter 'web_application_id' is set
      if @api_client.config.client_side_validation && web_application_id.nil?
        fail ArgumentError, "Missing the required parameter 'web_application_id' when calling AssetApi.get_asset_service_web_application"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/services/{protocol}/{port}/web_applications/{webApplicationId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'protocol' + '}', protocol.to_s).sub('{' + 'port' + '}', port.to_s).sub('{' + 'webApplicationId' + '}', web_application_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebApplication')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_service_web_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Service Web Applications
    # Returns the web applications running on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithWebApplicationIDLink]
    def get_asset_service_web_applications(id, protocol, port, opts = {})
      data, _status_code, _headers = get_asset_service_web_applications_with_http_info(id, protocol, port, opts)
      data
    end

    # Asset Service Web Applications
    # Returns the web applications running on a port and protocol on an asset.
    # @param id The identifier of the asset.
    # @param protocol The protocol of the service.
    # @param port The port of the service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithWebApplicationIDLink, Fixnum, Hash)>] ReferencesWithWebApplicationIDLink data, response status code and response headers
    def get_asset_service_web_applications_with_http_info(id, protocol, port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_service_web_applications ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_service_web_applications"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling AssetApi.get_asset_service_web_applications"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['ip', 'icmp', 'igmp', 'ggp', 'tcp', 'pup', 'udp', 'idp', 'esp', 'nd', 'raw'].include?(protocol)
        fail ArgumentError, "invalid value for 'protocol', must be one of ip, icmp, igmp, ggp, tcp, pup, udp, idp, esp, nd, raw"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling AssetApi.get_asset_service_web_applications"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/services/{protocol}/{port}/web_applications'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'protocol' + '}', protocol.to_s).sub('{' + 'port' + '}', port.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithWebApplicationIDLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_service_web_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Services
    # Returns the services discovered on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [ReferencesWithReferenceWithEndpointIDLinkServiceLink]
    def get_asset_services(id, opts = {})
      data, _status_code, _headers = get_asset_services_with_http_info(id, opts)
      data
    end

    # Asset Services
    # Returns the services discovered on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReferencesWithReferenceWithEndpointIDLinkServiceLink, Fixnum, Hash)>] ReferencesWithReferenceWithEndpointIDLinkServiceLink data, response status code and response headers
    def get_asset_services_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_services ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_services"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/services'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReferencesWithReferenceWithEndpointIDLinkServiceLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Software
    # Returns the software on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesSoftware]
    def get_asset_software(id, opts = {})
      data, _status_code, _headers = get_asset_software_with_http_info(id, opts)
      data
    end

    # Asset Software
    # Returns the software on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesSoftware, Fixnum, Hash)>] ResourcesSoftware data, response status code and response headers
    def get_asset_software_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_software ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_software"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/software'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesSoftware')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_software\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Tags
    # Returns tags assigned to an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesAssetTag]
    def get_asset_tags(id, opts = {})
      data, _status_code, _headers = get_asset_tags_with_http_info(id, opts)
      data
    end

    # Asset Tags
    # Returns tags assigned to an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesAssetTag, Fixnum, Hash)>] ResourcesAssetTag data, response status code and response headers
    def get_asset_tags_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_tags ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_tags"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/tags'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesAssetTag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset User Groups
    # Returns user groups enumerated on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesGroupAccount]
    def get_asset_user_groups(id, opts = {})
      data, _status_code, _headers = get_asset_user_groups_with_http_info(id, opts)
      data
    end

    # Asset User Groups
    # Returns user groups enumerated on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesGroupAccount, Fixnum, Hash)>] ResourcesGroupAccount data, response status code and response headers
    def get_asset_user_groups_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_user_groups ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_user_groups"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/user_groups'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesGroupAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_user_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Users
    # Returns users enumerated on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesUserAccount]
    def get_asset_users(id, opts = {})
      data, _status_code, _headers = get_asset_users_with_http_info(id, opts)
      data
    end

    # Asset Users
    # Returns users enumerated on an asset.
    # @param id The identifier of the asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesUserAccount, Fixnum, Hash)>] ResourcesUserAccount data, response status code and response headers
    def get_asset_users_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_asset_users ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_asset_users"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/users'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourcesUserAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_asset_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assets
    # Returns all assets for which you have access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfAsset]
    def get_assets(opts = {})
      data, _status_code, _headers = get_assets_with_http_info(opts)
      data
    end

    # Assets
    # Returns all assets for which you have access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfAsset, Fixnum, Hash)>] PageOfAsset data, response status code and response headers
    def get_assets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_assets ...'
      end
      # resource path
      local_var_path = '/api/3/assets'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfAsset')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Operating System
    # Returns the details for an operating system.
    # @param id The identifier of the operating system.
    # @param [Hash] opts the optional parameters
    # @return [OperatingSystem]
    def get_operating_system(id, opts = {})
      data, _status_code, _headers = get_operating_system_with_http_info(id, opts)
      data
    end

    # Operating System
    # Returns the details for an operating system.
    # @param id The identifier of the operating system.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OperatingSystem, Fixnum, Hash)>] OperatingSystem data, response status code and response headers
    def get_operating_system_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_operating_system ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_operating_system"
      end
      # resource path
      local_var_path = '/api/3/operating_systems/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OperatingSystem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_operating_system\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Operating Systems
    # Returns all operating systems discovered across all assets. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfOperatingSystem]
    def get_operating_systems(opts = {})
      data, _status_code, _headers = get_operating_systems_with_http_info(opts)
      data
    end

    # Operating Systems
    # Returns all operating systems discovered across all assets. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfOperatingSystem, Fixnum, Hash)>] PageOfOperatingSystem data, response status code and response headers
    def get_operating_systems_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_operating_systems ...'
      end
      # resource path
      local_var_path = '/api/3/operating_systems'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfOperatingSystem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_operating_systems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Software
    # Returns the details for software.
    # @param id The identifier of the software.
    # @param [Hash] opts the optional parameters
    # @return [Software]
    def get_software(id, opts = {})
      data, _status_code, _headers = get_software_with_http_info(id, opts)
      data
    end

    # Software
    # Returns the details for software.
    # @param id The identifier of the software.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Software, Fixnum, Hash)>] Software data, response status code and response headers
    def get_software_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_software ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.get_software"
      end
      # resource path
      local_var_path = '/api/3/software/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Software')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_software\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Software
    # Returns all software enumerated on any asset.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve. (default to 0)
    # @option opts [Integer] :size The number of records per page to retrieve. (default to 10)
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [PageOfSoftware]
    def get_softwares(opts = {})
      data, _status_code, _headers = get_softwares_with_http_info(opts)
      data
    end

    # Software
    # Returns all software enumerated on any asset.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The index of the page (zero-based) to retrieve.
    # @option opts [Integer] :size The number of records per page to retrieve.
    # @option opts [Array<String>] :sort The criteria to sort the records by, in the format: &#x60;property[,ASC|DESC]&#x60;. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
    # @return [Array<(PageOfSoftware, Fixnum, Hash)>] PageOfSoftware data, response status code and response headers
    def get_softwares_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.get_softwares ...'
      end
      # resource path
      local_var_path = '/api/3/software'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOfSoftware')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#get_softwares\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Asset Tag
    # Removes the specified tag from the asset's tags.
    # @param id The identifier of the asset.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Links]
    def remove_asset_tag(id, tag_id, opts = {})
      data, _status_code, _headers = remove_asset_tag_with_http_info(id, tag_id, opts)
      data
    end

    # Asset Tag
    # Removes the specified tag from the asset&#39;s tags.
    # @param id The identifier of the asset.
    # @param tag_id The identifier of the tag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Links, Fixnum, Hash)>] Links data, response status code and response headers
    def remove_asset_tag_with_http_info(id, tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetApi.remove_asset_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetApi.remove_asset_tag"
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling AssetApi.remove_asset_tag"
      end
      # resource path
      local_var_path = '/api/3/assets/{id}/tags/{tagId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'tagId' + '}', tag_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Links')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetApi#remove_asset_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
