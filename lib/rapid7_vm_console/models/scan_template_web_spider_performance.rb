=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class ScanTemplateWebSpiderPerformance
    # The names of HTTP Daemons (HTTPd) to skip when spidering. For example, `\"CUPS\"`.
    attr_accessor :http_daemons_to_skip

    # The directory depth limit for web spidering. Limiting directory depth can save significant time, especially with large sites. A value of `0` signifies unlimited directory traversal. Defaults to `6`.
    attr_accessor :maximum_directory_levels

    # The maximum number of unique host names that the spider may resolve. This function adds substantial time to the spidering process, especially with large Web sites, because of frequent cross-link checking involved. Defaults to `100`.
    attr_accessor :maximum_foreign_hosts

    # The maximum depth of links to traverse when spidering. Defaults to `6`.
    attr_accessor :maximum_link_depth

    # The maximum the number of pages that are spidered. This is a time-saving measure for large sites. Defaults to `3000`.
    attr_accessor :maximum_pages

    # The maximum the number of times to retry a request after a failure. A value of `0` means no retry attempts are made. Defaults to `2`.
    attr_accessor :maximum_retries

    # The maximum length of time to web spider. This limit prevents scans from taking longer than the allotted scan schedule. A value of `PT0S` means no limit is applied. The acceptable range is `PT1M` to `PT16666.6667H`.
    attr_accessor :maximum_time

    # The duration to wait for a response from a target web server. The value is specified as a ISO8601 duration and can range from `PT0S` (0ms) to `P1H` (1 hour). Defaults to `PT2M`.
    attr_accessor :response_timeout

    # The number of threads to use per web server being spidered. Defaults to `3`.
    attr_accessor :threads_per_server

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'http_daemons_to_skip' => :'httpDaemonsToSkip',
        :'maximum_directory_levels' => :'maximumDirectoryLevels',
        :'maximum_foreign_hosts' => :'maximumForeignHosts',
        :'maximum_link_depth' => :'maximumLinkDepth',
        :'maximum_pages' => :'maximumPages',
        :'maximum_retries' => :'maximumRetries',
        :'maximum_time' => :'maximumTime',
        :'response_timeout' => :'responseTimeout',
        :'threads_per_server' => :'threadsPerServer'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'http_daemons_to_skip' => :'Array<String>',
        :'maximum_directory_levels' => :'Integer',
        :'maximum_foreign_hosts' => :'Integer',
        :'maximum_link_depth' => :'Integer',
        :'maximum_pages' => :'Integer',
        :'maximum_retries' => :'Integer',
        :'maximum_time' => :'String',
        :'response_timeout' => :'String',
        :'threads_per_server' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'httpDaemonsToSkip')
        if (value = attributes[:'httpDaemonsToSkip']).is_a?(Array)
          self.http_daemons_to_skip = value
        end
      end

      if attributes.has_key?(:'maximumDirectoryLevels')
        self.maximum_directory_levels = attributes[:'maximumDirectoryLevels']
      end

      if attributes.has_key?(:'maximumForeignHosts')
        self.maximum_foreign_hosts = attributes[:'maximumForeignHosts']
      end

      if attributes.has_key?(:'maximumLinkDepth')
        self.maximum_link_depth = attributes[:'maximumLinkDepth']
      end

      if attributes.has_key?(:'maximumPages')
        self.maximum_pages = attributes[:'maximumPages']
      end

      if attributes.has_key?(:'maximumRetries')
        self.maximum_retries = attributes[:'maximumRetries']
      end

      if attributes.has_key?(:'maximumTime')
        self.maximum_time = attributes[:'maximumTime']
      end

      if attributes.has_key?(:'responseTimeout')
        self.response_timeout = attributes[:'responseTimeout']
      end

      if attributes.has_key?(:'threadsPerServer')
        self.threads_per_server = attributes[:'threadsPerServer']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@maximum_directory_levels.nil? && @maximum_directory_levels > 100
        invalid_properties.push('invalid value for "maximum_directory_levels", must be smaller than or equal to 100.')
      end

      if !@maximum_directory_levels.nil? && @maximum_directory_levels < 1
        invalid_properties.push('invalid value for "maximum_directory_levels", must be greater than or equal to 1.')
      end

      if !@maximum_link_depth.nil? && @maximum_link_depth > 100
        invalid_properties.push('invalid value for "maximum_link_depth", must be smaller than or equal to 100.')
      end

      if !@maximum_link_depth.nil? && @maximum_link_depth < 0
        invalid_properties.push('invalid value for "maximum_link_depth", must be greater than or equal to 0.')
      end

      if !@maximum_pages.nil? && @maximum_pages > 1000000
        invalid_properties.push('invalid value for "maximum_pages", must be smaller than or equal to 1000000.')
      end

      if !@maximum_pages.nil? && @maximum_pages < 0
        invalid_properties.push('invalid value for "maximum_pages", must be greater than or equal to 0.')
      end

      if !@maximum_retries.nil? && @maximum_retries > 999
        invalid_properties.push('invalid value for "maximum_retries", must be smaller than or equal to 999.')
      end

      if !@maximum_retries.nil? && @maximum_retries < 0
        invalid_properties.push('invalid value for "maximum_retries", must be greater than or equal to 0.')
      end

      if !@threads_per_server.nil? && @threads_per_server > 999
        invalid_properties.push('invalid value for "threads_per_server", must be smaller than or equal to 999.')
      end

      if !@threads_per_server.nil? && @threads_per_server < 0
        invalid_properties.push('invalid value for "threads_per_server", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@maximum_directory_levels.nil? && @maximum_directory_levels > 100
      return false if !@maximum_directory_levels.nil? && @maximum_directory_levels < 1
      return false if !@maximum_link_depth.nil? && @maximum_link_depth > 100
      return false if !@maximum_link_depth.nil? && @maximum_link_depth < 0
      return false if !@maximum_pages.nil? && @maximum_pages > 1000000
      return false if !@maximum_pages.nil? && @maximum_pages < 0
      return false if !@maximum_retries.nil? && @maximum_retries > 999
      return false if !@maximum_retries.nil? && @maximum_retries < 0
      return false if !@threads_per_server.nil? && @threads_per_server > 999
      return false if !@threads_per_server.nil? && @threads_per_server < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] maximum_directory_levels Value to be assigned
    def maximum_directory_levels=(maximum_directory_levels)
      if !maximum_directory_levels.nil? && maximum_directory_levels > 100
        fail ArgumentError, 'invalid value for "maximum_directory_levels", must be smaller than or equal to 100.'
      end

      if !maximum_directory_levels.nil? && maximum_directory_levels < 1
        fail ArgumentError, 'invalid value for "maximum_directory_levels", must be greater than or equal to 1.'
      end

      @maximum_directory_levels = maximum_directory_levels
    end

    # Custom attribute writer method with validation
    # @param [Object] maximum_link_depth Value to be assigned
    def maximum_link_depth=(maximum_link_depth)
      if !maximum_link_depth.nil? && maximum_link_depth > 100
        fail ArgumentError, 'invalid value for "maximum_link_depth", must be smaller than or equal to 100.'
      end

      if !maximum_link_depth.nil? && maximum_link_depth < 0
        fail ArgumentError, 'invalid value for "maximum_link_depth", must be greater than or equal to 0.'
      end

      @maximum_link_depth = maximum_link_depth
    end

    # Custom attribute writer method with validation
    # @param [Object] maximum_pages Value to be assigned
    def maximum_pages=(maximum_pages)
      if !maximum_pages.nil? && maximum_pages > 1000000
        fail ArgumentError, 'invalid value for "maximum_pages", must be smaller than or equal to 1000000.'
      end

      if !maximum_pages.nil? && maximum_pages < 0
        fail ArgumentError, 'invalid value for "maximum_pages", must be greater than or equal to 0.'
      end

      @maximum_pages = maximum_pages
    end

    # Custom attribute writer method with validation
    # @param [Object] maximum_retries Value to be assigned
    def maximum_retries=(maximum_retries)
      if !maximum_retries.nil? && maximum_retries > 999
        fail ArgumentError, 'invalid value for "maximum_retries", must be smaller than or equal to 999.'
      end

      if !maximum_retries.nil? && maximum_retries < 0
        fail ArgumentError, 'invalid value for "maximum_retries", must be greater than or equal to 0.'
      end

      @maximum_retries = maximum_retries
    end

    # Custom attribute writer method with validation
    # @param [Object] threads_per_server Value to be assigned
    def threads_per_server=(threads_per_server)
      if !threads_per_server.nil? && threads_per_server > 999
        fail ArgumentError, 'invalid value for "threads_per_server", must be smaller than or equal to 999.'
      end

      if !threads_per_server.nil? && threads_per_server < 0
        fail ArgumentError, 'invalid value for "threads_per_server", must be greater than or equal to 0.'
      end

      @threads_per_server = threads_per_server
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          http_daemons_to_skip == o.http_daemons_to_skip &&
          maximum_directory_levels == o.maximum_directory_levels &&
          maximum_foreign_hosts == o.maximum_foreign_hosts &&
          maximum_link_depth == o.maximum_link_depth &&
          maximum_pages == o.maximum_pages &&
          maximum_retries == o.maximum_retries &&
          maximum_time == o.maximum_time &&
          response_timeout == o.response_timeout &&
          threads_per_server == o.threads_per_server
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [http_daemons_to_skip, maximum_directory_levels, maximum_foreign_hosts, maximum_link_depth, maximum_pages, maximum_retries, maximum_time, response_timeout, threads_per_server].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
