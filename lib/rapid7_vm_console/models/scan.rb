=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class Scan
    # The number of assets found in the scan.
    attr_accessor :assets

    # The duration of the scan in ISO8601 format.
    attr_accessor :duration

    # The end time of the scan in ISO8601 format.
    attr_accessor :end_time

    # The identifier of the scan engine.
    attr_accessor :engine_id

    # The name of the scan engine.
    attr_accessor :engine_name

    # The identifier of the scan.
    attr_accessor :id

    # Hypermedia links to corresponding or related resources.
    attr_accessor :links

    # The reason for the scan status.
    attr_accessor :message

    # The user-driven scan name for the scan.
    attr_accessor :scan_name

    # The scan type (automated, manual, scheduled). 
    attr_accessor :scan_type

    # The start time of the scan in ISO8601 format.
    attr_accessor :start_time

    # The name of the user that started the scan.
    attr_accessor :started_by

    # The scan status.
    attr_accessor :status

    # The vulnerability synopsis of the scan.
    attr_accessor :vulnerabilities

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'assets' => :'assets',
        :'duration' => :'duration',
        :'end_time' => :'endTime',
        :'engine_id' => :'engineId',
        :'engine_name' => :'engineName',
        :'id' => :'id',
        :'links' => :'links',
        :'message' => :'message',
        :'scan_name' => :'scanName',
        :'scan_type' => :'scanType',
        :'start_time' => :'startTime',
        :'started_by' => :'startedBy',
        :'status' => :'status',
        :'vulnerabilities' => :'vulnerabilities'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'assets' => :'Integer',
        :'duration' => :'String',
        :'end_time' => :'String',
        :'engine_id' => :'Integer',
        :'engine_name' => :'String',
        :'id' => :'Integer',
        :'links' => :'Array<Link>',
        :'message' => :'String',
        :'scan_name' => :'String',
        :'scan_type' => :'String',
        :'start_time' => :'String',
        :'started_by' => :'String',
        :'status' => :'String',
        :'vulnerabilities' => :'Vulnerabilities'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'assets')
        self.assets = attributes[:'assets']
      end

      if attributes.has_key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.has_key?(:'endTime')
        self.end_time = attributes[:'endTime']
      end

      if attributes.has_key?(:'engineId')
        self.engine_id = attributes[:'engineId']
      end

      if attributes.has_key?(:'engineName')
        self.engine_name = attributes[:'engineName']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.has_key?(:'scanName')
        self.scan_name = attributes[:'scanName']
      end

      if attributes.has_key?(:'scanType')
        self.scan_type = attributes[:'scanType']
      end

      if attributes.has_key?(:'startTime')
        self.start_time = attributes[:'startTime']
      end

      if attributes.has_key?(:'startedBy')
        self.started_by = attributes[:'startedBy']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'vulnerabilities')
        self.vulnerabilities = attributes[:'vulnerabilities']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['aborted', 'unknown', 'running', 'finished', 'stopped', 'error', 'paused', 'dispatched', 'integrating'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['aborted', 'unknown', 'running', 'finished', 'stopped', 'error', 'paused', 'dispatched', 'integrating'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          assets == o.assets &&
          duration == o.duration &&
          end_time == o.end_time &&
          engine_id == o.engine_id &&
          engine_name == o.engine_name &&
          id == o.id &&
          links == o.links &&
          message == o.message &&
          scan_name == o.scan_name &&
          scan_type == o.scan_type &&
          start_time == o.start_time &&
          started_by == o.started_by &&
          status == o.status &&
          vulnerabilities == o.vulnerabilities
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [assets, duration, end_time, engine_id, engine_name, id, links, message, scan_name, scan_type, start_time, started_by, status, vulnerabilities].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
