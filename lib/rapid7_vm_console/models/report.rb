=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class Report
    # If the template is `baseline-comparison` or `executive-overview` the baseline scan to compare against. This can be the `first` scan, the `previous` scan, or a scan as of a specified date. Defaults to `previous`.
    attr_accessor :baseline

    # The name of the bureau for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.
    attr_accessor :bureau

    # The name of the component for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.
    attr_accessor :component

    # Configuration for database export. Only used when the format is `\"database-export\"`.
    attr_accessor :database

    # Email distribution settings for the report.
    attr_accessor :email

    # The name of the enclave for a CyberScope report. Only used when the format is `\"cyberscope-xml\"`.
    attr_accessor :enclave

    # Filters applied to the contents of the report. The supported filters for a report vary  by format and template.  <div class=\"properties\">  <div class=\"property-info\">  <span class=\"property-name\">categories</span> <span class=\"param-type complex\">Object</span>  <div class=\"redoc-markdown-block\">The vulnerability categories to include or exclude in the report. Only included or excluded may be specified, not both.</div> </div>  <div class=\"properties nested\">  <div class=\"property-info\">  <span class=\"property-name\">included</span> <span class=\"param-type param-array-format integer\">Array[string]</span>  <div class=\"redoc-markdown-block\">The identifiers of the vulnerability categories to included in the report.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">excluded</span> <span class=\"param-type param-array-format integer\">Array[string]</span>  <div class=\"redoc-markdown-block\">The identifiers of the vulnerability categories to exclude in the report.</div>  </div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">severity</span> <span class=\"param-type\">string</span>  <div class=\"param-enum\">  <span class=\"param-enum-value string\">\"all\"</span>  <span class=\"param-enum-value string\">\"critical\"</span>  <span class=\"param-enum-value string\">\"critical-and-severe\"</span>  </div>  <div class=\"redoc-markdown-block\">The vulnerability severities to include in the report.</div> </div>  <div class=\"property-info\">  <span class=\"property-name\">statuses</span> <span class=\"param-type param-array-format integer\">Array[string]</span>  <div class=\"param-enum\">  <span class=\"param-enum-value string\">\"vulnerable\"</span>  <span class=\"param-enum-value string\">\"vulnerable-version\"</span>  <span class=\"param-enum-value string\">\"potentially-vulnerable\"</span>  <span class=\"param-enum-value string\">\"vulnerable-and-validated\"</span>  </div>  <div class=\"redoc-markdown-block\">The vulnerability statuses to include in the report. If <code>\"vulnerable-and-validated\"</code> is selected  no other values can be specified. </div>  </div>  </div>  The following filter elements may be defined for non-templatized report formats:  | Format                                | Categories     | Severity   | Statuses   |  | ------------------------------------- |:--------------:|:----------:|:----------:|  | `arf-xml`                             |                |            |            |  | `csv-export`                          | &check;        | &check;    | &check;    |  | `cyberscope-xml`                      |                |            |            |  | `database-export`                     |                |            |            |  | `nexpose-simple-xml`                  | &check;        | &check;    |            |  | `oval-xml`                            |                |            |            |  | `qualys-xml`                          | &check;        | &check;    |            |  | `scap-xml`                            | &check;        | &check;    |            |  | `sql-query`                           | &check;        | &check;    | &check;    |  | `xccdf-csv`                           |                |            |            |  | `xccdf-xml`                           | &check;        | &check;    |            |  | `xml-export`                          | &check;        | &check;    | &check;    |  | `xml-export-v2`                       | &check;        | &check;    | &check;    |   The following filter elements may be defined for templatized report formats:  | Template                                | Categories     | Severity   | Statuses   |  | --------------------------------------- |:--------------:|:----------:|:----------:|  | `audit-report`                          | &check;        | &check;    |            |  | `baseline-comparison`                   |                |            |            |  | `basic-vulnerability-check-results`     | &check;        | &check;    | &check;    |  | `executive-overview`                    |                |            |            |  | `highest-risk-vulns`                    |                |            |            |  | `pci-attestation-v12`                   |                |            |            |  | `pci-executive-summary-v12`             |                |            |            |  | `pci-vuln-details-v12`                  |                |            |            |  | `policy-details`                        | &check;        | &check;    | &check;    |  | `policy-eval`                           |                |            |            |  | `policy-summary`                        | &check;        | &check;    | &check;    |  | `prioritized-remediations`              | &check;        | &check;    | &check;    |  | `prioritized-remediations-with-details` | &check;        | &check;    | &check;    |  | `r7-discovered-assets`                  | &check;        | &check;    | &check;    |  | `r7-vulnerability-exceptions`           | &check;        | &check;    | &check;    |  | `remediation-plan`                      | &check;        | &check;    |            |  | `report-card`                           | &check;        | &check;    |            |  | `risk-scorecard`                        | &check;        | &check;    | &check;    |  | `rule-breakdown-summary`                | &check;        | &check;    | &check;    |  | `top-policy-remediations`               | &check;        | &check;    | &check;    |  | `top-policy-remediations-with-details`  | &check;        | &check;    | &check;    |  | `top-riskiest-assets`                   | &check;        | &check;    | &check;    |  | `top-vulnerable-assets`                 | &check;        | &check;    | &check;    |  | `vulnerability-trends`                  | &check;        | &check;    | &check;    |  
    attr_accessor :filters

    # The output format of the report. The format will restrict the available templates and parameters that can be specified.
    attr_accessor :format

    # The recurring frequency with which to generate the report.
    attr_accessor :frequency

    # The identifier of the report.
    attr_accessor :id

    # The locale (language) in which the report is generated
    attr_accessor :language

    # Hypermedia links to corresponding or related resources.
    attr_accessor :links

    # The name of the report.
    attr_accessor :name

    # The organization used for a XCCDF XML report. Only used when the format is `\"xccdf-xml\"`.
    attr_accessor :organization

    # The identifier of the report owner.
    attr_accessor :owner

    # If the template is `rule-breakdown-summary`, `top-policy-remediations`, or `top-policy-remediations-with-details` the identifiers of the policies to report against.
    attr_accessor :policies

    # The policy to report on. Only used when the format is `\"oval-xml\"`, `\"\"xccdf-csv\"`, or `\"xccdf-xml\"`.
    attr_accessor :policy

    # SQL query to run against the Reporting Data Model. Only used when the format is `\"sql-query\"`.
    attr_accessor :query

    # If the template is `vulnerability-trends`, `r7-vulnerability-exceptions`, or `r7-discovered-assets` the date range to trend over.
    attr_accessor :range

    # If the template is `prioritized-remediations`, `prioritized-remediations-with-details`, `top-policy-remediations`, or `top-policy-remediations-with-details` the remediation display settings.
    attr_accessor :remediation

    # Configuration details for risk trending output.
    attr_accessor :risk_trend

    # The scope of the report. Scope is an object that has the following properties that vary by format and template:  <div class=\"properties\">  <div class=\"property-info\">  <span class=\"property-name\">assets</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the assets to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">sites</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the sites to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">assetGroups</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the asset to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">tags</span> <span class=\"param-type param-array-format integer\">Array[integer &lt;int32&gt;]</span>  <div class=\"redoc-markdown-block\">The identifiers of the tag to report on.</div>  </div>  <div class=\"property-info\">  <span class=\"property-name\">scan</span> <span class=\"param-type param-array-format integer\">integer &lt;int32&gt;</span>  <div class=\"redoc-markdown-block\">The identifier of the scan to report on.</div>  </div>  </div>  The following scope elements may be defined for non-templatized report formats:  | Format                                | Assets     | Sites   | Asset Groups | Tags    | Scan      |  | ------------------------------------- |:----------:|:-------:|:------------:|:-------:|:---------:|  | `arf-xml`                             | &check;    | &check; | &check;      | &check; |           |  | `csv-export`                          | &check;    | &check; | &check;      | &check; | &check;   |  | `cyberscope-xml`                      | &check;    | &check; | &check;      | &check; | &check;   |  | `database-export`                     |            | &check; |              |         |           |  | `nexpose-simple-xml`                  | &check;    | &check; | &check;      | &check; | &check;   |  | `oval-xml`                            | &check;    | &check; | &check;      | &check; |           |  | `qualys-xml`                          | &check;    | &check; | &check;      | &check; | &check;   |  | `scap-xml`                            | &check;    | &check; | &check;      | &check; | &check;   |  | `sql-query`                           | &check;    | &check; | &check;      | &check; | &check;   |  | `xccdf-csv`                           | &check;    |         |              |         |           |  | `xccdf-xml`                           | &check;    | &check; | &check;      | &check; | &check;   |  | `xml-export`                          | &check;    | &check; | &check;      | &check; | &check;   |  | `xml-export-v2`                       | &check;    | &check; | &check;      | &check; | &check;   |   The following scope elements may be defined for templatized report formats:  | Template                                 | Assets     | Sites   | Asset Groups | Tags    | Scan    |  | -----------------------------------------|:----------:|:-------:|:------------:|:-------:|:-------:|  | `audit-report`                           | &check;    | &check; |  &check;     | &check; | &check; |  | `baseline-comparison`                    | &check;    | &check; |  &check;     | &check; |         |  | `basic-vulnerability-check-results`      | &check;    | &check; |  &check;     | &check; | &check; |  | `executive-overview`                     | &check;    | &check; |  &check;     | &check; |         |  | `highest-risk-vulns`                     | &check;    | &check; |  &check;     | &check; |         |  | `pci-attestation-v12`                    | &check;    | &check; |  &check;     | &check; | &check; |  | `pci-executive-summary-v12`              | &check;    | &check; |  &check;     | &check; | &check; |  | `pci-vuln-details-v12`                   | &check;    | &check; |  &check;     | &check; | &check; |  | `policy-details`                         | &check;    | &check; |  &check;     | &check; |         |  | `policy-eval`                            | &check;    | &check; |  &check;     | &check; |         |  | `policy-summary`                         | &check;    | &check; |  &check;     | &check; | &check; |  | `prioritized-remediations`               | &check;    | &check; |  &check;     | &check; | &check; |  | `prioritized-remediations-with-details`  | &check;    | &check; |  &check;     | &check; | &check; |  | `r7-discovered-assets`                   | &check;    | &check; |  &check;     | &check; | &check; |  | `r7-vulnerability-exceptions`            | &check;    | &check; |  &check;     | &check; | &check; |  | `remediation-plan`                       | &check;    | &check; |  &check;     | &check; | &check; |  | `report-card`                            | &check;    | &check; |  &check;     | &check; | &check; |  | `risk-scorecard`                         | &check;    | &check; |  &check;     | &check; |         |  | `rule-breakdown-summary`                 | &check;    | &check; |  &check;     | &check; |         |  | `top-policy-remediations`                | &check;    | &check; |  &check;     | &check; |         |  | `top-policy-remediations-with-details`   | &check;    | &check; |  &check;     | &check; |         |  | `top-riskiest-assets`                    | &check;    | &check; |  &check;     | &check; | &check; |  | `top-vulnerable-assets`                  | &check;    | &check; |  &check;     | &check; | &check; |  | `vulnerability-trends`                   | &check;    | &check; |  &check;     | &check; |         |  If a report supports specifying a scan as the scope and a scan is specified, no other scope elements may be defined.  In all other cases as many different types of supported scope elements can be specified in any combination. All  reports except the `sql-query` format require at least one element to be specified as the scope. 
    attr_accessor :scope

    # The additional storage location and path.
    attr_accessor :storage

    # The template for the report (only required if the format is templatized).
    attr_accessor :template

    # The timezone the report generates in, such as `\"America/Los_Angeles\"`.
    attr_accessor :timezone

    # The identifiers of the users granted explicit access to the report.
    attr_accessor :users

    # The version of the report Data Model to report against. Only used when the format is `\"sql-query\"`.
    attr_accessor :version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'baseline' => :'baseline',
        :'bureau' => :'bureau',
        :'component' => :'component',
        :'database' => :'database',
        :'email' => :'email',
        :'enclave' => :'enclave',
        :'filters' => :'filters',
        :'format' => :'format',
        :'frequency' => :'frequency',
        :'id' => :'id',
        :'language' => :'language',
        :'links' => :'links',
        :'name' => :'name',
        :'organization' => :'organization',
        :'owner' => :'owner',
        :'policies' => :'policies',
        :'policy' => :'policy',
        :'query' => :'query',
        :'range' => :'range',
        :'remediation' => :'remediation',
        :'risk_trend' => :'riskTrend',
        :'scope' => :'scope',
        :'storage' => :'storage',
        :'template' => :'template',
        :'timezone' => :'timezone',
        :'users' => :'users',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'baseline' => :'Object',
        :'bureau' => :'String',
        :'component' => :'String',
        :'database' => :'ReportConfigDatabaseResource',
        :'email' => :'ReportEmail',
        :'enclave' => :'String',
        :'filters' => :'ReportConfigFiltersResource',
        :'format' => :'String',
        :'frequency' => :'ReportFrequency',
        :'id' => :'Integer',
        :'language' => :'String',
        :'links' => :'Array<Link>',
        :'name' => :'String',
        :'organization' => :'String',
        :'owner' => :'Integer',
        :'policies' => :'Array<Integer>',
        :'policy' => :'Integer',
        :'query' => :'String',
        :'range' => :'RangeResource',
        :'remediation' => :'RemediationResource',
        :'risk_trend' => :'RiskTrendResource',
        :'scope' => :'ReportConfigScopeResource',
        :'storage' => :'ReportStorage',
        :'template' => :'String',
        :'timezone' => :'String',
        :'users' => :'Array<Integer>',
        :'version' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'baseline')
        self.baseline = attributes[:'baseline']
      end

      if attributes.has_key?(:'bureau')
        self.bureau = attributes[:'bureau']
      end

      if attributes.has_key?(:'component')
        self.component = attributes[:'component']
      end

      if attributes.has_key?(:'database')
        self.database = attributes[:'database']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'enclave')
        self.enclave = attributes[:'enclave']
      end

      if attributes.has_key?(:'filters')
        self.filters = attributes[:'filters']
      end

      if attributes.has_key?(:'format')
        self.format = attributes[:'format']
      end

      if attributes.has_key?(:'frequency')
        self.frequency = attributes[:'frequency']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'policies')
        if (value = attributes[:'policies']).is_a?(Array)
          self.policies = value
        end
      end

      if attributes.has_key?(:'policy')
        self.policy = attributes[:'policy']
      end

      if attributes.has_key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.has_key?(:'range')
        self.range = attributes[:'range']
      end

      if attributes.has_key?(:'remediation')
        self.remediation = attributes[:'remediation']
      end

      if attributes.has_key?(:'riskTrend')
        self.risk_trend = attributes[:'riskTrend']
      end

      if attributes.has_key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.has_key?(:'storage')
        self.storage = attributes[:'storage']
      end

      if attributes.has_key?(:'template')
        self.template = attributes[:'template']
      end

      if attributes.has_key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.has_key?(:'users')
        if (value = attributes[:'users']).is_a?(Array)
          self.users = value
        end
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          baseline == o.baseline &&
          bureau == o.bureau &&
          component == o.component &&
          database == o.database &&
          email == o.email &&
          enclave == o.enclave &&
          filters == o.filters &&
          format == o.format &&
          frequency == o.frequency &&
          id == o.id &&
          language == o.language &&
          links == o.links &&
          name == o.name &&
          organization == o.organization &&
          owner == o.owner &&
          policies == o.policies &&
          policy == o.policy &&
          query == o.query &&
          range == o.range &&
          remediation == o.remediation &&
          risk_trend == o.risk_trend &&
          scope == o.scope &&
          storage == o.storage &&
          template == o.template &&
          timezone == o.timezone &&
          users == o.users &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [baseline, bureau, component, database, email, enclave, filters, format, frequency, id, language, links, name, organization, owner, policies, policy, query, range, remediation, risk_trend, scope, storage, template, timezone, users, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
