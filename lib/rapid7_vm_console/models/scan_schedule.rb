=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class ScanSchedule
    # Allows one or more assets defined within the site to be scanned for this scan schedule. This property is only supported for static sites. When this property is `null`, or not defined in schedule, then all assets defined in the static site will be scanned.
    attr_accessor :assets

    # Specifies the maximum duration the scheduled scan is allowed to run. Scheduled scans that do not complete within specified duration will be paused. The scan duration are represented by the format `\"P[n]DT[n]H[n]M\"`. In these representations, the [n] is replaced by a value for each of the date and time elements that follow the [n].The following table describes each supported value:  | Value | Description |  | ---------- | ---------------- |  | P | The duration designator. It must be placed at the start of the duration representation. |  | D | The day designator that follows the value for the number of days. |  | T | The time designator that precedes the time portion of the representation. |  | H | The hour designator that follows the value for the number of hours. |  | M | The minute designator that follows the value for the number of minutes. |  For example, `\"P5DT10H30M\"` represents a duration of \"5 days, 10 hours, and 30 minutes\". Each duration designator is optional; however, at least one must be specified and it must be preceded by the `\"P\"` designator.  
    attr_accessor :duration

    # Flag indicating whether the scan schedule is enabled.
    attr_accessor :enabled

    # The identifier of the scan schedule.
    attr_accessor :id

    attr_accessor :links

    # List the next 10 dates in the future the schedule will launch. 
    attr_accessor :next_runtimes

    # Specifies the desired behavior of a repeating scheduled scan when the previous scan was paused due to reaching is maximum duration. The following table describes each supported value:  | Value | Description |  | ---------- | ---------------- |  | restart-scan | Stops the previously-paused scan and launches a new scan if the previous scan did not complete within the specified duration. If the previous scheduled scan was not paused, then a new scan is launched. |  | resume-scan | Resumes the previously-paused scan if the previous scan did not complete within the specified duration. If the previous scheduled scan was not paused, then a new scan is launched. |  
    attr_accessor :on_scan_repeat

    # Settings for repeating a scheduled scan.
    attr_accessor :repeat

    # The identifier of the scan engine to be used for this scan schedule. If not set, the site's assigned scan engine will be used.
    attr_accessor :scan_engine_id

    # A user-defined name for the scan launched by the schedule. If not explicitly set in the schedule, the scan name will be generated prior to the scan launching. Scan names must be unique within the site's scan schedules.
    attr_accessor :scan_name

    # The identifier of the scan template to be used for this scan schedule. If not set, the site's assigned scan template will be used.
    attr_accessor :scan_template_id

    # The scheduled start date and time. Date is represented in ISO 8601 format. Repeating schedules will determine the next schedule to begin based on this date and time.
    attr_accessor :start

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'assets' => :'assets',
        :'duration' => :'duration',
        :'enabled' => :'enabled',
        :'id' => :'id',
        :'links' => :'links',
        :'next_runtimes' => :'nextRuntimes',
        :'on_scan_repeat' => :'onScanRepeat',
        :'repeat' => :'repeat',
        :'scan_engine_id' => :'scanEngineId',
        :'scan_name' => :'scanName',
        :'scan_template_id' => :'scanTemplateId',
        :'start' => :'start'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'assets' => :'ScheduledScanTargets',
        :'duration' => :'String',
        :'enabled' => :'BOOLEAN',
        :'id' => :'Integer',
        :'links' => :'Array<Link>',
        :'next_runtimes' => :'Array<String>',
        :'on_scan_repeat' => :'String',
        :'repeat' => :'Repeat',
        :'scan_engine_id' => :'Integer',
        :'scan_name' => :'String',
        :'scan_template_id' => :'String',
        :'start' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'assets')
        self.assets = attributes[:'assets']
      end

      if attributes.has_key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'nextRuntimes')
        if (value = attributes[:'nextRuntimes']).is_a?(Array)
          self.next_runtimes = value
        end
      end

      if attributes.has_key?(:'onScanRepeat')
        self.on_scan_repeat = attributes[:'onScanRepeat']
      end

      if attributes.has_key?(:'repeat')
        self.repeat = attributes[:'repeat']
      end

      if attributes.has_key?(:'scanEngineId')
        self.scan_engine_id = attributes[:'scanEngineId']
      end

      if attributes.has_key?(:'scanName')
        self.scan_name = attributes[:'scanName']
      end

      if attributes.has_key?(:'scanTemplateId')
        self.scan_template_id = attributes[:'scanTemplateId']
      end

      if attributes.has_key?(:'start')
        self.start = attributes[:'start']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @enabled.nil?
        invalid_properties.push('invalid value for "enabled", enabled cannot be nil.')
      end

      if @on_scan_repeat.nil?
        invalid_properties.push('invalid value for "on_scan_repeat", on_scan_repeat cannot be nil.')
      end

      if @start.nil?
        invalid_properties.push('invalid value for "start", start cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @enabled.nil?
      return false if @on_scan_repeat.nil?
      return false if @start.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          assets == o.assets &&
          duration == o.duration &&
          enabled == o.enabled &&
          id == o.id &&
          links == o.links &&
          next_runtimes == o.next_runtimes &&
          on_scan_repeat == o.on_scan_repeat &&
          repeat == o.repeat &&
          scan_engine_id == o.scan_engine_id &&
          scan_name == o.scan_name &&
          scan_template_id == o.scan_template_id &&
          start == o.start
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [assets, duration, enabled, id, links, next_runtimes, on_scan_repeat, repeat, scan_engine_id, scan_name, scan_template_id, start].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
