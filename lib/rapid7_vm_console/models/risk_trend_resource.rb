=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class RiskTrendResource
    # Trend settings for a trend across all assets in the scope of the report.
    attr_accessor :all_assets

    # Whether all asset groups in the history of deployment or those as of the report generation time are to be included.
    attr_accessor :asset_group_membership

    # Whether to include a trend for the 5 highest-risk asset groups in the scope of the report (either the average or total risk). Only allowed if asset groups are specified in the report scope.
    attr_accessor :asset_groups

    # Whether to include a trend for the 5 highest-risk assets in the scope of the report.
    attr_accessor :assets

    # The start date of the risk trend, which can either be a duration or a specific date and time.
    attr_accessor :from

    # Whether to include a trend for the 5 highest-risk sites in the scope of the report (either the average or total risk). Only allowed if sites are specified in the report scope.
    attr_accessor :sites

    # Whether all assets tagged in the history of deployment or those tagged as of the report generation time are to be included.
    attr_accessor :tag_membership

    # Whether to include a trend for the 5 highest-risk tags for assets in the scope of the report (either the average or total risk). Only allowed if tags are specified in the report scope.
    attr_accessor :tags

    # The end date of the risk trend (empty if `from` is a duration).
    attr_accessor :to

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'all_assets' => :'allAssets',
        :'asset_group_membership' => :'assetGroupMembership',
        :'asset_groups' => :'assetGroups',
        :'assets' => :'assets',
        :'from' => :'from',
        :'sites' => :'sites',
        :'tag_membership' => :'tagMembership',
        :'tags' => :'tags',
        :'to' => :'to'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'all_assets' => :'RiskTrendAllAssetsResource',
        :'asset_group_membership' => :'String',
        :'asset_groups' => :'String',
        :'assets' => :'BOOLEAN',
        :'from' => :'String',
        :'sites' => :'String',
        :'tag_membership' => :'String',
        :'tags' => :'String',
        :'to' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'allAssets')
        self.all_assets = attributes[:'allAssets']
      end

      if attributes.has_key?(:'assetGroupMembership')
        self.asset_group_membership = attributes[:'assetGroupMembership']
      end

      if attributes.has_key?(:'assetGroups')
        self.asset_groups = attributes[:'assetGroups']
      end

      if attributes.has_key?(:'assets')
        self.assets = attributes[:'assets']
      end

      if attributes.has_key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.has_key?(:'sites')
        self.sites = attributes[:'sites']
      end

      if attributes.has_key?(:'tagMembership')
        self.tag_membership = attributes[:'tagMembership']
      end

      if attributes.has_key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.has_key?(:'to')
        self.to = attributes[:'to']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      asset_group_membership_validator = EnumAttributeValidator.new('String', ['historical', 'generation'])
      return false unless asset_group_membership_validator.valid?(@asset_group_membership)
      asset_groups_validator = EnumAttributeValidator.new('String', ['average', 'total'])
      return false unless asset_groups_validator.valid?(@asset_groups)
      from_validator = EnumAttributeValidator.new('String', ['P1Y', 'P6M', 'P3M', 'P1M', '<date>'])
      return false unless from_validator.valid?(@from)
      sites_validator = EnumAttributeValidator.new('String', ['average', 'total'])
      return false unless sites_validator.valid?(@sites)
      tag_membership_validator = EnumAttributeValidator.new('String', ['historical', 'generation'])
      return false unless tag_membership_validator.valid?(@tag_membership)
      tags_validator = EnumAttributeValidator.new('String', ['average', 'total'])
      return false unless tags_validator.valid?(@tags)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_group_membership Object to be assigned
    def asset_group_membership=(asset_group_membership)
      validator = EnumAttributeValidator.new('String', ['historical', 'generation'])
      unless validator.valid?(asset_group_membership)
        fail ArgumentError, 'invalid value for "asset_group_membership", must be one of #{validator.allowable_values}.'
      end
      @asset_group_membership = asset_group_membership
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] asset_groups Object to be assigned
    def asset_groups=(asset_groups)
      validator = EnumAttributeValidator.new('String', ['average', 'total'])
      unless validator.valid?(asset_groups)
        fail ArgumentError, 'invalid value for "asset_groups", must be one of #{validator.allowable_values}.'
      end
      @asset_groups = asset_groups
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] from Object to be assigned
    def from=(from)
      validator = EnumAttributeValidator.new('String', ['P1Y', 'P6M', 'P3M', 'P1M', '<date>'])
      unless validator.valid?(from)
        fail ArgumentError, 'invalid value for "from", must be one of #{validator.allowable_values}.'
      end
      @from = from
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sites Object to be assigned
    def sites=(sites)
      validator = EnumAttributeValidator.new('String', ['average', 'total'])
      unless validator.valid?(sites)
        fail ArgumentError, 'invalid value for "sites", must be one of #{validator.allowable_values}.'
      end
      @sites = sites
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tag_membership Object to be assigned
    def tag_membership=(tag_membership)
      validator = EnumAttributeValidator.new('String', ['historical', 'generation'])
      unless validator.valid?(tag_membership)
        fail ArgumentError, 'invalid value for "tag_membership", must be one of #{validator.allowable_values}.'
      end
      @tag_membership = tag_membership
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tags Object to be assigned
    def tags=(tags)
      validator = EnumAttributeValidator.new('String', ['average', 'total'])
      unless validator.valid?(tags)
        fail ArgumentError, 'invalid value for "tags", must be one of #{validator.allowable_values}.'
      end
      @tags = tags
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          all_assets == o.all_assets &&
          asset_group_membership == o.asset_group_membership &&
          asset_groups == o.asset_groups &&
          assets == o.assets &&
          from == o.from &&
          sites == o.sites &&
          tag_membership == o.tag_membership &&
          tags == o.tags &&
          to == o.to
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [all_assets, asset_group_membership, asset_groups, assets, from, sites, tag_membership, tags, to].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
