=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class SharedCredentialAccount
    attr_accessor :authentication_type

    attr_accessor :community_name

    attr_accessor :database

    attr_accessor :domain

    attr_accessor :enumerate_sids

    attr_accessor :notes_id_password

    attr_accessor :ntlm_hash

    attr_accessor :oracle_listener_password

    attr_accessor :password

    attr_accessor :pem_key

    attr_accessor :permission_elevation

    attr_accessor :permission_elevation_password

    attr_accessor :permission_elevation_username

    attr_accessor :privacy_password

    attr_accessor :privacy_type

    attr_accessor :private_key_password

    attr_accessor :realm

    attr_accessor :service

    attr_accessor :sid

    attr_accessor :use_windows_authentication

    attr_accessor :username

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'authentication_type' => :'authenticationType',
        :'community_name' => :'communityName',
        :'database' => :'database',
        :'domain' => :'domain',
        :'enumerate_sids' => :'enumerateSids',
        :'notes_id_password' => :'notesIDPassword',
        :'ntlm_hash' => :'ntlmHash',
        :'oracle_listener_password' => :'oracleListenerPassword',
        :'password' => :'password',
        :'pem_key' => :'pemKey',
        :'permission_elevation' => :'permissionElevation',
        :'permission_elevation_password' => :'permissionElevationPassword',
        :'permission_elevation_username' => :'permissionElevationUsername',
        :'privacy_password' => :'privacyPassword',
        :'privacy_type' => :'privacyType',
        :'private_key_password' => :'privateKeyPassword',
        :'realm' => :'realm',
        :'service' => :'service',
        :'sid' => :'sid',
        :'use_windows_authentication' => :'useWindowsAuthentication',
        :'username' => :'username'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'authentication_type' => :'String',
        :'community_name' => :'String',
        :'database' => :'String',
        :'domain' => :'String',
        :'enumerate_sids' => :'BOOLEAN',
        :'notes_id_password' => :'String',
        :'ntlm_hash' => :'String',
        :'oracle_listener_password' => :'String',
        :'password' => :'String',
        :'pem_key' => :'String',
        :'permission_elevation' => :'String',
        :'permission_elevation_password' => :'String',
        :'permission_elevation_username' => :'String',
        :'privacy_password' => :'String',
        :'privacy_type' => :'String',
        :'private_key_password' => :'String',
        :'realm' => :'String',
        :'service' => :'String',
        :'sid' => :'String',
        :'use_windows_authentication' => :'BOOLEAN',
        :'username' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'authenticationType')
        self.authentication_type = attributes[:'authenticationType']
      end

      if attributes.has_key?(:'communityName')
        self.community_name = attributes[:'communityName']
      end

      if attributes.has_key?(:'database')
        self.database = attributes[:'database']
      end

      if attributes.has_key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.has_key?(:'enumerateSids')
        self.enumerate_sids = attributes[:'enumerateSids']
      end

      if attributes.has_key?(:'notesIDPassword')
        self.notes_id_password = attributes[:'notesIDPassword']
      end

      if attributes.has_key?(:'ntlmHash')
        self.ntlm_hash = attributes[:'ntlmHash']
      end

      if attributes.has_key?(:'oracleListenerPassword')
        self.oracle_listener_password = attributes[:'oracleListenerPassword']
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.has_key?(:'pemKey')
        self.pem_key = attributes[:'pemKey']
      end

      if attributes.has_key?(:'permissionElevation')
        self.permission_elevation = attributes[:'permissionElevation']
      end

      if attributes.has_key?(:'permissionElevationPassword')
        self.permission_elevation_password = attributes[:'permissionElevationPassword']
      end

      if attributes.has_key?(:'permissionElevationUsername')
        self.permission_elevation_username = attributes[:'permissionElevationUsername']
      end

      if attributes.has_key?(:'privacyPassword')
        self.privacy_password = attributes[:'privacyPassword']
      end

      if attributes.has_key?(:'privacyType')
        self.privacy_type = attributes[:'privacyType']
      end

      if attributes.has_key?(:'privateKeyPassword')
        self.private_key_password = attributes[:'privateKeyPassword']
      end

      if attributes.has_key?(:'realm')
        self.realm = attributes[:'realm']
      end

      if attributes.has_key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.has_key?(:'sid')
        self.sid = attributes[:'sid']
      end

      if attributes.has_key?(:'useWindowsAuthentication')
        self.use_windows_authentication = attributes[:'useWindowsAuthentication']
      end

      if attributes.has_key?(:'username')
        self.username = attributes[:'username']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          authentication_type == o.authentication_type &&
          community_name == o.community_name &&
          database == o.database &&
          domain == o.domain &&
          enumerate_sids == o.enumerate_sids &&
          notes_id_password == o.notes_id_password &&
          ntlm_hash == o.ntlm_hash &&
          oracle_listener_password == o.oracle_listener_password &&
          password == o.password &&
          pem_key == o.pem_key &&
          permission_elevation == o.permission_elevation &&
          permission_elevation_password == o.permission_elevation_password &&
          permission_elevation_username == o.permission_elevation_username &&
          privacy_password == o.privacy_password &&
          privacy_type == o.privacy_type &&
          private_key_password == o.private_key_password &&
          realm == o.realm &&
          service == o.service &&
          sid == o.sid &&
          use_windows_authentication == o.use_windows_authentication &&
          username == o.username
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [authentication_type, community_name, database, domain, enumerate_sids, notes_id_password, ntlm_hash, oracle_listener_password, password, pem_key, permission_elevation, permission_elevation_password, permission_elevation_username, privacy_password, privacy_type, private_key_password, realm, service, sid, use_windows_authentication, username].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
