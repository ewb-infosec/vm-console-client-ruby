=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class PolicyOverrideScope
    # The identifier of the asset whose compliance results are to be overridden. Property is required if the property `scope` is set to either `\"specific-asset\"` or `\"specific-asset-until-next-scan\"`.
    attr_accessor :asset

    attr_accessor :links

    # The new policy rule result after the override is applied.
    attr_accessor :new_result

    # The original policy rule result before the override was applied. This property only applies to overrides with a scope of either `\"specific-asset\"` or `\"specific-asset-until-next-scan\"`.
    attr_accessor :original_result

    # The identifier of the policy rule whose compliance results are to be overridden.
    attr_accessor :rule

    # The scope of assets affected by the policy override. Can be one of the following values:  | Value                              | Description                                                                                                                                                 |  | ---------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |  | `\"all-assets\"`                     | Overrides the compliance result of all assets evaluated with the specified policy rule.                                                                     |  | `\"specific-asset\"`                 | Overrides the compliance result of a single asset evaluated with the specified policy rule.                                                                 |  | `\"specific-asset-until-next-scan\"` | Overrides the compliance result of a single asset evaluated with the specified policy rule until the next time asset is evaluated against that policy rule. |  
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'asset' => :'asset',
        :'links' => :'links',
        :'new_result' => :'newResult',
        :'original_result' => :'originalResult',
        :'rule' => :'rule',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'asset' => :'Integer',
        :'links' => :'Array<Link>',
        :'new_result' => :'String',
        :'original_result' => :'String',
        :'rule' => :'Integer',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'asset')
        self.asset = attributes[:'asset']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'newResult')
        self.new_result = attributes[:'newResult']
      end

      if attributes.has_key?(:'originalResult')
        self.original_result = attributes[:'originalResult']
      end

      if attributes.has_key?(:'rule')
        self.rule = attributes[:'rule']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @new_result.nil?
        invalid_properties.push('invalid value for "new_result", new_result cannot be nil.')
      end

      if @rule.nil?
        invalid_properties.push('invalid value for "rule", rule cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @new_result.nil?
      new_result_validator = EnumAttributeValidator.new('String', ['pass', 'fail', 'not-applicable', 'fixed'])
      return false unless new_result_validator.valid?(@new_result)
      original_result_validator = EnumAttributeValidator.new('String', ['pass', 'fail', 'error', 'unknown', 'not-applicable', 'not-checked', 'not-selected', 'informational', 'fixed'])
      return false unless original_result_validator.valid?(@original_result)
      return false if @rule.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] new_result Object to be assigned
    def new_result=(new_result)
      validator = EnumAttributeValidator.new('String', ['pass', 'fail', 'not-applicable', 'fixed'])
      unless validator.valid?(new_result)
        fail ArgumentError, 'invalid value for "new_result", must be one of #{validator.allowable_values}.'
      end
      @new_result = new_result
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] original_result Object to be assigned
    def original_result=(original_result)
      validator = EnumAttributeValidator.new('String', ['pass', 'fail', 'error', 'unknown', 'not-applicable', 'not-checked', 'not-selected', 'informational', 'fixed'])
      unless validator.valid?(original_result)
        fail ArgumentError, 'invalid value for "original_result", must be one of #{validator.allowable_values}.'
      end
      @original_result = original_result
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          asset == o.asset &&
          links == o.links &&
          new_result == o.new_result &&
          original_result == o.original_result &&
          rule == o.rule &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [asset, links, new_result, original_result, rule, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
