=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class VulnerabilityCvssV3
    # Access Complexity (AC) component with measures the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.  | Access Complexity      | Description                                                              |  | ---------------------- | ------------------------------------------------------------------------ |  | Low (`\"L\"`)            | Specialized access conditions or extenuating circumstances do not exist. |  | High (`\"H\"`)           | A successful attack depends on conditions beyond the attacker's control. |
    attr_accessor :attack_complexity

    # Attack Vector (AV) component which measures context by which vulnerability exploitation is possible.  | Access Vector          | Description                                                              |  | ---------------------- | ------------------------------------------------------------------------ |  | Local (`\"L\"`)          | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |  | Adjacent (`\"A\"`)       | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |  | Network (`\"N\"`)        | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed \"remotely exploitable\". |  
    attr_accessor :attack_vector

    # Availability Impact (A) measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.  | Availability Impact        | Description  |  | -------------------------- | ------------ |  | High (`\"H\"`)               | There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). |  | Low (`\"L\"`)                | There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. |  | None (`\"N\"`)               | There is no impact to availability within the impacted component. |
    attr_accessor :availability_impact

    # Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.  | Confidentiality Impact     | Description  |  | -------------------------- | ------------ |  | High (`\"H\"`)               | There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. |  | Low (`\"L\"`)                | There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. |  | None (`\"N\"`)               | There is no loss of confidentiality within the impacted component. |
    attr_accessor :confidentiality_impact

    # The CVSS impact score.
    attr_accessor :exploit_score

    # The CVSS exploit score.
    attr_accessor :impact_score

    # Integrity Impact (I) measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and veracity of information.  | Integrity Impact    | Description  |  | ------------------- | ------------ |  | High (`\"H\"`)        | There is a total loss of integrity, or a complete loss of protection. |  | Low (`\"L\"`)         | Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. |  | None (`\"N\"`)        | There is no loss of integrity within the impacted component. |
    attr_accessor :integrity_impact

    # Privileges Required (PR) measures the level of privileges an attacker must possess before successfully exploiting the vulnerability.  | Privileges Required (PR)     | Description                                                              |  | ---------------------------- | ------------------------------------------------------------------------ |  | None (`\"N\"`)                 | The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack. |  | Low (`\"L\"`)                  | The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. |  | High (`\"H\"`)                 | The attacker is authorized with (i.e. requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files. |
    attr_accessor :privilege_required

    # Scope (S) measures the collection of privileges defined by a computing authority (e.g. an application, an operating system, or a sandbox environment) when granting access to computing resources (e.g. files, CPU, memory, etc). These privileges are assigned based on some method of identification and authorization.  | Scope (S)            | Description                                                              |  | -------------------- | ------------------------------------------------------------------------ |  | Unchanged (`\"U\"`)    | An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same. |  | Changed (`\"C\"`)      | An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different. |
    attr_accessor :scope

    # The CVSS score, which ranges from 0-10.
    attr_accessor :score

    # User Interaction (UI) measures the requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component.  | User Interaction (UI)        | Description                                                               |  | ---------------------------- | ------------------------------------------------------------------------- |  | None (`\"N\"`)                 | The vulnerable system can be exploited without interaction from any user. |  | Required (`\"R\"`)             | Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited. |
    attr_accessor :user_interaction

    # The <a target=\"_blank\" href=\"https://www.first.org/cvss/specification-document\">CVSS v3</a> vector.
    attr_accessor :vector

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'attack_complexity' => :'attackComplexity',
        :'attack_vector' => :'attackVector',
        :'availability_impact' => :'availabilityImpact',
        :'confidentiality_impact' => :'confidentialityImpact',
        :'exploit_score' => :'exploitScore',
        :'impact_score' => :'impactScore',
        :'integrity_impact' => :'integrityImpact',
        :'privilege_required' => :'privilegeRequired',
        :'scope' => :'scope',
        :'score' => :'score',
        :'user_interaction' => :'userInteraction',
        :'vector' => :'vector'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'attack_complexity' => :'String',
        :'attack_vector' => :'String',
        :'availability_impact' => :'String',
        :'confidentiality_impact' => :'String',
        :'exploit_score' => :'Float',
        :'impact_score' => :'Float',
        :'integrity_impact' => :'String',
        :'privilege_required' => :'String',
        :'scope' => :'String',
        :'score' => :'Float',
        :'user_interaction' => :'String',
        :'vector' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'attackComplexity')
        self.attack_complexity = attributes[:'attackComplexity']
      end

      if attributes.has_key?(:'attackVector')
        self.attack_vector = attributes[:'attackVector']
      end

      if attributes.has_key?(:'availabilityImpact')
        self.availability_impact = attributes[:'availabilityImpact']
      end

      if attributes.has_key?(:'confidentialityImpact')
        self.confidentiality_impact = attributes[:'confidentialityImpact']
      end

      if attributes.has_key?(:'exploitScore')
        self.exploit_score = attributes[:'exploitScore']
      end

      if attributes.has_key?(:'impactScore')
        self.impact_score = attributes[:'impactScore']
      end

      if attributes.has_key?(:'integrityImpact')
        self.integrity_impact = attributes[:'integrityImpact']
      end

      if attributes.has_key?(:'privilegeRequired')
        self.privilege_required = attributes[:'privilegeRequired']
      end

      if attributes.has_key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.has_key?(:'score')
        self.score = attributes[:'score']
      end

      if attributes.has_key?(:'userInteraction')
        self.user_interaction = attributes[:'userInteraction']
      end

      if attributes.has_key?(:'vector')
        self.vector = attributes[:'vector']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      attack_complexity_validator = EnumAttributeValidator.new('String', ['L', 'H'])
      return false unless attack_complexity_validator.valid?(@attack_complexity)
      attack_vector_validator = EnumAttributeValidator.new('String', ['N', 'A', 'L', 'P'])
      return false unless attack_vector_validator.valid?(@attack_vector)
      availability_impact_validator = EnumAttributeValidator.new('String', ['N', 'L', 'H'])
      return false unless availability_impact_validator.valid?(@availability_impact)
      confidentiality_impact_validator = EnumAttributeValidator.new('String', ['N', 'L', 'H'])
      return false unless confidentiality_impact_validator.valid?(@confidentiality_impact)
      integrity_impact_validator = EnumAttributeValidator.new('String', ['N', 'L', 'H'])
      return false unless integrity_impact_validator.valid?(@integrity_impact)
      privilege_required_validator = EnumAttributeValidator.new('String', ['N', 'L', 'H'])
      return false unless privilege_required_validator.valid?(@privilege_required)
      scope_validator = EnumAttributeValidator.new('String', ['U', 'C'])
      return false unless scope_validator.valid?(@scope)
      user_interaction_validator = EnumAttributeValidator.new('String', ['N', 'R'])
      return false unless user_interaction_validator.valid?(@user_interaction)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attack_complexity Object to be assigned
    def attack_complexity=(attack_complexity)
      validator = EnumAttributeValidator.new('String', ['L', 'H'])
      unless validator.valid?(attack_complexity)
        fail ArgumentError, 'invalid value for "attack_complexity", must be one of #{validator.allowable_values}.'
      end
      @attack_complexity = attack_complexity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attack_vector Object to be assigned
    def attack_vector=(attack_vector)
      validator = EnumAttributeValidator.new('String', ['N', 'A', 'L', 'P'])
      unless validator.valid?(attack_vector)
        fail ArgumentError, 'invalid value for "attack_vector", must be one of #{validator.allowable_values}.'
      end
      @attack_vector = attack_vector
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] availability_impact Object to be assigned
    def availability_impact=(availability_impact)
      validator = EnumAttributeValidator.new('String', ['N', 'L', 'H'])
      unless validator.valid?(availability_impact)
        fail ArgumentError, 'invalid value for "availability_impact", must be one of #{validator.allowable_values}.'
      end
      @availability_impact = availability_impact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confidentiality_impact Object to be assigned
    def confidentiality_impact=(confidentiality_impact)
      validator = EnumAttributeValidator.new('String', ['N', 'L', 'H'])
      unless validator.valid?(confidentiality_impact)
        fail ArgumentError, 'invalid value for "confidentiality_impact", must be one of #{validator.allowable_values}.'
      end
      @confidentiality_impact = confidentiality_impact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] integrity_impact Object to be assigned
    def integrity_impact=(integrity_impact)
      validator = EnumAttributeValidator.new('String', ['N', 'L', 'H'])
      unless validator.valid?(integrity_impact)
        fail ArgumentError, 'invalid value for "integrity_impact", must be one of #{validator.allowable_values}.'
      end
      @integrity_impact = integrity_impact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] privilege_required Object to be assigned
    def privilege_required=(privilege_required)
      validator = EnumAttributeValidator.new('String', ['N', 'L', 'H'])
      unless validator.valid?(privilege_required)
        fail ArgumentError, 'invalid value for "privilege_required", must be one of #{validator.allowable_values}.'
      end
      @privilege_required = privilege_required
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scope Object to be assigned
    def scope=(scope)
      validator = EnumAttributeValidator.new('String', ['U', 'C'])
      unless validator.valid?(scope)
        fail ArgumentError, 'invalid value for "scope", must be one of #{validator.allowable_values}.'
      end
      @scope = scope
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_interaction Object to be assigned
    def user_interaction=(user_interaction)
      validator = EnumAttributeValidator.new('String', ['N', 'R'])
      unless validator.valid?(user_interaction)
        fail ArgumentError, 'invalid value for "user_interaction", must be one of #{validator.allowable_values}.'
      end
      @user_interaction = user_interaction
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          attack_complexity == o.attack_complexity &&
          attack_vector == o.attack_vector &&
          availability_impact == o.availability_impact &&
          confidentiality_impact == o.confidentiality_impact &&
          exploit_score == o.exploit_score &&
          impact_score == o.impact_score &&
          integrity_impact == o.integrity_impact &&
          privilege_required == o.privilege_required &&
          scope == o.scope &&
          score == o.score &&
          user_interaction == o.user_interaction &&
          vector == o.vector
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [attack_complexity, attack_vector, availability_impact, confidentiality_impact, exploit_score, impact_score, integrity_impact, privilege_required, scope, score, user_interaction, vector].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
