=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class ScanTemplateAssetDiscovery
    # Whether to query Whois during discovery. Defaults to `false`.
    attr_accessor :collect_whois_information

    # The minimum certainty required for a fingerprint to be considered valid during a scan. Defaults to `0.16`.
    attr_accessor :fingerprint_minimum_certainty

    # The number of fingerprinting attempts made to determine the operating system fingerprint. Defaults to `4`.
    attr_accessor :fingerprint_retries

    # Whether to fingerprint TCP/IP stacks for hardware, operating system and software information.
    attr_accessor :ip_fingerprinting_enabled

    # Whether ARP pings are sent during asset discovery. Defaults to `true`.
    attr_accessor :send_arp_pings

    # Whether ICMP pings are sent during asset discovery. Defaults to `false`.
    attr_accessor :send_icmp_pings

    # TCP ports to send packets and perform discovery. Defaults to no ports.
    attr_accessor :tcp_ports

    # Whether TCP reset responses are treated as live assets. Defaults to `true`.
    attr_accessor :treat_tcp_reset_as_asset

    # UDP ports to send packets and perform discovery. Defaults to no ports.
    attr_accessor :udp_ports

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'collect_whois_information' => :'collectWhoisInformation',
        :'fingerprint_minimum_certainty' => :'fingerprintMinimumCertainty',
        :'fingerprint_retries' => :'fingerprintRetries',
        :'ip_fingerprinting_enabled' => :'ipFingerprintingEnabled',
        :'send_arp_pings' => :'sendArpPings',
        :'send_icmp_pings' => :'sendIcmpPings',
        :'tcp_ports' => :'tcpPorts',
        :'treat_tcp_reset_as_asset' => :'treatTcpResetAsAsset',
        :'udp_ports' => :'udpPorts'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'collect_whois_information' => :'BOOLEAN',
        :'fingerprint_minimum_certainty' => :'Float',
        :'fingerprint_retries' => :'Integer',
        :'ip_fingerprinting_enabled' => :'BOOLEAN',
        :'send_arp_pings' => :'BOOLEAN',
        :'send_icmp_pings' => :'BOOLEAN',
        :'tcp_ports' => :'Array<Integer>',
        :'treat_tcp_reset_as_asset' => :'BOOLEAN',
        :'udp_ports' => :'Array<Integer>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'collectWhoisInformation')
        self.collect_whois_information = attributes[:'collectWhoisInformation']
      end

      if attributes.has_key?(:'fingerprintMinimumCertainty')
        self.fingerprint_minimum_certainty = attributes[:'fingerprintMinimumCertainty']
      end

      if attributes.has_key?(:'fingerprintRetries')
        self.fingerprint_retries = attributes[:'fingerprintRetries']
      end

      if attributes.has_key?(:'ipFingerprintingEnabled')
        self.ip_fingerprinting_enabled = attributes[:'ipFingerprintingEnabled']
      end

      if attributes.has_key?(:'sendArpPings')
        self.send_arp_pings = attributes[:'sendArpPings']
      end

      if attributes.has_key?(:'sendIcmpPings')
        self.send_icmp_pings = attributes[:'sendIcmpPings']
      end

      if attributes.has_key?(:'tcpPorts')
        if (value = attributes[:'tcpPorts']).is_a?(Array)
          self.tcp_ports = value
        end
      end

      if attributes.has_key?(:'treatTcpResetAsAsset')
        self.treat_tcp_reset_as_asset = attributes[:'treatTcpResetAsAsset']
      end

      if attributes.has_key?(:'udpPorts')
        if (value = attributes[:'udpPorts']).is_a?(Array)
          self.udp_ports = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@fingerprint_minimum_certainty.nil? && @fingerprint_minimum_certainty > 1
        invalid_properties.push('invalid value for "fingerprint_minimum_certainty", must be smaller than or equal to 1.')
      end

      if !@fingerprint_minimum_certainty.nil? && @fingerprint_minimum_certainty < 0
        invalid_properties.push('invalid value for "fingerprint_minimum_certainty", must be greater than or equal to 0.')
      end

      if !@fingerprint_retries.nil? && @fingerprint_retries > 1000
        invalid_properties.push('invalid value for "fingerprint_retries", must be smaller than or equal to 1000.')
      end

      if !@fingerprint_retries.nil? && @fingerprint_retries < 0
        invalid_properties.push('invalid value for "fingerprint_retries", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@fingerprint_minimum_certainty.nil? && @fingerprint_minimum_certainty > 1
      return false if !@fingerprint_minimum_certainty.nil? && @fingerprint_minimum_certainty < 0
      return false if !@fingerprint_retries.nil? && @fingerprint_retries > 1000
      return false if !@fingerprint_retries.nil? && @fingerprint_retries < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] fingerprint_minimum_certainty Value to be assigned
    def fingerprint_minimum_certainty=(fingerprint_minimum_certainty)
      if !fingerprint_minimum_certainty.nil? && fingerprint_minimum_certainty > 1
        fail ArgumentError, 'invalid value for "fingerprint_minimum_certainty", must be smaller than or equal to 1.'
      end

      if !fingerprint_minimum_certainty.nil? && fingerprint_minimum_certainty < 0
        fail ArgumentError, 'invalid value for "fingerprint_minimum_certainty", must be greater than or equal to 0.'
      end

      @fingerprint_minimum_certainty = fingerprint_minimum_certainty
    end

    # Custom attribute writer method with validation
    # @param [Object] fingerprint_retries Value to be assigned
    def fingerprint_retries=(fingerprint_retries)
      if !fingerprint_retries.nil? && fingerprint_retries > 1000
        fail ArgumentError, 'invalid value for "fingerprint_retries", must be smaller than or equal to 1000.'
      end

      if !fingerprint_retries.nil? && fingerprint_retries < 0
        fail ArgumentError, 'invalid value for "fingerprint_retries", must be greater than or equal to 0.'
      end

      @fingerprint_retries = fingerprint_retries
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          collect_whois_information == o.collect_whois_information &&
          fingerprint_minimum_certainty == o.fingerprint_minimum_certainty &&
          fingerprint_retries == o.fingerprint_retries &&
          ip_fingerprinting_enabled == o.ip_fingerprinting_enabled &&
          send_arp_pings == o.send_arp_pings &&
          send_icmp_pings == o.send_icmp_pings &&
          tcp_ports == o.tcp_ports &&
          treat_tcp_reset_as_asset == o.treat_tcp_reset_as_asset &&
          udp_ports == o.udp_ports
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [collect_whois_information, fingerprint_minimum_certainty, fingerprint_retries, ip_fingerprinting_enabled, send_arp_pings, send_icmp_pings, tcp_ports, treat_tcp_reset_as_asset, udp_ports].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
