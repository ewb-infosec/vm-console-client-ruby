=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class SoftwareCpe
    # Edition-related terms applied by the vendor to the product. 
    attr_accessor :edition

    # Defines the language supported in the user interface of the product being described. The format is of the language tag adheres to <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc5646\">RFC5646</a>.
    attr_accessor :language

    # Captures any other general descriptive or identifying information which is vendor- or product-specific and which does not logically fit in any other attribute value. 
    attr_accessor :other

    # A single letter code that designates the particular platform part that is being identified.
    attr_accessor :part

    # the most common and recognizable title or name of the product.
    attr_accessor :product

    # Characterizes how the product is tailored to a particular market or class of end users. 
    attr_accessor :sw_edition

    # Characterize the instruction set architecture on which the product operates. 
    attr_accessor :target_hw

    # Characterize the software computing environment within which the product operates.
    attr_accessor :target_sw

    # Vendor-specific alphanumeric strings characterizing the particular update, service pack, or point release of the product.
    attr_accessor :update

    # The full CPE string in the <a target=\"_blank\" href=\"https://cpe.mitre.org/files/cpe-specification_2.2.pdf\">CPE 2.2</a> format.
    attr_accessor :v2_2

    # The full CPE string in the <a target=\"_blank\" href=\"http://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7695.pdf\">CPE 2.3</a> format.
    attr_accessor :v2_3

    # The person or organization that manufactured or created the product.
    attr_accessor :vendor

    # Vendor-specific alphanumeric strings characterizing the particular release version of the product.
    attr_accessor :version

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'edition' => :'edition',
        :'language' => :'language',
        :'other' => :'other',
        :'part' => :'part',
        :'product' => :'product',
        :'sw_edition' => :'swEdition',
        :'target_hw' => :'targetHW',
        :'target_sw' => :'targetSW',
        :'update' => :'update',
        :'v2_2' => :'v2.2',
        :'v2_3' => :'v2.3',
        :'vendor' => :'vendor',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'edition' => :'String',
        :'language' => :'String',
        :'other' => :'String',
        :'part' => :'String',
        :'product' => :'String',
        :'sw_edition' => :'String',
        :'target_hw' => :'String',
        :'target_sw' => :'String',
        :'update' => :'String',
        :'v2_2' => :'String',
        :'v2_3' => :'String',
        :'vendor' => :'String',
        :'version' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'edition')
        self.edition = attributes[:'edition']
      end

      if attributes.has_key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.has_key?(:'other')
        self.other = attributes[:'other']
      end

      if attributes.has_key?(:'part')
        self.part = attributes[:'part']
      end

      if attributes.has_key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.has_key?(:'swEdition')
        self.sw_edition = attributes[:'swEdition']
      end

      if attributes.has_key?(:'targetHW')
        self.target_hw = attributes[:'targetHW']
      end

      if attributes.has_key?(:'targetSW')
        self.target_sw = attributes[:'targetSW']
      end

      if attributes.has_key?(:'update')
        self.update = attributes[:'update']
      end

      if attributes.has_key?(:'v2.2')
        self.v2_2 = attributes[:'v2.2']
      end

      if attributes.has_key?(:'v2.3')
        self.v2_3 = attributes[:'v2.3']
      end

      if attributes.has_key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @part.nil?
        invalid_properties.push('invalid value for "part", part cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @part.nil?
      part_validator = EnumAttributeValidator.new('String', ['o', 'a', 'h'])
      return false unless part_validator.valid?(@part)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] part Object to be assigned
    def part=(part)
      validator = EnumAttributeValidator.new('String', ['o', 'a', 'h'])
      unless validator.valid?(part)
        fail ArgumentError, 'invalid value for "part", must be one of #{validator.allowable_values}.'
      end
      @part = part
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          edition == o.edition &&
          language == o.language &&
          other == o.other &&
          part == o.part &&
          product == o.product &&
          sw_edition == o.sw_edition &&
          target_hw == o.target_hw &&
          target_sw == o.target_sw &&
          update == o.update &&
          v2_2 == o.v2_2 &&
          v2_3 == o.v2_3 &&
          vendor == o.vendor &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [edition, language, other, part, product, sw_edition, target_hw, target_sw, update, v2_2, v2_3, vendor, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
