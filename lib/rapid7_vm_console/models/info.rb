=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class Info
    # Details regarding the host CPU.
    attr_accessor :cpu

    # Details regarding host disk usage.
    attr_accessor :disk

    # The distinguished name of the console.
    attr_accessor :distinguished_name

    # The fully-qualified domain name of the local host the service is running on.
    attr_accessor :fqdn

    # The name of the local host the service is running on.
    attr_accessor :host

    # The IP address of the local host the service is running on.
    attr_accessor :ip

    # Details regarding the Java Virtual Machine.
    attr_accessor :jvm

    # Hypermedia links to corresponding or related resources.
    attr_accessor :links

    # Details regarding host memory usage.
    attr_accessor :memory

    # The operating system of the host the service is running on.
    attr_accessor :operating_system

    # The serial number of the console.
    attr_accessor :serial

    # Whether the service is running a super-user.
    attr_accessor :superuser

    # The user running the service.
    attr_accessor :user

    # Details regarding the version of the installation.
    attr_accessor :version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cpu' => :'cpu',
        :'disk' => :'disk',
        :'distinguished_name' => :'distinguishedName',
        :'fqdn' => :'fqdn',
        :'host' => :'host',
        :'ip' => :'ip',
        :'jvm' => :'jvm',
        :'links' => :'links',
        :'memory' => :'memory',
        :'operating_system' => :'operatingSystem',
        :'serial' => :'serial',
        :'superuser' => :'superuser',
        :'user' => :'user',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cpu' => :'CPUInfo',
        :'disk' => :'DiskInfo',
        :'distinguished_name' => :'String',
        :'fqdn' => :'String',
        :'host' => :'String',
        :'ip' => :'String',
        :'jvm' => :'JVMInfo',
        :'links' => :'Array<Link>',
        :'memory' => :'MemoryInfo',
        :'operating_system' => :'String',
        :'serial' => :'String',
        :'superuser' => :'BOOLEAN',
        :'user' => :'String',
        :'version' => :'VersionInfo'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'cpu')
        self.cpu = attributes[:'cpu']
      end

      if attributes.has_key?(:'disk')
        self.disk = attributes[:'disk']
      end

      if attributes.has_key?(:'distinguishedName')
        self.distinguished_name = attributes[:'distinguishedName']
      end

      if attributes.has_key?(:'fqdn')
        self.fqdn = attributes[:'fqdn']
      end

      if attributes.has_key?(:'host')
        self.host = attributes[:'host']
      end

      if attributes.has_key?(:'ip')
        self.ip = attributes[:'ip']
      end

      if attributes.has_key?(:'jvm')
        self.jvm = attributes[:'jvm']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'memory')
        self.memory = attributes[:'memory']
      end

      if attributes.has_key?(:'operatingSystem')
        self.operating_system = attributes[:'operatingSystem']
      end

      if attributes.has_key?(:'serial')
        self.serial = attributes[:'serial']
      end

      if attributes.has_key?(:'superuser')
        self.superuser = attributes[:'superuser']
      end

      if attributes.has_key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cpu == o.cpu &&
          disk == o.disk &&
          distinguished_name == o.distinguished_name &&
          fqdn == o.fqdn &&
          host == o.host &&
          ip == o.ip &&
          jvm == o.jvm &&
          links == o.links &&
          memory == o.memory &&
          operating_system == o.operating_system &&
          serial == o.serial &&
          superuser == o.superuser &&
          user == o.user &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cpu, disk, distinguished_name, fqdn, host, ip, jvm, links, memory, operating_system, serial, superuser, user, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
