=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class VulnerabilityCvssV2
    # Access Complexity (AC) component which measures the complexity of the attack required to exploit the vulnerability once an attacker has gained access to the target system.  | Access Complexity       | Description                                                              |  | ----------------------- | ------------------------------------------------------------------------ |  | High (`\"H\"`)            | Specialized access conditions exist.                                     |  | Medium (`\"M\"`)          | The access conditions are somewhat specialized.                          |  | Low (`\"L\"`)             | Specialized access conditions or extenuating circumstances do not exist. |
    attr_accessor :access_complexity

    # Access Vector (Av) component which reflects how the vulnerability is exploited.  | Access Vector              | Description |  | -------------------------- | ----------- |  | Local (`\"L\"`)              | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |  | Adjacent Network (`\"A\"`)   | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |  | Network (`\"N\"`)            | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed \"remotely exploitable\". |  
    attr_accessor :access_vector

    # Authentication (Au) component which measures the number of times an attacker must authenticate to a target in order to exploit a vulnerability.  | Authentication       | Description |  | -------------------- | ----------- |  | Multiple (`\"M\"`)     | Exploiting the vulnerability requires that the attacker authenticate two or more times, even if the same credentials are used each time. |  | Single (`\"S\"`)       | The vulnerability requires an attacker to be logged into the system.                                                                     |  | None (`\"N\"`)         | Authentication is not required to exploit the vulnerability.                                                                             |
    attr_accessor :authentication

    # Availability Impact (A) component which measures the impact to availability of a successfully exploited vulnerability.  | Availability Impact        | Description  |  | -------------------------- | ------------ |  | None (`\"N\"`)               | There is no impact to the availability of the system. |  | Partial (`\"P\"`)            | There is reduced performance or interruptions in resource availability. |  | Complete (`\"C\"`)           | There is a total shutdown of the affected resource. The attacker can render the resource completely unavailable. |
    attr_accessor :availability_impact

    # Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.  | Confidentiality Impact     | Description  |  | -------------------------- | ------------ |  | None (`\"N\"`)               | There is no impact to the confidentiality of the system. |  | Partial (`\"P\"`)            | There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained. |  | Complete (`\"C\"`)           | There is total information disclosure, resulting in all system files being revealed. The attacker is able to read all of the system's data (memory, files, etc.) | 
    attr_accessor :confidentiality_impact

    # The CVSS exploit score.
    attr_accessor :exploit_score

    # The CVSS impact score.
    attr_accessor :impact_score

    # Integrity Impact (I) component measures the impact to integrity of a successfully exploited vulnerability.  | Integrity Impact           | Description  |  | -------------------------- | ------------ |  | None (`\"N\"`)               | There is no impact to the integrity of the system. |  | Partial (`\"P\"`)            | Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited. |  | Complete (`\"C\"`)           | There is a total compromise of system integrity. There is a complete loss of system protection, resulting in the entire system being compromised. The attacker is able to modify any files on the target system. |
    attr_accessor :integrity_impact

    # The CVSS score, which ranges from 0-10.
    attr_accessor :score

    # The <a target=\"_blank\" href=\"https://www.first.org/cvss/v2/guide\">CVSS v2</a> vector.
    attr_accessor :vector

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_complexity' => :'accessComplexity',
        :'access_vector' => :'accessVector',
        :'authentication' => :'authentication',
        :'availability_impact' => :'availabilityImpact',
        :'confidentiality_impact' => :'confidentialityImpact',
        :'exploit_score' => :'exploitScore',
        :'impact_score' => :'impactScore',
        :'integrity_impact' => :'integrityImpact',
        :'score' => :'score',
        :'vector' => :'vector'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'access_complexity' => :'String',
        :'access_vector' => :'String',
        :'authentication' => :'String',
        :'availability_impact' => :'String',
        :'confidentiality_impact' => :'String',
        :'exploit_score' => :'Float',
        :'impact_score' => :'Float',
        :'integrity_impact' => :'String',
        :'score' => :'Float',
        :'vector' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'accessComplexity')
        self.access_complexity = attributes[:'accessComplexity']
      end

      if attributes.has_key?(:'accessVector')
        self.access_vector = attributes[:'accessVector']
      end

      if attributes.has_key?(:'authentication')
        self.authentication = attributes[:'authentication']
      end

      if attributes.has_key?(:'availabilityImpact')
        self.availability_impact = attributes[:'availabilityImpact']
      end

      if attributes.has_key?(:'confidentialityImpact')
        self.confidentiality_impact = attributes[:'confidentialityImpact']
      end

      if attributes.has_key?(:'exploitScore')
        self.exploit_score = attributes[:'exploitScore']
      end

      if attributes.has_key?(:'impactScore')
        self.impact_score = attributes[:'impactScore']
      end

      if attributes.has_key?(:'integrityImpact')
        self.integrity_impact = attributes[:'integrityImpact']
      end

      if attributes.has_key?(:'score')
        self.score = attributes[:'score']
      end

      if attributes.has_key?(:'vector')
        self.vector = attributes[:'vector']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      access_complexity_validator = EnumAttributeValidator.new('String', ['L', 'M', 'H'])
      return false unless access_complexity_validator.valid?(@access_complexity)
      access_vector_validator = EnumAttributeValidator.new('String', ['L', 'A', 'N'])
      return false unless access_vector_validator.valid?(@access_vector)
      authentication_validator = EnumAttributeValidator.new('String', ['N', 'S', 'M'])
      return false unless authentication_validator.valid?(@authentication)
      availability_impact_validator = EnumAttributeValidator.new('String', ['N', 'P', 'C'])
      return false unless availability_impact_validator.valid?(@availability_impact)
      confidentiality_impact_validator = EnumAttributeValidator.new('String', ['N', 'P', 'C'])
      return false unless confidentiality_impact_validator.valid?(@confidentiality_impact)
      integrity_impact_validator = EnumAttributeValidator.new('String', ['N', 'P', 'C'])
      return false unless integrity_impact_validator.valid?(@integrity_impact)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_complexity Object to be assigned
    def access_complexity=(access_complexity)
      validator = EnumAttributeValidator.new('String', ['L', 'M', 'H'])
      unless validator.valid?(access_complexity)
        fail ArgumentError, 'invalid value for "access_complexity", must be one of #{validator.allowable_values}.'
      end
      @access_complexity = access_complexity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_vector Object to be assigned
    def access_vector=(access_vector)
      validator = EnumAttributeValidator.new('String', ['L', 'A', 'N'])
      unless validator.valid?(access_vector)
        fail ArgumentError, 'invalid value for "access_vector", must be one of #{validator.allowable_values}.'
      end
      @access_vector = access_vector
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authentication Object to be assigned
    def authentication=(authentication)
      validator = EnumAttributeValidator.new('String', ['N', 'S', 'M'])
      unless validator.valid?(authentication)
        fail ArgumentError, 'invalid value for "authentication", must be one of #{validator.allowable_values}.'
      end
      @authentication = authentication
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] availability_impact Object to be assigned
    def availability_impact=(availability_impact)
      validator = EnumAttributeValidator.new('String', ['N', 'P', 'C'])
      unless validator.valid?(availability_impact)
        fail ArgumentError, 'invalid value for "availability_impact", must be one of #{validator.allowable_values}.'
      end
      @availability_impact = availability_impact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] confidentiality_impact Object to be assigned
    def confidentiality_impact=(confidentiality_impact)
      validator = EnumAttributeValidator.new('String', ['N', 'P', 'C'])
      unless validator.valid?(confidentiality_impact)
        fail ArgumentError, 'invalid value for "confidentiality_impact", must be one of #{validator.allowable_values}.'
      end
      @confidentiality_impact = confidentiality_impact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] integrity_impact Object to be assigned
    def integrity_impact=(integrity_impact)
      validator = EnumAttributeValidator.new('String', ['N', 'P', 'C'])
      unless validator.valid?(integrity_impact)
        fail ArgumentError, 'invalid value for "integrity_impact", must be one of #{validator.allowable_values}.'
      end
      @integrity_impact = integrity_impact
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_complexity == o.access_complexity &&
          access_vector == o.access_vector &&
          authentication == o.authentication &&
          availability_impact == o.availability_impact &&
          confidentiality_impact == o.confidentiality_impact &&
          exploit_score == o.exploit_score &&
          impact_score == o.impact_score &&
          integrity_impact == o.integrity_impact &&
          score == o.score &&
          vector == o.vector
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [access_complexity, access_vector, authentication, availability_impact, confidentiality_impact, exploit_score, impact_score, integrity_impact, score, vector].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
