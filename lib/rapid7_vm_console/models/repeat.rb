=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class Repeat
    # The day of the week the scheduled task should repeat. This property only applies to schedules with a `every` value of `\"day-of-month\"`.
    attr_accessor :day_of_week

    # The frequency schedule repeats. Each value represents a different unit of time and is used in conjunction with the property `interval`. For example, a schedule can repeat hourly, daily, monthly, etc. The following table describes each supported value:  | Value | Description |  | ---------- | ---------------- |  | hour | Specifies the schedule repeats in hourly increments. |  | day | Specifies the schedule repeats in daily increments. |  | week | Specifies the schedule repeats in weekly increments. |  | date-of-month | Specifies the schedule repeats nth day of the `interval` month. Requires the property `dateOfMonth` to be specified. For example, if `dateOfMonth` is `17` and the `interval` is `2`, then the schedule will repeat every 2 months on the 17th day of the month. |  | day-of-month | Specifies the schedule repeats on a monthly interval but instead of a specific date being specified, the day of the week and week of the month are specified. Requires the properties `dayOfWeek` and `weekOfMonth` to be specified. For example, if `dayOfWeek` is `\"friday\"`, `weekOfMonth` is `3`, and the `interval` is `4`, then the schedule will repeat every 4 months on the 3rd Friday of the month. |  
    attr_accessor :every

    # The interval time the schedule should repeat. The is depends on the value set in `every`. For example, if the value in property `every` is set to `\"day\"` and `interval` is set to `2`, then the schedule will repeat every 2 days.
    attr_accessor :interval

    # Whether to run the scheduled task on the last day of the month.
    attr_accessor :last_day_of_month

    # The week of the month the scheduled task should repeat. For This property only applies to schedules with a `every` value of `\"day-of-month\"`. Each week of the month is counted in 7-day increments. For example, week 1 consists of days 1-7 of the month while week 2 consists of days 8-14 of the month and so forth.
    attr_accessor :week_of_month

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'day_of_week' => :'dayOfWeek',
        :'every' => :'every',
        :'interval' => :'interval',
        :'last_day_of_month' => :'lastDayOfMonth',
        :'week_of_month' => :'weekOfMonth'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'day_of_week' => :'String',
        :'every' => :'String',
        :'interval' => :'Integer',
        :'last_day_of_month' => :'BOOLEAN',
        :'week_of_month' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'dayOfWeek')
        self.day_of_week = attributes[:'dayOfWeek']
      end

      if attributes.has_key?(:'every')
        self.every = attributes[:'every']
      end

      if attributes.has_key?(:'interval')
        self.interval = attributes[:'interval']
      end

      if attributes.has_key?(:'lastDayOfMonth')
        self.last_day_of_month = attributes[:'lastDayOfMonth']
      end

      if attributes.has_key?(:'weekOfMonth')
        self.week_of_month = attributes[:'weekOfMonth']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @every.nil?
        invalid_properties.push('invalid value for "every", every cannot be nil.')
      end

      if @interval.nil?
        invalid_properties.push('invalid value for "interval", interval cannot be nil.')
      end

      if @interval < 1
        invalid_properties.push('invalid value for "interval", must be greater than or equal to 1.')
      end

      if !@week_of_month.nil? && @week_of_month > 6
        invalid_properties.push('invalid value for "week_of_month", must be smaller than or equal to 6.')
      end

      if !@week_of_month.nil? && @week_of_month < 1
        invalid_properties.push('invalid value for "week_of_month", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @every.nil?
      return false if @interval.nil?
      return false if @interval < 1
      return false if !@week_of_month.nil? && @week_of_month > 6
      return false if !@week_of_month.nil? && @week_of_month < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] interval Value to be assigned
    def interval=(interval)
      if interval.nil?
        fail ArgumentError, 'interval cannot be nil'
      end

      if interval < 1
        fail ArgumentError, 'invalid value for "interval", must be greater than or equal to 1.'
      end

      @interval = interval
    end

    # Custom attribute writer method with validation
    # @param [Object] week_of_month Value to be assigned
    def week_of_month=(week_of_month)
      if !week_of_month.nil? && week_of_month > 6
        fail ArgumentError, 'invalid value for "week_of_month", must be smaller than or equal to 6.'
      end

      if !week_of_month.nil? && week_of_month < 1
        fail ArgumentError, 'invalid value for "week_of_month", must be greater than or equal to 1.'
      end

      @week_of_month = week_of_month
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          day_of_week == o.day_of_week &&
          every == o.every &&
          interval == o.interval &&
          last_day_of_month == o.last_day_of_month &&
          week_of_month == o.week_of_month
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [day_of_week, every, interval, last_day_of_month, week_of_month].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
