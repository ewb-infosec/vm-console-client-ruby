=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class DiscoveryConnection
    # The AWS credential access key identifier (only used for the AWS connection).
    attr_accessor :access_key_id

    # ${discovery.connection.address}
    attr_accessor :address

    # The AWS credential ARN (only used for the AWS connection).
    attr_accessor :arn

    # The AWS credential session name (only used for the AWS connection).
    attr_accessor :aws_session_name

    # The type of the discovery connection.
    attr_accessor :connection_type

    # The event source type to use.
    attr_accessor :event_source

    # The hostname of the exchange server to connect to.
    attr_accessor :exchange_server_hostname

    # The username used to connect to the exchange server.
    attr_accessor :exchange_user

    # The folder path to pull logs from.
    attr_accessor :folder_path

    # The identifier of the discovery connection.
    attr_accessor :id

    # The LDAP server to connect to.
    attr_accessor :ldap_server

    # Hypermedia links to corresponding or related resources.
    attr_accessor :links

    # The discovery connection name.
    attr_accessor :name

    # The address used to connect to the discovery connection source.
    attr_accessor :port

    # The protocol used to connect to the discovery connection source.
    attr_accessor :protocol

    # The AWS region (only used for the AWS connection).
    attr_accessor :region

    # Flag denoting whether the scan engine is in AWS, this is used for AWS discovery connections for scanning purposes (only used for the AWS connection).
    attr_accessor :scan_engine_is_inside_aws

    # The AWS credential secret access key (only used for the AWS connection).
    attr_accessor :secret_access_key

    # The status of the discovery connection.
    attr_accessor :status

    # The username used to authenticate to the discovery connection source.
    attr_accessor :username

    # The WinRM server to connect to. 
    attr_accessor :win_rm_server

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_key_id' => :'accessKeyId',
        :'address' => :'address',
        :'arn' => :'arn',
        :'aws_session_name' => :'awsSessionName',
        :'connection_type' => :'connectionType',
        :'event_source' => :'eventSource',
        :'exchange_server_hostname' => :'exchangeServerHostname',
        :'exchange_user' => :'exchangeUser',
        :'folder_path' => :'folderPath',
        :'id' => :'id',
        :'ldap_server' => :'ldapServer',
        :'links' => :'links',
        :'name' => :'name',
        :'port' => :'port',
        :'protocol' => :'protocol',
        :'region' => :'region',
        :'scan_engine_is_inside_aws' => :'scanEngineIsInsideAWS',
        :'secret_access_key' => :'secretAccessKey',
        :'status' => :'status',
        :'username' => :'username',
        :'win_rm_server' => :'winRMServer'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'access_key_id' => :'String',
        :'address' => :'String',
        :'arn' => :'String',
        :'aws_session_name' => :'String',
        :'connection_type' => :'String',
        :'event_source' => :'String',
        :'exchange_server_hostname' => :'String',
        :'exchange_user' => :'String',
        :'folder_path' => :'String',
        :'id' => :'Integer',
        :'ldap_server' => :'String',
        :'links' => :'Array<Link>',
        :'name' => :'String',
        :'port' => :'Integer',
        :'protocol' => :'String',
        :'region' => :'String',
        :'scan_engine_is_inside_aws' => :'BOOLEAN',
        :'secret_access_key' => :'String',
        :'status' => :'String',
        :'username' => :'String',
        :'win_rm_server' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'accessKeyId')
        self.access_key_id = attributes[:'accessKeyId']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'arn')
        self.arn = attributes[:'arn']
      end

      if attributes.has_key?(:'awsSessionName')
        self.aws_session_name = attributes[:'awsSessionName']
      end

      if attributes.has_key?(:'connectionType')
        self.connection_type = attributes[:'connectionType']
      end

      if attributes.has_key?(:'eventSource')
        self.event_source = attributes[:'eventSource']
      end

      if attributes.has_key?(:'exchangeServerHostname')
        self.exchange_server_hostname = attributes[:'exchangeServerHostname']
      end

      if attributes.has_key?(:'exchangeUser')
        self.exchange_user = attributes[:'exchangeUser']
      end

      if attributes.has_key?(:'folderPath')
        self.folder_path = attributes[:'folderPath']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'ldapServer')
        self.ldap_server = attributes[:'ldapServer']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'port')
        self.port = attributes[:'port']
      end

      if attributes.has_key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'scanEngineIsInsideAWS')
        self.scan_engine_is_inside_aws = attributes[:'scanEngineIsInsideAWS']
      end

      if attributes.has_key?(:'secretAccessKey')
        self.secret_access_key = attributes[:'secretAccessKey']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.has_key?(:'winRMServer')
        self.win_rm_server = attributes[:'winRMServer']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_key_id == o.access_key_id &&
          address == o.address &&
          arn == o.arn &&
          aws_session_name == o.aws_session_name &&
          connection_type == o.connection_type &&
          event_source == o.event_source &&
          exchange_server_hostname == o.exchange_server_hostname &&
          exchange_user == o.exchange_user &&
          folder_path == o.folder_path &&
          id == o.id &&
          ldap_server == o.ldap_server &&
          links == o.links &&
          name == o.name &&
          port == o.port &&
          protocol == o.protocol &&
          region == o.region &&
          scan_engine_is_inside_aws == o.scan_engine_is_inside_aws &&
          secret_access_key == o.secret_access_key &&
          status == o.status &&
          username == o.username &&
          win_rm_server == o.win_rm_server
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [access_key_id, address, arn, aws_session_name, connection_type, event_source, exchange_server_hostname, exchange_user, folder_path, id, ldap_server, links, name, port, protocol, region, scan_engine_is_inside_aws, secret_access_key, status, username, win_rm_server].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
