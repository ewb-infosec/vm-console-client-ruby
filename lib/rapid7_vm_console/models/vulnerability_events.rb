=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class VulnerabilityEvents
    # Generates an alert for vulnerability results of confirmed vulnerabilties. A vulnerability is \"confirmed\" when asset-specific vulnerability tests, such as exploits, produce positive results. Default value is `true`.
    attr_accessor :confirmed_vulnerabilities

    # Generates an alert for vulnerability results of potential vulnerabilties. A vulnerability is \"potential\" if a check for a potential vulnerabilty is positive. Default value is `true`.
    attr_accessor :potential_vulnerabilities

    # Generates an alert for vulnerability results of unconfirmed vulnerabilties. A vulnerability is \"unconfirmed\" when a version of a scanned service or software is known to be vulnerable, but there is no positive verification. Default value is `true`.
    attr_accessor :unconfirmed_vulnerabilities

    # Generates an alert for vulnerability results of the selected vulnerability severity. Default value is `\"any_severity\"`.
    attr_accessor :vulnerability_severity

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'confirmed_vulnerabilities' => :'confirmedVulnerabilities',
        :'potential_vulnerabilities' => :'potentialVulnerabilities',
        :'unconfirmed_vulnerabilities' => :'unconfirmedVulnerabilities',
        :'vulnerability_severity' => :'vulnerabilitySeverity'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'confirmed_vulnerabilities' => :'BOOLEAN',
        :'potential_vulnerabilities' => :'BOOLEAN',
        :'unconfirmed_vulnerabilities' => :'BOOLEAN',
        :'vulnerability_severity' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'confirmedVulnerabilities')
        self.confirmed_vulnerabilities = attributes[:'confirmedVulnerabilities']
      end

      if attributes.has_key?(:'potentialVulnerabilities')
        self.potential_vulnerabilities = attributes[:'potentialVulnerabilities']
      end

      if attributes.has_key?(:'unconfirmedVulnerabilities')
        self.unconfirmed_vulnerabilities = attributes[:'unconfirmedVulnerabilities']
      end

      if attributes.has_key?(:'vulnerabilitySeverity')
        self.vulnerability_severity = attributes[:'vulnerabilitySeverity']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @confirmed_vulnerabilities.nil?
        invalid_properties.push('invalid value for "confirmed_vulnerabilities", confirmed_vulnerabilities cannot be nil.')
      end

      if @potential_vulnerabilities.nil?
        invalid_properties.push('invalid value for "potential_vulnerabilities", potential_vulnerabilities cannot be nil.')
      end

      if @unconfirmed_vulnerabilities.nil?
        invalid_properties.push('invalid value for "unconfirmed_vulnerabilities", unconfirmed_vulnerabilities cannot be nil.')
      end

      if @vulnerability_severity.nil?
        invalid_properties.push('invalid value for "vulnerability_severity", vulnerability_severity cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @confirmed_vulnerabilities.nil?
      return false if @potential_vulnerabilities.nil?
      return false if @unconfirmed_vulnerabilities.nil?
      return false if @vulnerability_severity.nil?
      vulnerability_severity_validator = EnumAttributeValidator.new('String', ['any_severity', 'severe_and_critical', 'only_critical'])
      return false unless vulnerability_severity_validator.valid?(@vulnerability_severity)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vulnerability_severity Object to be assigned
    def vulnerability_severity=(vulnerability_severity)
      validator = EnumAttributeValidator.new('String', ['any_severity', 'severe_and_critical', 'only_critical'])
      unless validator.valid?(vulnerability_severity)
        fail ArgumentError, 'invalid value for "vulnerability_severity", must be one of #{validator.allowable_values}.'
      end
      @vulnerability_severity = vulnerability_severity
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          confirmed_vulnerabilities == o.confirmed_vulnerabilities &&
          potential_vulnerabilities == o.potential_vulnerabilities &&
          unconfirmed_vulnerabilities == o.unconfirmed_vulnerabilities &&
          vulnerability_severity == o.vulnerability_severity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [confirmed_vulnerabilities, potential_vulnerabilities, unconfirmed_vulnerabilities, vulnerability_severity].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
