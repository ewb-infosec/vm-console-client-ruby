=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class ScanTemplate
    # Settings for which vulnerability checks to run during a scan. <br/>  The rules for inclusion of checks is as follows:  <ul>  <li>Enabled checks by category and by check type are included</li>  <li>Disabled checks in by category and by check type are removed</li>  <li>Enabled checks in by individual check are added (even if they are disabled in by category or check type)</li>  <li>Disabled checks in by individual check are removed</li>  <li>If unsafe is disabled, unsafe checks are removed</li>  <li>If potential is disabled, potential checks are removed</li>  <ul>
    attr_accessor :checks

    # Settings for discovery databases.
    attr_accessor :database

    # A verbose description of the scan template..
    attr_accessor :description

    # Discovery settings used during a scan.
    attr_accessor :discovery

    # Whether only discovery is performed during a scan.
    attr_accessor :discovery_only

    # Whether Windows services are enabled during a scan. Windows services will be temporarily reconfigured when this option is selected. Original settings will be restored after the scan completes, unless it is interrupted.
    attr_accessor :enable_windows_services

    # Whether enhanced logging is gathered during scanning. Collection of enhanced logs may greatly increase the disk space used by a scan.
    attr_accessor :enhanced_logging

    # The identifier of the scan template
    attr_accessor :id

    # Hypermedia links to corresponding or related resources.
    attr_accessor :links

    # The maximum number of assets scanned simultaneously per scan engine during a scan.
    attr_accessor :max_parallel_assets

    # The maximum number of scan processes simultaneously allowed against each asset during a scan.
    attr_accessor :max_scan_processes

    # A concise name for the scan template.
    attr_accessor :name

    # Policy configuration settings used during a scan.
    attr_accessor :policy

    # Whether policy assessment is performed during a scan.
    attr_accessor :policy_enabled

    # Settings for interacting with the Telnet protocol.
    attr_accessor :telnet

    # Whether vulnerability assessment is performed during a scan.
    attr_accessor :vulnerability_enabled

    # Web spider settings used during a scan.
    attr_accessor :web

    # Whether web spidering and assessment are performed during a scan.
    attr_accessor :web_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'checks' => :'checks',
        :'database' => :'database',
        :'description' => :'description',
        :'discovery' => :'discovery',
        :'discovery_only' => :'discoveryOnly',
        :'enable_windows_services' => :'enableWindowsServices',
        :'enhanced_logging' => :'enhancedLogging',
        :'id' => :'id',
        :'links' => :'links',
        :'max_parallel_assets' => :'maxParallelAssets',
        :'max_scan_processes' => :'maxScanProcesses',
        :'name' => :'name',
        :'policy' => :'policy',
        :'policy_enabled' => :'policyEnabled',
        :'telnet' => :'telnet',
        :'vulnerability_enabled' => :'vulnerabilityEnabled',
        :'web' => :'web',
        :'web_enabled' => :'webEnabled'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'checks' => :'ScanTemplateVulnerabilityChecks',
        :'database' => :'ScanTemplateDatabase',
        :'description' => :'String',
        :'discovery' => :'ScanTemplateDiscovery',
        :'discovery_only' => :'BOOLEAN',
        :'enable_windows_services' => :'BOOLEAN',
        :'enhanced_logging' => :'BOOLEAN',
        :'id' => :'String',
        :'links' => :'Array<Link>',
        :'max_parallel_assets' => :'Integer',
        :'max_scan_processes' => :'Integer',
        :'name' => :'String',
        :'policy' => :'Policy',
        :'policy_enabled' => :'BOOLEAN',
        :'telnet' => :'Telnet',
        :'vulnerability_enabled' => :'BOOLEAN',
        :'web' => :'ScanTemplateWebSpider',
        :'web_enabled' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'checks')
        self.checks = attributes[:'checks']
      end

      if attributes.has_key?(:'database')
        self.database = attributes[:'database']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'discovery')
        self.discovery = attributes[:'discovery']
      end

      if attributes.has_key?(:'discoveryOnly')
        self.discovery_only = attributes[:'discoveryOnly']
      end

      if attributes.has_key?(:'enableWindowsServices')
        self.enable_windows_services = attributes[:'enableWindowsServices']
      end

      if attributes.has_key?(:'enhancedLogging')
        self.enhanced_logging = attributes[:'enhancedLogging']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.has_key?(:'maxParallelAssets')
        self.max_parallel_assets = attributes[:'maxParallelAssets']
      end

      if attributes.has_key?(:'maxScanProcesses')
        self.max_scan_processes = attributes[:'maxScanProcesses']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'policy')
        self.policy = attributes[:'policy']
      end

      if attributes.has_key?(:'policyEnabled')
        self.policy_enabled = attributes[:'policyEnabled']
      end

      if attributes.has_key?(:'telnet')
        self.telnet = attributes[:'telnet']
      end

      if attributes.has_key?(:'vulnerabilityEnabled')
        self.vulnerability_enabled = attributes[:'vulnerabilityEnabled']
      end

      if attributes.has_key?(:'web')
        self.web = attributes[:'web']
      end

      if attributes.has_key?(:'webEnabled')
        self.web_enabled = attributes[:'webEnabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          checks == o.checks &&
          database == o.database &&
          description == o.description &&
          discovery == o.discovery &&
          discovery_only == o.discovery_only &&
          enable_windows_services == o.enable_windows_services &&
          enhanced_logging == o.enhanced_logging &&
          id == o.id &&
          links == o.links &&
          max_parallel_assets == o.max_parallel_assets &&
          max_scan_processes == o.max_scan_processes &&
          name == o.name &&
          policy == o.policy &&
          policy_enabled == o.policy_enabled &&
          telnet == o.telnet &&
          vulnerability_enabled == o.vulnerability_enabled &&
          web == o.web &&
          web_enabled == o.web_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [checks, database, description, discovery, discovery_only, enable_windows_services, enhanced_logging, id, links, max_parallel_assets, max_scan_processes, name, policy, policy_enabled, telnet, vulnerability_enabled, web, web_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
