=begin
Ruby InsightVM API Client

OpenAPI spec version: 3
Contact: support@rapid7.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module Rapid7VmConsole
  # 
  class Features
    # Whether Adaptive Security features are available.
    attr_accessor :adaptive_security

    # Whether the use of agents is allowed.
    attr_accessor :agents

    # Whether dynamic discovery sources may be used.
    attr_accessor :dynamic_discovery

    # Whether early-access features are available prior to general availability.
    attr_accessor :early_access

    # Whether scan engine pools may be used.
    attr_accessor :engine_pool

    # Whether the usage of the Insight platform is allowed.
    attr_accessor :insight_platform

    # Whether mobile features are allowed.
    attr_accessor :mobile

    # Whether multitenancy is allowed.
    attr_accessor :multitenancy

    # Whether the editing of policies is allowed.
    attr_accessor :policy_editor

    # Whether the policy manager is allowed.
    attr_accessor :policy_manager

    # Whether Remediation Analytics features are available.
    attr_accessor :remediation_analytics

    # The reporting features available in the license.
    attr_accessor :reporting

    # The scanning features available in the license.
    attr_accessor :scanning

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'adaptive_security' => :'adaptiveSecurity',
        :'agents' => :'agents',
        :'dynamic_discovery' => :'dynamicDiscovery',
        :'early_access' => :'earlyAccess',
        :'engine_pool' => :'enginePool',
        :'insight_platform' => :'insightPlatform',
        :'mobile' => :'mobile',
        :'multitenancy' => :'multitenancy',
        :'policy_editor' => :'policyEditor',
        :'policy_manager' => :'policyManager',
        :'remediation_analytics' => :'remediationAnalytics',
        :'reporting' => :'reporting',
        :'scanning' => :'scanning'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'adaptive_security' => :'BOOLEAN',
        :'agents' => :'BOOLEAN',
        :'dynamic_discovery' => :'BOOLEAN',
        :'early_access' => :'BOOLEAN',
        :'engine_pool' => :'BOOLEAN',
        :'insight_platform' => :'BOOLEAN',
        :'mobile' => :'BOOLEAN',
        :'multitenancy' => :'BOOLEAN',
        :'policy_editor' => :'BOOLEAN',
        :'policy_manager' => :'BOOLEAN',
        :'remediation_analytics' => :'BOOLEAN',
        :'reporting' => :'LicenseReporting',
        :'scanning' => :'LicenseScanning'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'adaptiveSecurity')
        self.adaptive_security = attributes[:'adaptiveSecurity']
      end

      if attributes.has_key?(:'agents')
        self.agents = attributes[:'agents']
      end

      if attributes.has_key?(:'dynamicDiscovery')
        self.dynamic_discovery = attributes[:'dynamicDiscovery']
      end

      if attributes.has_key?(:'earlyAccess')
        self.early_access = attributes[:'earlyAccess']
      end

      if attributes.has_key?(:'enginePool')
        self.engine_pool = attributes[:'enginePool']
      end

      if attributes.has_key?(:'insightPlatform')
        self.insight_platform = attributes[:'insightPlatform']
      end

      if attributes.has_key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.has_key?(:'multitenancy')
        self.multitenancy = attributes[:'multitenancy']
      end

      if attributes.has_key?(:'policyEditor')
        self.policy_editor = attributes[:'policyEditor']
      end

      if attributes.has_key?(:'policyManager')
        self.policy_manager = attributes[:'policyManager']
      end

      if attributes.has_key?(:'remediationAnalytics')
        self.remediation_analytics = attributes[:'remediationAnalytics']
      end

      if attributes.has_key?(:'reporting')
        self.reporting = attributes[:'reporting']
      end

      if attributes.has_key?(:'scanning')
        self.scanning = attributes[:'scanning']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          adaptive_security == o.adaptive_security &&
          agents == o.agents &&
          dynamic_discovery == o.dynamic_discovery &&
          early_access == o.early_access &&
          engine_pool == o.engine_pool &&
          insight_platform == o.insight_platform &&
          mobile == o.mobile &&
          multitenancy == o.multitenancy &&
          policy_editor == o.policy_editor &&
          policy_manager == o.policy_manager &&
          remediation_analytics == o.remediation_analytics &&
          reporting == o.reporting &&
          scanning == o.scanning
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [adaptive_security, agents, dynamic_discovery, early_access, engine_pool, insight_platform, mobile, multitenancy, policy_editor, policy_manager, remediation_analytics, reporting, scanning].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Rapid7VmConsole.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
